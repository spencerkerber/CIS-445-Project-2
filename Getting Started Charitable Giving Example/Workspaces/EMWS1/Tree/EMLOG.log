*------------------------------------------------------------*
User:                sakerb01
Date:                October 11, 2015
Time:                15:01:11
Site:                70080761
Platform:            X64_7PRO
Maintenance Release: 9.04.01M0P061913
EM Version:          12.3
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 11, 2015"
);
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:00:48" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                October 11, 2015
Time:                15:00:48
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0QB6LIQ "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMTRAIN.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0QB6LIQ new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMLOG.log"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 11, 2015"
);
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:00:48" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                sakerb01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080761";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M0P061913";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.3";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMTRAIN.log"
encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMSCORE.log"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMREPORT.log"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMOUTPUT.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 11, 2015"
);
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:00:48" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                sakerb01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMTRAIN.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMSCORE.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMREPORT.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml'
encoding="UTF-8" NOBOM;
42175      proc freq data=EMWS1.Tree_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Tree_VariableSet noprint;
42176      table ROLE*LEVEL/out=WORK.TreeMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TreeMETA;
42177      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
42178      proc print data=WORK.TreeMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TreeMETA label noobs;
42179      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
42180      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
42180    ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
42180    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
42181      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
42182      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
42183      run;
 
NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 14.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
42184      title10;
MPRINT(EM_DIAGRAM):   title10;
42185      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN EMWS1 Repl_TRAIN
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN
EMWS1.Repl_TRAIN EMWS1.Repl_TRAIN EMWS1 Repl_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Repl_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class TARGET_B(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="TARGET_B";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=TARGET_B));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="TARGET_B";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Ids_TARGET_B_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by TARGET_B;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by TARGET_B;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
42214      data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
42215      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
42216      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
42216    ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
42216    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
42217         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
42217    ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
42217    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
42218      set EMWS1.IDS_TARGET_B_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.IDS_TARGET_B_DM( where=(_TYPE_="TARGET"));
42219      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
42220      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
42221      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
42222      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
42223      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
42224      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
42225      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
42226      end;
MPRINT(EM_DIAGRAM):   end;
42227      output;
MPRINT(EM_DIAGRAM):   output;
42228      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET_B_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
42229      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
42230      proc print data=WORK.Tree_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree_EVENT noobs label;
42231      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
42232      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
42233      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
42234      run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 15.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
42235      title10;
MPRINT(EM_DIAGRAM):   title10;
42236      proc print data = EMWS1.Ids_TARGET_B_DD noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_TARGET_B_DD noobs label;
42237      var TARGET_B
42238      TRAINPRIOR
42239      DECISION1
42240      DECISION2
42241      DECPRIOR
42242      ;
MPRINT(EM_DIAGRAM):   var TARGET_B TRAINPRIOR DECISION1 DECISION2 DECPRIOR ;
42243      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
42244      title10 "Decision Matrix and Prior Vector";
MPRINT(EM_DIAGRAM):   title10 "Decision Matrix and Prior Vector";
MPRINT(EM_DIAGRAM):   run;
42245      run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_TARGET_B_DD.
NOTE: The PROCEDURE PRINT printed page 16.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
42246      title10;
MPRINT(EM_DIAGRAM):   title10;
42247      proc print data = EMWS1.Ids_TARGET_B_DM noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS1.Ids_TARGET_B_DM noobs label;
42248      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
42249      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
42250      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
42250    ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
42250    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
42251      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
42252      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
42253      run;
 
NOTE: There were 11 observations read from the data set EMWS1.IDS_TARGET_B_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 17.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
42254      title10;
MPRINT(EM_DIAGRAM):   title10;
42255      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify TARGET_B(type=PROFIT label= TARGET_B);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Getting Started Charitable Giving Example';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Donations';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.TARGET_B;
MPRINT(EM_DECDATA):   length TARGET_B $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8
DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   TARGET_B="1";
MPRINT(EM_DECDATA):   COUNT=4843;
MPRINT(EM_DECDATA):   DATAPRIOR=0.25;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.25;
MPRINT(EM_DECDATA):   DECPRIOR=0.05;
MPRINT(EM_DECDATA):   DECISION1=14.5;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   TARGET_B="0";
MPRINT(EM_DECDATA):   COUNT=14529;
MPRINT(EM_DECDATA):   DATAPRIOR=0.75;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.75;
MPRINT(EM_DECDATA):   DECPRIOR=0.95;
MPRINT(EM_DECDATA):   DECISION1=-0.5;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify TARGET_B(type=PROFIT label= TARGET_B);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify TARGET_B(type=PROFIT label= TARGET_B);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="TARGET_B";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_TARGET_B_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_TARGET_B_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="TARGET_B";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_TARGET_B_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_TARGET_B_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
42820      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
42821      * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
42822      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
42823      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
42824      %let EMEXCEPTIONSTRING=;
42825      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
42826      * TRAIN: Tree;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree;
42827      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42828      %let EM_ACTION = TRAIN;
42829      %let syscc = 0;
42830      %macro main;
42831
42832        %if %upcase(&EM_ACTION) = CREATE %then %do;
42833          filename temp catalog 'sashelp.emmodl.tree_create.source';
42834          %include temp;
42835          filename temp;
42836
42837          %em_tree_create;
42838        %end;
42839
42840         %else
42841         %if %upcase(&EM_ACTION) = TRAIN %then %do;
42842
42843             filename temp catalog 'sashelp.emmodl.tree_train.source';
42844             %include temp;
42845             filename temp;
42846             %em_tree_train;
42847         %end;
42848
42849        %else
42850        %if %upcase(&EM_ACTION) = SCORE %then %do;
42851          filename temp catalog 'sashelp.emmodl.tree_score.source';
42852          %include temp;
42853          filename temp;
42854
42855          %em_tree_score;
42856
42857        %end;
42858
42859        %else
42860        %if %upcase(&EM_ACTION) = REPORT %then %do;
42861
42862             filename temp catalog 'sashelp.emmodl.tree_report.source';
42863             %include temp;
42864             filename temp;
42865
42866             %em_tree_report;
42867         %end;
42868
42869        %else
42870        %if %upcase(&EM_ACTION) = OPENINT %then %do;
42871
42872             filename temp catalog 'sashelp.emmodl.tree_actions.source';
42873             %include temp;
42874             filename temp;
42875             %EM_TREE_OPENTREEVIEWER;
42876
42877         %end;
42878
42879        %else
42880        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
42881
42882             filename temp catalog 'sashelp.emmodl.tree_actions.source';
42883             %include temp;
42884             filename temp;
42885             %EM_TREE_CLOSETREEVIEWER;
42886
42887         %end;
42888
42889
42890         %doendm:
42891      %mend main;
42892
42893      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
42895     +%macro em_tree_train;
42897     +   %if &EM_IMPORT_DATA eq %then %do;
42898     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
42899     +       %put &em_codebar;
42900     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note,
42900    !+NOQUOTE));
42901     +       %put &errormsg;
42902     +       %put &em_codebar;
42903     +       %goto doendm;
42904     +   %end;
42905     +   %else
42906     +       %let EMEXCEPTIONSTRING =;
42908     +   %if  &EM_NUM_TARGET lt 1 %then %do;
42909     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
42910     +        %put &em_codebar;
42911     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err,
42911    !+NOQUOTE));
42912     +        %put &errormsg;
42913     +        %put &em_codebar;
42914     +        %goto doendm;
42915     +   %end;
42917     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and
42917    !+(&EM_NUM_ORDINAL_INPUT < 1)
42918     +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and
42918    !+(&EM_NUM_BINARY_REJECTED <1)
42919     +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then
42919    !+%do;
42920     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
42921     +        %put &em_codebar;
42922     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE))
42922    !+;
42923     +        %put &errormsg;
42924     +        %put &em_codebar;
42925     +        %goto doendm;
42926     +   %end;
42928     +   /* Initialize property macro variables */
42929     +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
42930     +   %include temp;
42931     +   filename temp;
42933     +   %EM_SetProperties;
42935     +   /* load tree macros */
42936     +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
42937     +   %include temp;
42938     +   filename temp;
42940     +   /* data sets */
42941     +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
42942     +   %EM_GETNAME(key=EMTREE,    type=DATA);
42943     +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
42944     +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
42946     +   /* files */
42947     +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=sas);
42949     +   /* check actual num of target levels */
42950     +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
42951     +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
42952     +                              nLevel=_nTargetLevel );
42953     +      %if &_nTargetLevel  > 2 %then %do;
42954     +        %let EMEXCEPTIONSTRING =
42954    !+exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
42955     +        %put &em_codebar;
42956     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel,
42956    !+NOQUOTE));
42957     +        %put &errormsg;
42958     +        %put &em_codebar;
42959     +        %goto doendm;
42960     +      %end;
42961     +   %end;
42963     +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
42964     +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
42965     +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
42966     +        %let costflag=0;
42967     +        data _null_;
42968     +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND
42968    !+^missing(COST) )) end=eof;
42969     +          if eof then call symput("costflag", _N_);
42970     +        run;
42971     +        %if &costflag gt 0 %then %do;
42972     +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
42973     +          %put &em_codebar;
42974     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
42974    !+costnotvalidwithusedecisions_note, NOQUOTE));
42975     +          %put &errormsg;
42976     +          %put &em_codebar;
42977     +          %goto doendm;
42978     +       %end;
42979     +     %end;
42980     +   %end;
42982     +   /* determine if multiple targets will be processed */
42983     +   %let em_tree_multipleTargets=N;
42984     +   %let em_tree_numTarget = 1;
42985     +   %let em_tree_targetVars=;
42987     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
42988     +      /* determine if there are any ordinal target variables - if so, multiple
42988    !+targets are not supported */
42989     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
42990     +         %let em_tree_multipleTargets=N;
42991     +      %end;
42992     +      %else %do;
42993     +         /* create macro array of targets  */
42994     +         data _null_;
42995     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'))
42995    !+end=eof;
42996     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
42997     +           if eof then
42998     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
42999     +        run;
43001     +        %if &em_tree_numTarget gt 1 %then %do;
43002     +           %let em_tree_multipleTargets=Y;
43003     +        %end;
43004     +      %end;
43005     +   %end;
43007     +   /* create view of only necessary variable for performance reasons */
43008     +   %let tempData = &EM_LIB..em_&EM_NODEID;
43009     +   data &tempData / view=&tempData;
43010     +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
43011     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
43012     +       %EM_TARGET
43013     +     %end;
43014     +     %else %do;
43015     +       %if &em_tree_numTarget ne 0 %then %do;
43016     +         %do i=1 %to &em_tree_numTarget;
43017     +            &&em_tree_targetVars&i
43018     +         %end;
43019     +       %end;
43020     +     %end;
43021     +     );
43022     +   run;
43024     +   /* run Tree procedure */
43025     +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets)
43025    !+;
43027     +   /* Check return code and throw exception if error is detected */
43028     +   %if &SYSERR > 0 %then %do;
43029     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
43030     +     %goto doendm;
43031     +   %end;
43033     +   /* add decision score code if multiple targets are processed */
43034     +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
43035     +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N)
43035    !+;
43036     +   %end;
43038     +   /* create outfit dataset if multiple score statements have been executed */
43039     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
43041     +   /* create English Rules */
43042     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
43043     +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
43044     +       %em_tree_makeEnglishRules;
43046     +       /* English Rules */
43047     +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL,
43047    !+description=ENGLISHRULES, autodisplay=N);
43049     +     %end;
43050     +   filename x;
43052     +  /* create exportTree to be able to view tree in older TDA viewer */
43053     +  proc arbor inmodel=&EM_USER_EMTREE version=10;
43054     +    save model=&EM_USER_EXPORTTREE;
43055     +  run;
43056     +  quit;
43058     +   %doendm:
43059     +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
43060     +%macro EM_SetProperties;
43062     +   /* train properties */
43063     +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
43064     +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
43065     +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ,
43065    !+global=Y);
43066     +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
43067     +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
43068     +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
43069     +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
43070     +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
43071     +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
43072     +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
43073     +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
43074     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
43075     +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
43076     +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
43077     +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH,
43077    !+global=Y);
43078     +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
43079     +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT,
43079    !+global=Y);
43080     +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
43081     +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS,
43081    !+global=Y);
43082     +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
43083     +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
43084     +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
43085     +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
43086     +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
43087     +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
43088     +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
43089     +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
43090     +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
43091     +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
43092     +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
43093     +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
43094     +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
43095     +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
43096     +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
43097     +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
43098     +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
43099     +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
43100     +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
43101     +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
43103     +   /* properties for interactive sample */
43104     +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
43105     +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
43106     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
43107     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
43109     +   /* report properties */
43110     +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
43111     +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
43112     +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN,
43112    !+global=Y);
43113     +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
43114     +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
43115     +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
43116     +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
43117     +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
43118     +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
43119     +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
43120     +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
43121     +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
43122     +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
43124     +   /* score properties */
43125     +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
43126     +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
43128     +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
43130     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
43131     +  %global &nLevel;
43132     +  proc dmdb batch data=&indata
43133     +    classout=_tmp_dmdbout;
43134     +    class &target;
43135     +  run;
43136     +  data _tmp_dmdbout;
43137     +    set _tmp_dmdbout;
43138     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
43139     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
43140     +  run;
43141     +  data _null_;
43142     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
43143     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
43144     +    %let dsid = %sysfunc(close(&dsid));
43145     +     call symput("&nLevel", put(&_obs, Best12.));
43146     +  run;
43148     +  proc datasets lib=work nolist;
43149     +     delete _tmp_dmdbout;
43150     +  run;
43151     +  quit;
43152     +%Mend EM_CheckBinaryTargetLevel;
43155     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
43157     +  /* determine the number of obs in training data */
43158     +  proc sql;
43159     +    reset noprint;
43160     +    select count(*) into :em_nobs from &indata;
43161     +  quit;
43163     +  /* determine the number of input variables */
43164     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT +
43164    !+&EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
43165     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED +
43165    !+&EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
43167     +  /* retrieve targetEvent from decmeta */
43168     +  %let targetEvent=;
43169     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
43170     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
43171     +      data _null_;
43172     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
43173     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
43174     +      run;
43175     +    %end;
43176     +  %end;
43178     +  /* create targetTable if multipleTar eq Y */
43179     +  data temptarget;
43180     +    set &EM_DATA_VARIABLESET;
43181     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
43182     +  run;
43184     + /* data sets */
43185     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
43186     + %EM_GETNAME(key=EMTREE,        type=DATA);
43187     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
43188     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
43189     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
43190     + %EM_GETNAME(key=OUTNODES,      type=DATA);
43191     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
43192     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
43193     + %EM_GETNAME(key=OUTPATH,       type=DATA);
43194     + %EM_GETNAME(key=OUTRULES,      type=DATA);
43196     + /* files */
43197     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
43198     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
43200     + /* turn on pmml if requested */
43201     + %let nnpmml=0;
43202     + %if %symexist(EM_PMML) %then %do;
43203     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
43204     +       %let nnpmml=1;
43206     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
43207     +%end;
43209     + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET +
43209    !+&EM_NUM_ORDINAL_TARGET);
43211     + %if &nnpmml or &numClassTarget %then %do;
43213     +       /* create dmdb needed for pmml generation */
43214     +       %let tree_maxlevel = 512;
43215     +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
43216     +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
43217     +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
43218     +         %end;
43219     +       %end;
43220     +       %if &tree_maxlevel gt 0 %then %do;
43221     +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
43222     +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
43223     +       %end;
43225     +       %let targetOrderString =;
43226     +       %let targetString = ;
43227     +       data _null_;
43228     +          length orderString nameString $10000;
43229     +          retain orderString nameString;
43230     +          set &em_data_variableset end=eof;
43231     +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target
43231    !+%then %do;
43232     +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
43233     +          %end;
43234     +          %else %do;
43235     +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and
43235    !+USE ='Y';
43236     +          %end;          select(order);
43237     +            when('')        order ='DESC';
43238     +            when('FMTASC')  order='ASCFMT';
43239     +            when('FMTDESC') order='DESFMT';
43240     +            otherwise;
43241     +          end;
43242     +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
43243     +          nameString = trim(nameString)!!' '!!trim(NAME);
43245     +          if eof then do;
43246     +             call symput('targetOrderString', trim(orderString));
43247     +             call symput('targetString', trim(nameString));
43248     +          end;
43249     +       run;
43251     +       %let arborkluge= "work._treeDMDB";
43253     +       proc dmdb batch data=&indata
43254     +       %if &nnpmml %then %do;
43255     +           PMML
43256     +       %end;
43257     +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
43260     +   %if &nnpmml %then %do;
43261     +        %if "%EM_ID" ne "" %then %do;
43262     +          id %EM_ID;
43263     +        %end;
43264     +        %if &EM_NUM_CLASS gt 0 %then %do;
43265     +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
43266     +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
43267     +               &targetOrderString;
43268     +        %end;
43269     +        %if &EM_NUM_INTERVAL gt 0 %then %do;
43270     +          var %EM_INTERVAL;
43271     +        %end;
43272     +        target &targetString %EM_INTERVAL_TARGET;
43273     +        %if "%EM_FREQ" ne "" %then %do;
43274     +          freq %EM_FREQ;
43275     +        %end;
43276     +  %end;
43277     +  %else %do;
43278     +      class  &targetOrderString;
43279     +      target &targetString %EM_INTERVAL_TARGET;
43280     +  %end;
43281     +       run;
43282     +       quit;
43284     +       proc datasets lib=work nolist;
43285     +          delete classout varout;
43286     +       run;
43287     +       quit;
43289     +    %end;
43290     + %end;
43292     + /* run Arbor procedure */
43293     + %if "&EM_PROPERTY_FREEZE" eq "N" %then %do;
43294     +  proc arbor data=&INDATA
43296     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
43297     +    Leafsize = &EM_PROPERTY_LEAFSIZE
43298     +  %end;
43300     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs))
43300    !+%then %do;
43301     +    Splitsize = &EM_PROPERTY_SPLITSIZE
43302     +  %end;
43304     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
43305     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
43306     +  %end;
43308     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
43309     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
43310     +  %end;
43312     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
43313     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
43314     +  %end;
43316     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then
43316    !+%do;
43317     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
43318     +  %end;
43319     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
43320     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
43321     +  %end;
43322     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
43323     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
43324     +  %end;
43326     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
43327     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
43328     +      alpha = &EM_PROPERTY_SIGLEVEL
43329     +    %end;
43330     +  %end;
43332     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or
43332    !+("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
43333     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion"
43333    !+ eq "DEFAULT")) %then %do;
43334     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
43335     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
43336     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
43338     +        padjust =
43339     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
43340     +          &chaid
43341     +        %end;
43342     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
43343     +          DEPTH
43344     +        %end;
43345     +      %end;
43346     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
43347     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
43348     +         pvars = &num_inputs
43349     +      %end;
43350     +    %end;
43351     +  %end;
43353     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
43354     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
43355     +    Maxrules = &num_nrules
43356     +  %end;
43358     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
43359     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
43360     +    Maxsurrs = &num_nsurrs
43361     +  %end;
43363     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
43364     +     Missing=&EM_PROPERTY_MISSINGVALUE
43365     +  %end;
43367     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
43368     +     USEVARONCE
43369     +  %end;
43371     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
43372     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
43373     +  %end;
43376     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
43377     +    event = "&targetEvent"
43378     +  %end;
43380     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
43381     +     DECSEARCH
43382     +  %end;
43384     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
43385     +     PRIORSSEARCH
43386     +  %end;
43388     +  %if &arbor_1 ne %then %do;
43389     +    &arbor_1
43390     +  %end;
43392     +  %if &em_arbor ne %then %do;
43393     +     &em_arbor
43394     +  %end;
43395     +  ;
43396     + %end;
43397     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
43398     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
43399     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
43400     +    %put &em_codebar;
43401     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err,
43401    !+NOQUOTE));
43402     +    %put &errormsg;
43403     +    %put &em_codebar;
43404     +    %goto doendm;
43405     +   %end;
43406     +   %else %do;
43407     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
43408     +       interact;
43409     +   %end;
43410     + %end;
43412     + %else %do;
43413     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
43414     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
43415     +    %put &em_codebar;
43416     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err,
43416    !+NOQUOTE));
43417     +    %put &errormsg;
43418     +    %put &em_codebar;
43419     +    %goto doendm;
43420     +   %end;
43421     +   %else %do;
43422     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
43423     +        interact;
43424     +   %end;
43425     + %end;
43427     + %if "&EM_PROPERTY_FREEZE" eq "N" %then %do;
43428     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
43429     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
43430     +    %end;
43432     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
43433     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
43434     +    %end;
43436     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
43437     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
43438     +    %end;
43440     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
43441     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
43442     +    %end;
43444     +    %if "%EM_FREQ" ne "" %then %do;
43445     +       freq %EM_FREQ;
43446     +    %end;
43448     +    %if "&multipleTar" eq "Y" %then %do;
43449     +       /* cycle through all target vars in variableset */
43450     +       %let tdsid = %sysfunc(open(temptarget));
43451     +       %if &tdsid %then %do;
43452     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
43453     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
43454     +          %do %while(^ %sysfunc(fetch(&tdsid)));
43455     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
43456     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
43457     +             target &var / level = &lvl
43458     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
43459     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
43460     +             %end;
43461     +             %else %if "&lvl" eq "INTERVAL" %then %do;
43462     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
43463     +             %end;
43464     +             %else %if "&lvl" eq "ORDINAL" %then %do;
43465     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
43466     +             %end;
43467     +          %end;
43468     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
43469     +       %end;
43470     +       useTarget variable = %EM_TARGET;
43471     +    %end;
43472     +    %else %do;
43473     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
43474     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL"))
43474    !+%then %do;
43475     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
43476     +      %end;
43477     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
43478     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
43479     +      %end;
43480     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
43481     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
43482     +      %end;
43483     +    %end;
43485     +    %if "&multipleTar" eq "N" %then %do;
43486     +      &EM_DEC_STATEMENT;
43487     +    %end;
43489     +    Performance &EM_PROPERTY_PERFORMANCE
43490     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
43491     +      nodesize=&EM_PROPERTY_NODESAMPLE
43492     +    %end;
43493     +    ;
43495     +    %if "&intFlag" eq "Y" %then %do;
43496     +       INTERACT Largest;
43497     +       Train maxnewdepth=0;
43498     +    %end;
43500     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
43501     +         Assess
43502     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND
43502    !+(%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW))
43502    !+)) %then %do;
43503     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
43504     +              %put &em_codebar;
43505     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
43505    !+novalidationwithcv_note, NOQUOTE));
43506     +              %put &errormsg;
43507     +              %put &em_codebar;
43508     +            %end;
43509     +            %else %do;
43510     +               Validata=&EM_IMPORT_VALIDATE
43511     +            %end;
43512     +         %end;
43513     +         %else %do;
43514     +           NoValidata
43515     +         %end;
43516     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
43517     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
43518     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
43519     +               %if &dsid %then %do;
43520     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
43521     +                 %do %while(^ %sysfunc(fetch(&dsid)));
43522     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
43523     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
43524     +                   %else %do;
43525     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
43526     +                      %else %let measure= MISC;
43527     +                   %end;
43528     +                 %end;
43529     +               %end;
43530     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
43531     +            %end;
43532     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
43533     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
43534     +                 %let measure=ASE;
43535     +              %end;
43536     +              %else %do;
43537     +                 %let measure=MISC;
43538     +              %end;
43539     +            %end;
43540     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
43541     +              %let measure=ASE;
43542     +            %end;
43543     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
43544     +               %let measure = LIFT;
43545     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
43546     +               %if &dsid %then %do;
43547     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
43548     +                 %do %while(^ %sysfunc(fetch(&dsid)));
43549     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
43550     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
43551     +                 %end;
43552     +               %end;
43553     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
43554     +            %end;
43555     +            measure=&measure
43556     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL"))
43556    !+%then %do;
43557     +               event = "&targetEvent"
43558     +            %end;
43559     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
43560     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
43561     +            %end;
43562     +         %end;
43563     +         %if "&multipleTar" eq "N" %then %do;
43564     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
43565     +               CV
43566     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
43567     +                 CVNITer = &EM_PROPERTY_CVNITER
43568     +               %end;
43569     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
43570     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
43571     +               %end;
43572     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
43573     +                 CVSeed = &EM_PROPERTY_CVSEED
43574     +               %end;
43575     +            %end;
43576     +         %end;
43577     +       %end;
43578     +      ;
43580     +      %if "&intFlag" ne "Y" %then %do;
43581     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
43582     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
43583     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
43584     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
43586     +          SUBTREE &subtree
43587     +          %if "&subtree" eq "NLEAVES" %then %do;
43588     +            =&EM_PROPERTY_NSUBTREE
43589     +          %end;
43590     +          ;
43591     +        %end;
43593     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then
43593    !+ %do;
43594     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
43595     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP
43595    !+nvars=&EM_PROPERTY_NUMSINGLEIMP;
43596     +          %end;
43597     +       %end;
43598     +      %end;
43599     + %end;
43602     + MakeMacro nleaves = nleaves;
43603     + save
43604     + %if "&EM_USER_EMTREE" ne "" %then %do;
43605     +   MODEL=&EM_USER_EMTREE
43606     + %end;
43607     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
43608     +   SEQUENCE=&EM_USER_OUTSEQ
43609     + %end;
43610     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
43611     +   IMPORTANCE=&EM_USER_OUTIMPORT
43612     + %end;
43613     + %if "&EM_USER_OUTNODES" ne "" %then %do;
43614     +   NODESTAT=&EM_USER_OUTNODES
43615     + %end;
43616     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
43617     +   SUMMARY=&EM_USER_OUTSUMMARY
43618     + %end;
43619     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
43620     +   STATSBYNODE=&EM_USER_OUTSTATS
43621     + %end;
43622     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
43623     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
43624     + %end;
43625     + %if "&EM_USER_OUTPATH" ne "" %then %do;
43626     +   Pathlistnonmissing=&EM_USER_OUTPATH
43627     + %end;
43628     + %if "&EM_USER_OUTRULES" ne "" %then %do;
43629     +   RULES = &EM_USER_OUTRULES
43630     + %end;
43631     + ;
43633     + %if "&intFlag" ne "Y" %then %do;
43635     +   %let lookupString = ;
43636     +   %if ^%symexist(EM_OPTION) %then
43637     +      %let EM_OPTION=;
43639     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or
43639    !+%sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
43640     +      %let lookupString = LOOKUP=SELECT;
43641     +   %end;
43643     +   %let codetext=;
43644     +   %let norescodetxt=;
43646     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
43647     +     %let codetext=&codetext DUMMY;
43648     +     %let norescodetxt=&norescodetxt DUMMY;
43649     +   %end;
43650     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
43651     +     %let codetext=&codetext NOLEAFID;
43652     +     %let norescodetxt=&norescodetxt NOLEAFID;
43653     +   %end;
43654     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
43655     +     %let norescodetxt=&norescodetxt NOPRED;
43656     +   %end;
43658     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
43659     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid
43659    !+&lookupString;
43661     +   %if &nnpmml %then %do;
43662     +     code pmml;
43663     +   %end;
43665     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
43666     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
43667     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
43668     +   %end;
43669     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
43670     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
43671     +   %end;
43672     + %end;
43674     + run;
43675     + quit;
43677     + /*%em_checkerror(); */
43678     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
43679     +   /* Delete DMDB catalog */
43680     +   proc datasets lib=work nolist;
43681     +       delete _treeDMDB / mt=cat;
43682     +  run;
43683     +  %end;
43685     + %if &nnpmml %then %do;
43686     +    ods pmml close;
43687     + %end;
43689     +  %doendm:
43691     +%mend em_tree_runTreeProcedure;
43693     +%macro em_tree_createFitStats( multipleTar= );
43696     +  /* create targetTable is multipleTar eq Y */
43697     +  data temptarget;
43698     +    set &EM_DATA_VARIABLESET;
43699     +    where ROLE="TARGET";
43700     +  run;
43702     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
43703     +   data &EM_USER_EMOUTFIT;
43704     +     length target $32;
43705     +     merge work.fit_train
43706     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
43707     +       work.fit_valid
43708     +     %end;
43709     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
43710     +       work.fit_test
43711     +     %end;
43712     +     ;
43713     +     %if "&multipleTar" eq "N" %then %do;
43714     +       target="%EM_TARGET";
43715     +     %end;
43716     +     %else %do;
43717     +       target = _TARGET_;
43718     +     %end;
43719     +     drop _NW_ _SUMW_
43720     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
43721     +        _VSUMW_
43722     +     %end;
43723     +     ;
43724     +   run;
43726     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
43727     +     proc datasets library=work nolist;
43728     +       delete fit_valid;
43729     +     run;
43730     +   %end;
43731     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
43732     +     proc datasets library=work nolist;
43733     +       delete fit_test;
43734     +     run;
43735     +   %end;
43737     +%mend em_tree_createFitStats;
43740     +%macro em_tree_makeEnglishRules;
43742     +  %EM_GETNAME(key=OUTNODES, type=DATA);
43743     +  %EM_GETNAME(key=OUTPATH, type=DATA);
43745     +  /* verify that necessary tables exist and if not, skip processing */
43746     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
43747     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
43748     +    %goto doendm;
43749     +  %end;
43750     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
43751     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
43752     +    %goto doendm;
43753     +  %end;
43755     +  /* determine length of variable in outpath dataset */
43756     +  %let vlength= ;
43757     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
43758     +  %if &dsid ne %then %do;
43759     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
43760     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
43761     +  %end;
43762     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
43764     +  data tempoutpath;
43765     +    length varname $&vlength;
43766     +    retain varname;
43767     +    set &EM_USER_OUTPATH;
43769     +    if ^missing(variable) then varname=variable;
43770     +    else if ^missing(var_name) then varname=var_name;
43771     +    output;
43772     +  run;
43774     +  /* create an array of generated predicted variable names */
43775     +  %let tree_pred_vars = ;
43776     +  %let tree_pred_label = ;
43777     +  %let numpred= 0;
43778     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
43780     +    data _null_;
43781     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
43782     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
43783     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)),
43783    !+strip(tranwrd(LABEL,'"','""')));
43784     +     if eof then
43785     +       call symput('numpred', strip(put(_N_, BEST.)));
43786     +    run;
43787     +  %end;
43789     +  /* determine if NPRIORS exists in outnodes  */
43790     +  %local nprior_flag;
43791     +  data _null_;
43792     +    set &EM_USER_OUTNODES(obs=2) end=eof;
43793     +    if eof then do;
43794     +      call symput('nprior_flag', strip(put(npriors, best.)));
43795     +    end;
43796     +  run;
43798     +  proc sort data=tempoutpath; by node; run;
43799     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
43801     +  data tempoutpath;
43802     +    merge tempoutpath(in=_a) outnodes(keep= node
43803     +    %if "&nprior_flag" ne "." %then %do;
43804     +      NPRIORS
43805     +    %end;
43806     +    %else %do;
43807     +      N
43808     +    %end;
43809     +    %if &numpred gt 0 %then %do;
43810     +      %do i=1 %to &numpred;
43811     +        &&tree_pred_vars&i
43812     +      %end;
43813     +    %end;
43814     +    );
43815     +    by node;
43816     +    if _a;
43817     +  run;
43819     +  proc sort data=tempoutpath; by node descending varname descending numeric_value;
43819    !+run;
43821     +  data _null_;
43822     +    file x;
43823     +    set tempoutpath;
43824     +    by node descending varname;
43825     +    retain origvar oldnode string;
43826     +    length origvar $32 oldnode 8 string $200;
43828     +    if _N_ = 1 then do;
43829     +      origvar = varname;
43830     +      oldnode = node;
43831     +    end;
43833     +    if first.node then do;
43834     +       put "&EM_CODEBAR";
43835     +       put " Node = " node;
43836     +       put "&EM_CODEBAR";
43837     +    end;
43839     +      if first.varname then do;
43840     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
43841     +            if MISSING(CHARACTER_VALUE) then do;
43842     +             if NUMERIC_VALUE ne .  then do;
43843     +              if ^first.node then do;
43844     +                string= "AND "|| strip(varname)||" "||strip(relation)||"
43844    !+"||strip(numeric_value);
43845     +              end;
43846     +              else do;
43847     +                string= "if "|| strip(varname)||" "||strip(relation)||"
43847    !+"||strip(numeric_value);
43848     +              end;
43849     +             end;
43850     +            end;
43851     +            else do;
43852     +              if ^first.node then do;
43853     +                string= "AND "|| strip(varname)||" "||strip(relation)||"
43853    !+"||strip(character_value);
43854     +              end;
43855     +              else do;
43856     +                string= "if "|| strip(varname)||" "||strip(relation)||"
43856    !+"||strip(character_value);
43857     +              end;
43858     +             end;
43859     +         end;
43860     +         else if RELATION in ("=") then do;
43861     +            if ^first.node then do;
43862     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
43863     +            end;
43864     +            else do;
43865     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
43866     +            end;
43867     +         end;
43868     +         else if RELATION in ("ISMISSING") then do;
43869     +            if ^first.node then do;
43870     +              string = " AND "|| strip(varname) || " equals Missing";
43871     +            end;
43872     +            else do;
43873     +              string = "if "|| strip(varname) ||" equals Missing";
43874     +            end;
43875     +         end;
43876     +         else if RELATION in ("ISNOTMISSING") then do;
43877     +            if ^first.node then do;
43878     +              string = " AND "|| strip(varname) || " equals All Values";
43879     +            end;
43880     +            else do;
43881     +              string = "if "|| strip(varname) ||" equals All Values";
43882     +            end;
43883     +         end;
43884     +         if ^missing(varname) then origvar = varname;
43885     +         oldnode=node;
43887     +      end;
43888     +      else do;
43889     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
43890     +          if MISSING(CHARACTER_VALUE) then do;
43891     +           if  NUMERIC_VALUE ne .  then do;
43892     +            if ^MISSING(string) then
43893     +              string= strip(string)||" AND "|| strip(varname)||"
43893    !+"||strip(relation)||" "||strip(numeric_value);
43894     +            else
43895     +              string= " if "|| strip(varname)||" "||strip(relation)||"
43895    !+"||strip(numeric_value);
43896     +           end;
43897     +          end;
43898     +          else do;
43899     +            if ^MISSING(string) then
43900     +              string= strip(string)||" AND "|| strip(varname)||"
43900    !+"||strip(relation)||" "||strip(character_value);
43901     +            else
43902     +              string= " if "|| strip(varname)||" "||strip(relation)||"
43902    !+"||strip(character_value);
43903     +          end;
43905     +         end;
43906     +         else if RELATION in ("=") then do;
43907     +           string = strip(string)||", "||strip(character_value);
43908     +         end;
43909     +         else if RELATION in ("ISMISSING") then do;
43911     +         end;
43912     +         if ^missing(varname) then origvar = varname;
43913     +         oldnode=node;
43914     +      end;
43915     +      if last.varname then do;
43916     +         if RELATION in ("ISMISSING") then do;
43917     +           if ^first.varname then do;
43918     +             string = strip(string) || " or MISSING";
43919     +           end;
43920     +         end;
43921     +         put string;
43922     +         if ^missing(varname) then origvar = varname;
43923     +         oldnode=node;
43924     +      end;
43926     +      if last.node then do;
43927     +         put "then ";
43928     +         put " Tree Node Identifier   = " node;
43930     +         %if "&nprior_flag" ne "." %then %do;
43931     +           put " Number of Observations = " NPRIORS;
43932     +         %end;
43933     +         %else %do;
43934     +           put " Number of Observations = " N;
43935     +         %end;
43937     +         %if &numpred gt 0 %then %do;
43938     +           %do i=1 %to &numpred;
43939     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
43940     +           %end;
43941     +         %end;
43943     +         put " ";
43944     +         if ^missing(varname) then origvar = varname;
43945     +         oldnode=node;
43946     +      end;
43948     +  run;
43950     +  proc datasets lib=work nolist;
43951     +    delete tempoutpath outnodes;
43952     +  run;
43954     +  %doendm:
43955     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1
property $1 action $8;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "sas";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS1.Repl_TRAIN
classout=_tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   class TARGET_B;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: Records processed = 10654   Memory used = 511K.
NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: There were 10654 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 10654 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(EM_CHECKBINARYTARGETLEVEL):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS1.em_Tree / view=EMWS1.em_Tree;
MPRINT(EM_TREE_TRAIN):   set EMWS1.Repl_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =CARD_PROM_12 CLUSTER_CODE DONOR_AGE FILE_AVG_GIFT FILE_CARD_GIFT
FREQUENCY_STATUS_97NK HOME_OWNER INCOME_GROUP IN_HOUSE LAST_GIFT_AMT LIFETIME_AVG_GIFT_AMT
LIFETIME_CARD_PROM LIFETIME_GIFT_AMOUNT LIFETIME_GIFT_COUNT LIFETIME_GIFT_RANGE
LIFETIME_MAX_GIFT_AMT LIFETIME_MIN_GIFT_AMT LIFETIME_PROM MEDIAN_HOME_VALUE
MEDIAN_HOUSEHOLD_INCOME MONTHS_SINCE_FIRST_GIFT MONTHS_SINCE_LAST_GIFT
MONTHS_SINCE_LAST_PROM_RESP MONTHS_SINCE_ORIGIN MOR_HIT_RATE NUMBER_PROM_12 OVERLAY_SOURCE
PCT_ATTRIBUTE1 PCT_ATTRIBUTE2 PCT_ATTRIBUTE3 PCT_ATTRIBUTE4 PCT_OWNER_OCCUPIED PEP_STAR
PER_CAPITA_INCOME PUBLISHED_PHONE RECENCY_STATUS_96NK RECENT_AVG_CARD_GIFT_AMT
RECENT_AVG_GIFT_AMT RECENT_CARD_RESPONSE_COUNT RECENT_CARD_RESPONSE_PROP RECENT_RESPONSE_COUNT
RECENT_RESPONSE_PROP RECENT_STAR_STATUS REP_DONOR_GENDER REP_SES REP_URBANICITY WEALTH_RATING
TARGET_B TARGET_B );
MPRINT(EM_TREE_TRAIN):   run;
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS1.em_Tree;
NOTE: There were 10654 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
NOTE: There were 10654 observations read from the data set EMWS1.REPL_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Ids_TARGET_B_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET_B_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   length orderString nameString $10000;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   retain orderString nameString;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree_VariableSet end=eof;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL",
"ORDINAL") and USE ='Y';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select(order);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('') order ='DESC';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTASC') order='ASCFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTDESC') order='DESFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   otherwise;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   orderString = trim(orderString)!!'
'!!trim(NAME)!!'('!!trim(order)!!')';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   nameString = trim(nameString)!!' '!!trim(NAME);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   if eof then do;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetOrderString', trim(orderString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetString', trim(nameString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc dmdb batch data=EMWS1.em_Tree dmdbcat=_treeDMDB
classout=classout varout=varout maxlevel=513;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   class TARGET_B(DESC);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target TARGET_B
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Records processed = 10654   Memory used = 511K.
NOTE: There were 10654 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.17 seconds
 
NOTE: There were 10654 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10654 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.21 seconds
      cpu time            0.20 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete classout varout;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS1.em_Tree Leafsize = 8 MinCatSize = 5
MaxBranch = 2 MaxDepth = 10
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 5
Maxsurrs = 4 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   event = "1" ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   DONOR_AGE FILE_AVG_GIFT FILE_CARD_GIFT LAST_GIFT_AMT
LIFETIME_AVG_GIFT_AMT LIFETIME_CARD_PROM LIFETIME_GIFT_AMOUNT LIFETIME_GIFT_COUNT
LIFETIME_GIFT_RANGE LIFETIME_MAX_GIFT_AMT LIFETIME_MIN_GIFT_AMT LIFETIME_PROM
MEDIAN_HOME_VALUE MEDIAN_HOUSEHOLD_INCOME MONTHS_SINCE_FIRST_GIFT MONTHS_SINCE_LAST_GIFT
MONTHS_SINCE_LAST_PROM_RESP MONTHS_SINCE_ORIGIN MOR_HIT_RATE NUMBER_PROM_12 PCT_ATTRIBUTE1
PCT_ATTRIBUTE2 PCT_ATTRIBUTE3 PCT_ATTRIBUTE4 PCT_OWNER_OCCUPIED PER_CAPITA_INCOME
RECENT_AVG_CARD_GIFT_AMT RECENT_AVG_GIFT_AMT RECENT_CARD_RESPONSE_PROP RECENT_RESPONSE_PROP
RECENT_STAR_STATUS
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   CARD_PROM_12 CLUSTER_CODE FREQUENCY_STATUS_97NK INCOME_GROUP
OVERLAY_SOURCE RECENCY_STATUS_96NK RECENT_CARD_RESPONSE_COUNT RECENT_RESPONSE_COUNT
REP_DONOR_GENDER REP_SES REP_URBANICITY WEALTH_RATING
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_BINARY_INPUT):   HOME_OWNER IN_HOUSE PEP_STAR PUBLISHED_PHONE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   TARGET_B
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   BINARY
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBCHISQ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   decision decdata=WORK.TARGET_B decvars= DECISION1
DECISION2 priorVar=DECPRIOR;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS1.Repl_VALIDATE measure=PROFIT
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1481864 kilobytes of physical memory.
NOTE: Will use 10654 out of 10654 training cases.
NOTE: Using memory pool with 777216000 bytes.
NOTE: Passed training data 19 times.
NOTE: Training used 12479008 bytes of work memory.
NOTE: View EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           3.50 seconds
      cpu time            3.48 seconds
 
NOTE: There were 8718 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: The subtree sequence contains 22 subtrees. The largest has 43 nodes and 22 leaves.
NOTE: Using subtree with 13 nodes and 7 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 13 nodes and 7 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 7.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS1.Tree_EMTREE SEQUENCE=EMWS1.Tree_OUTSEQ
IMPORTANCE=EMWS1.Tree_OUTIMPORT NODESTAT=EMWS1.Tree_OUTNODES SUMMARY=EMWS1.Tree_OUTSUMMARY
STATSBYNODE=EMWS1.Tree_OUTSTATS TOPOLOGY=EMWS1.Tree_OUTTOPOLOGY
Pathlistnonmissing=EMWS1.Tree_OUTPATH RULES = EMWS1.Tree_OUTRULES ;
NOTE: The data set EMWS1.TREE_OUTIMPORT has 47 observations and 7 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 2591 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 13 observations and 24 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 69 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 409 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 22 observations and 28 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 221 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 48 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 13 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials
_ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\TREEFLOW.sas" res
group=Tree ;
NOTE: External file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started
      Charitable Giving Example\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials
_ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\TREEPUBLISH.sas"
nores group=Tree ;
NOTE: External file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started
      Charitable Giving Example\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.em_Tree out=_NULL_ outfit=work.fit_train
role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 14 variables.
NOTE: There were 10654 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.26 seconds
 
NOTE: There were 10654 observations read from the data set EMWS1.REPL_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.Repl_VALIDATE out=_NULL_
outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 12 variables.
NOTE: View EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
NOTE: There were 8718 observations read from the data set EMWS1.PART_VALIDATE.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
 
NOTE: There were 10654 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           4.40 seconds
      cpu time            4.20 seconds
 
NOTE: There were 10654 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10654 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           4.43 seconds
      cpu time            4.23 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete _treeDMDB / mt=cat;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
MPRINT(EM_TREE_TRAIN):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS1.Tree_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS1.Tree_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "TARGET_B";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\ENGLISHRULES.sas"
encoding='utf-8' NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $27;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 69 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 69 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Ids_TARGET_B_DM(where=(_TYPE_="PREDICTED"))
end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)),
strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)),
strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_TARGET_B_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 69 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 69 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS1.Tree_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 13 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node NPRIORS
P_TARGET_B1 P_TARGET_B0 );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 69 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 13 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 69 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 69 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 69 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put
"*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put
"*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF:
"||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF:
"||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "||
strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||"
"||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "||
strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||"
"||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " NPRIORS;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: TARGET_B=1 = " P_TARGET_B1;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: TARGET_B=0 = " P_TARGET_B0;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      214:176   224:190   370:191   377:195
NOTE: The file X is:
 
      Filename=C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started
      Charitable Giving Example\Workspaces\EMWS1\Tree\ENGLISHRULES.sas,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=11Oct2015:15:00:57,
      Create Time=08Oct2015:11:17:34
 
NOTE: 90 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 69 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.61474067979247;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 129 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_TREE_TRAIN):   proc arbor inmodel=EMWS1.Tree_EMTREE version=10;
NOTE: 1638744 kilobytes of physical memory.
NOTE: The subtree sequence contains 22 subtrees. The largest has 43 nodes and 22 leaves.
MPRINT(EM_TREE_TRAIN):   save model=EMWS1.Tree_EXPORTTREE;
NOTE: The data set EMWS1.TREE_EXPORTTREE has 2590 observations and 4 variables.
MPRINT(EM_TREE_TRAIN):   run;
 
MPRINT(EM_TREE_TRAIN):   quit;
 
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
43957
43958      *------------------------------------------------------------*;
43959      * End TRAIN: Tree;
43960      *------------------------------------------------------------*;
 
43961      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
43962      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
43963      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
43964      ;
MPRINT(EM_DIAGRAM):   ;
43965      ;
MPRINT(EM_DIAGRAM):   ;
43966      ;
MPRINT(EM_DIAGRAM):   ;
43967      ;
MPRINT(EM_DIAGRAM):   ;
43968      quit;
MPRINT(EM_DIAGRAM):   quit;
43969      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
43970      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
43971      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
43972      /*; *"; *'; */
43973      ;
MPRINT(EM_DIAGRAM):   ;
43974      run;
MPRINT(EM_DIAGRAM):   run;
43975      quit;
MPRINT(EM_DIAGRAM):   quit;
43976      /* Reset EM Options */
43977      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
43978      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
43979      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
43980      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
43981      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
43982      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 129 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 129 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 11, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:00:58" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                October 11, 2015
Time:                15:00:58
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2YEUDLW "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2YEUDLW new;
MPRINT(EM_DIAGRAM):   run;
44084      %let EMEXCEPTIONSTRING=;
44085      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
44086      * SCORE: Tree;
MPRINT(EM_DIAGRAM):   * SCORE: Tree;
44087      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44088      %let EM_ACTION = SCORE;
44089      %let syscc = 0;
44090      %macro main;
44091
44092        %if %upcase(&EM_ACTION) = CREATE %then %do;
44093          filename temp catalog 'sashelp.emmodl.tree_create.source';
44094          %include temp;
44095          filename temp;
44096
44097          %em_tree_create;
44098        %end;
44099
44100         %else
44101         %if %upcase(&EM_ACTION) = TRAIN %then %do;
44102
44103             filename temp catalog 'sashelp.emmodl.tree_train.source';
44104             %include temp;
44105             filename temp;
44106             %em_tree_train;
44107         %end;
44108
44109        %else
44110        %if %upcase(&EM_ACTION) = SCORE %then %do;
44111          filename temp catalog 'sashelp.emmodl.tree_score.source';
44112          %include temp;
44113          filename temp;
44114
44115          %em_tree_score;
44116
44117        %end;
44118
44119        %else
44120        %if %upcase(&EM_ACTION) = REPORT %then %do;
44121
44122             filename temp catalog 'sashelp.emmodl.tree_report.source';
44123             %include temp;
44124             filename temp;
44125
44126             %em_tree_report;
44127         %end;
44128
44129        %else
44130        %if %upcase(&EM_ACTION) = OPENINT %then %do;
44131
44132             filename temp catalog 'sashelp.emmodl.tree_actions.source';
44133             %include temp;
44134             filename temp;
44135             %EM_TREE_OPENTREEVIEWER;
44136
44137         %end;
44138
44139        %else
44140        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
44141
44142             filename temp catalog 'sashelp.emmodl.tree_actions.source';
44143             %include temp;
44144             filename temp;
44145             %EM_TREE_CLOSETREEVIEWER;
44146
44147         %end;
44148
44149
44150         %doendm:
44151      %mend main;
44152
44153      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
44155     +%macro em_tree_score;
44157     +   /* determine if multiple targets will be processed */
44158     +   %let em_tree_multipleTargets=N;
44159     +   %let em_tree_numTarget=1;
44160     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
44161     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
44162     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
44163     +         %let em_tree_multipleTargets=N;
44164     +      %end;
44165     +      %else %do;
44166     +         /* create macro array of targets  */
44167     +         data _null_;
44168     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
44169     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
44170     +           if eof then
44171     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
44172     +        run;
44174     +        %if &em_tree_numTarget gt 1 %then %do;
44175     +           %let em_tree_multipleTargets=Y;
44176     +        %end;
44177     +      %end;
44178     +   %end;
44180     +   /* build flow and publish scoring code */
44181     +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
44182     +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
44184     +   filename treeflow "&EM_USER_TREEFLOW";
44185     +   filename treepub "&EM_USER_TREEPUBLISH";
44187     +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
44188     +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
44190     +   %em_copyfile(infref=treeflow, outfref=flowref);
44191     +   %em_copyfile(infref=treepub, outfref=pubref);
44193     +   filename treeflow;
44194     +   filename treepub;
44196     +   /* if priors are used, add code to generate unadjusted residuals in export */
44197     +   %let useAdjPriors = N;
44198     +   data _null_;
44199     +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
44200     +     if USE="Y" then call symput('useAdjPriors', 'Y');
44201     +   run;
44202     +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
44203     +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
44204     +      %include temp;
44205     +      filename temp;
44207     +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
44208     +      filename adjref "&EM_USER_adjResidualCode";
44209     +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
44211     +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
44213     +      filename adjref;
44214     +   %end;
44216     +   /* LEAF */
44217     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
44218     +      data _null_;
44219     +        file flowref mod;
44220     +        put 'drop _LEAF_;';
44221     +      run;
44223     +      data _null_;
44224     +        file pubref mod;
44225     +        put 'drop _LEAF_;';
44226     +      run;
44228     +   %end;
44230     +   filename flowref;
44231     +   filename pubref;
44233     +   /* em_metachange code */
44234     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
44235     +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
44236     +   %end;
44238     +   /* variable selection based on importance stat    */
44239     +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
44240     +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
44241     +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
44242     +     %let varnum = %sysfunc(varnum(&dsid, NAME));
44243     +     %let obs = %sysfunc(fetch(&dsid));
44244     +     %do %while(&obs=0);
44245     +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
44246     +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
44247     +       %EM_METACHANGE(name=&varname, role=REJECTED);
44248     +       %let obs = %sysfunc(fetch(&dsid));
44249     +     %end;
44250     +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
44251     +   %end;
44253     +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
44254     +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
44255     +    %let tree_pred_vars = ;
44256     +    %let tree_pred_lvl =;
44257     +    %let numpred= 0;
44259     +    data _null_;
44260     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
44261     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
44262     +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
44263     +     if eof then
44264     +       call symput('numpred', strip(put(_N_, BEST.)));
44265     +    run;
44266     +   %end;
44268     +   %if &numpred ne 0 %then %do;
44269     +    %do i=1 %to &numpred;
44270     +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
44271     +      %EM_METACHANGE(name=&qpred, role=ASSESS);
44272     +    %end;
44273     +   %end;
44275     +   %doendm:
44276     +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\TREEFLOW.sas";
MPRINT(EM_TREE_SCORE):   filename treepub "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\TREEPUBLISH.sas";
MPRINT(EM_TREE_SCORE):   filename flowref "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_TREE_SCORE):   filename pubref "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file flowref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treeflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=11Oct2015:15:00:58,
      Create Time=08Oct2015:11:17:18
 
NOTE: 443 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pubref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treepub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file PUBREF is:
      Filename=C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=11Oct2015:15:00:58,
      Create Time=08Oct2015:11:17:24
 
NOTE: 394 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow;
NOTE: Fileref TREEFLOW has been deassigned.
MPRINT(EM_TREE_SCORE):   filename treepub;
NOTE: Fileref TREEPUB has been deassigned.
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Ids_TARGET_B_DM(where=(_TYPE_="DECPRIOR"));
MPRINT(EM_TREE_SCORE):   if USE="Y" then call symput('useAdjPriors', 'Y');
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET_B_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):   filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_MAKEUNADJUSTEDRESIDUALVARS.SOURCE.
44277     +%macro makeUnadjustedResidualVars(target=, decmeta=, fref=);
44278     +    %local from_var target_level pred_level res_var res_label res_vars res_levels pred_var numLevels;
44279     +    %let from_var  =;
44280     +    %let res_var   =;
44281     +    %let res_label =;
44282     +    %let res_vars = ;
44283     +    %let res_levels =;
44284     +    %let pred_var  =;
44285     +    %let pred_level =;
44286     +    %let numLevels =;
44287     +    %let target_level =;
44288     +
44289     +    %if (&target eq ) or ^%sysfunc(exist(&decmeta)) or (&fref eq ) %then %goto doendm;
44290     +
44291     +    data _null_;
44292     +       set &decmeta end=eof;
44293     +       where _TYPE_ in('TARGET', 'FROM');
44294     +       if _TYPE_='TARGET' then
44295     +          call symput('target_level', strip(LEVEL));
44296     +       else
44297     +          call symput('from_var', strip(VARIABLE));
44298     +    run;
44299     +    %if &target_level = INTERVAL %then %do;
44300     +        data _null_;
44301     +           set &decmeta end=eof;
44302     +           where _TYPE_ in('PREDICTED', 'RESIDUAL');
44303     +           if _TYPE_ eq 'PREDICTED' then do;
44304     +               call symput('pred_var',   strip(Variable));
44305     +           end;
44306     +           else do;
44307     +              call symput('res_var',   strip(Variable));
44308     +              call symput('res_label', strip(tranwrd(LABEL,"'","''")));
44309     +           end;
44310     +        run;
44311     +    %end;
44312     +    %else %do;
44313     +        data _null_;
44314     +           set &decmeta;
44315     +           where _TYPE_ ='PREDICTED';
44316     +           call symput('pred_vars'!!strip(put(_N_,BEST.)),   strip(Variable));
44317     +        run;
44318     +        data _null_;
44319     +           set &decmeta end=eof;
44320     +           where _TYPE_ ='RESIDUAL';
44321     +           call symput('res_vars'!!strip(put(_N_,BEST.)),   strip(Variable));
44322     +           call symput('res_labels'!!strip(put(_N_,BEST.)), strip(tranwrd(LABEL,"'","''")));
44323     +           call symput('res_levels'!!strip(put(_N_,BEST.)), strip(tranwrd(LEVEL,"'","''")));
44324     +           if eof then
44325     +              call symput('numLevels', strip(put(_N_,BEST.)));
44326     +        run;
44327     +    %end;
44328     +
44329     +    data _null_;
44330     +        file &fref;
44331     +
44332     +    put "&EM_codebar;";
44333     +    put "*Computing Unadjusted Residual Vars: &Target;";
44334     +    put "&EM_codebar;";
44335     +
44336     +    %if &target_level eq INTERVAL %then %do;
44337     +        %if &res_label ne %then %do;
44338     +            put "Label &res_var = '&res_label';";
44339     +        %end;
44340     +         put "&res_var = &target - &pred_var;";
44341     +    %end;
44342     +    %else %do;
44343     +       %do i= 1 %to &numLevels;
44344     +           %let res_var =  &&res_vars&i;
44345     +           %let string = %nrbquote(Label &res_var='&&res_labels&i');
44346     +           put "&string;";
44347     +        %end;
44348     +
44349     +        put "if ";
44350     +
44351     +        %do i= 1 %to &numLevels;
44352     +            %let and = ;
44353     +            %if &i>1 %then
44354     +                %let and = and;
44355     +            %let string = %nrbquote(&and &from_var ne '&&res_levels&i');
44356     +                 put "&string";
44357     +        %end;
44358     +
44359     +        put " then do;";
44360     +
44361     +        %do i= 1 %to &numLevels;
44362     +            put "&&res_vars&i=.;";
44363     +        %end;
44364     +
44365     +        put "end;";
44366     +        put "else do;";
44367     +
44368     +        %do i= 1 %to &numLevels;
44369     +           %let qvar =  &&res_vars&i;
44370     +            %let qvar = %substr(&qvar, 2);
44371     +            %let qvar = Q&qvar;
44372     +            put "&&res_vars&i= - &qvar;";
44373     +        %end;
44374     +
44375     +         put "select(&from_var);";
44376     +
44377     +         %do i= 1 %to &numLevels;
44378     +            %let string = %nrbquote(when('&&res_levels&i')&&res_vars&i= &&res_vars&i+1);
44379     +            put "&string;";
44380     +        %end;
44381     +         put 'otherwise;';
44382     +         put 'end;';
44383     +         put 'end;';
44384     +    %end;
44385     +    run;
44386     +    %doendm:
44387     +%mend;
44388     +
44389     +
44390     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_SCORE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename adjref "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\adjResidualCode.sas";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   data _null_;
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   set EMWS1.Ids_TARGET_B_DM end=eof;
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_TARGET_B_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   data _null_;
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   set EMWS1.Ids_TARGET_B_DM;
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_TARGET_B_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   data _null_;
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   set EMWS1.Ids_TARGET_B_DM end=eof;
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_TARGET_B_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   data _null_;
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   file adjref;
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "*------------------------------------------------------------*;";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "*Computing Unadjusted Residual Vars: TARGET_B;";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "*------------------------------------------------------------*;";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "Label R_TARGET_B1='Residual: TARGET_B=1';";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "Label R_TARGET_B0='Residual: TARGET_B=0';";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "if ";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put " F_TARGET_B ne '1'";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "and F_TARGET_B ne '0'";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put " then do;";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "R_TARGET_B1=.;";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "R_TARGET_B0=.;";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "end;";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "else do;";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "R_TARGET_B1= - Q_TARGET_B1;";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "R_TARGET_B0= - Q_TARGET_B0;";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "select(F_TARGET_B);";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "when('1')R_TARGET_B1= R_TARGET_B1+1;";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put "when('0')R_TARGET_B0= R_TARGET_B0+1;";
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put 'otherwise;';
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put 'end;';
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   put 'end;';
MPRINT(MAKEUNADJUSTEDRESIDUALVARS):   run;
 
NOTE: The file ADJREF is:
      Filename=C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\adjResidualCode.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=11Oct2015:15:00:58,
      Create Time=08Oct2015:11:17:14
 
NOTE: 21 records were written to the file ADJREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file flowref MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("adjref",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=15251,
      Last Modified=11Oct2015:15:00:58,
      Create Time=08Oct2015:11:17:18
 
NOTE: 21 records were written to the file FLOWREF.
      The minimum record length was 2.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename adjref;
NOTE: Fileref ADJREF has been deassigned.
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file flowref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=15800,
      Last Modified=11Oct2015:15:00:58,
      Create Time=08Oct2015:11:17:18
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file pubref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: The file PUBREF is:
      Filename=C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=13905,
      Last Modified=11Oct2015:15:00:58,
      Create Time=08Oct2015:11:17:24
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   filename flowref;
NOTE: Fileref FLOWREF has been deassigned.
MPRINT(EM_TREE_SCORE):   filename pubref;
NOTE: Fileref PUBREF has been deassigned.
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("_NODE_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("SEGMENT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("NOMINAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("PCT_ATTRIBUTE4                  ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("MONTHS_SINCE_ORIGIN             ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("OVERLAY_SOURCE                  ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("DONOR_AGE                       ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("RECENT_AVG_CARD_GIFT_AMT        ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("MOR_HIT_RATE                    ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("PCT_ATTRIBUTE3                  ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("LIFETIME_CARD_PROM              ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("PCT_OWNER_OCCUPIED              ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("RECENT_CARD_RESPONSE_PROP       ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("LIFETIME_GIFT_RANGE             ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("LIFETIME_GIFT_AMOUNT            ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("INCOME_GROUP                    ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("REP_URBANICITY                  ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("RECENCY_STATUS_96NK             ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("RECENT_CARD_RESPONSE_COUNT      ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("MONTHS_SINCE_FIRST_GIFT         ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("LAST_GIFT_AMT                   ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("MONTHS_SINCE_LAST_PROM_RESP     ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("PCT_ATTRIBUTE1                  ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("WEALTH_RATING                   ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("HOME_OWNER                      ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("REP_DONOR_GENDER                ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("PUBLISHED_PHONE                 ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Ids_TARGET_B_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
MPRINT(EM_TREE_SCORE):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_TARGET_B_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_TARGET_B1");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_TARGET_B0");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44391
44392      *------------------------------------------------------------*;
44393      * End SCORE: Tree;
44394      *------------------------------------------------------------*;
 
44395      proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
44396      by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
44397      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
44398      filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
44399      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
44400      file x;
MPRINT(EM_DIAGRAM):   file x;
44401      put 'if upcase(NAME) = "DONOR_AGE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "DONOR_AGE" then do;';
44402      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44403      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44404      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44405      put 'if upcase(NAME) = "HOME_OWNER" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "HOME_OWNER" then do;';
44406      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44407      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44408      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44409      put 'if upcase(NAME) = "INCOME_GROUP" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "INCOME_GROUP" then do;';
44410      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44411      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44412      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44413      put 'if upcase(NAME) = "LAST_GIFT_AMT" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "LAST_GIFT_AMT" then do;';
44414      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44415      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44416      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44417      put 'if upcase(NAME) = "LIFETIME_CARD_PROM" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "LIFETIME_CARD_PROM" then do;';
44418      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44419      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44420      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44421      put 'if upcase(NAME) = "LIFETIME_GIFT_AMOUNT" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "LIFETIME_GIFT_AMOUNT" then do;';
44422      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44423      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44424      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44425      put 'if upcase(NAME) = "LIFETIME_GIFT_RANGE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "LIFETIME_GIFT_RANGE" then do;';
44426      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44427      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44428      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44429      put 'if upcase(NAME) = "MONTHS_SINCE_FIRST_GIFT" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "MONTHS_SINCE_FIRST_GIFT" then do;';
44430      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44431      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44432      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44433      put 'if upcase(NAME) = "MONTHS_SINCE_LAST_PROM_RESP" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "MONTHS_SINCE_LAST_PROM_RESP" then do;';
44434      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44435      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44436      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44437      put 'if upcase(NAME) = "MONTHS_SINCE_ORIGIN" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "MONTHS_SINCE_ORIGIN" then do;';
44438      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44439      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44440      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44441      put 'if upcase(NAME) = "MOR_HIT_RATE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "MOR_HIT_RATE" then do;';
44442      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44443      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44444      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44445      put 'if upcase(NAME) = "OVERLAY_SOURCE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "OVERLAY_SOURCE" then do;';
44446      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44447      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44448      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44449      put 'if upcase(NAME) = "PCT_ATTRIBUTE1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "PCT_ATTRIBUTE1" then do;';
44450      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44451      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44452      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44453      put 'if upcase(NAME) = "PCT_ATTRIBUTE3" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "PCT_ATTRIBUTE3" then do;';
44454      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44455      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44456      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44457      put 'if upcase(NAME) = "PCT_ATTRIBUTE4" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "PCT_ATTRIBUTE4" then do;';
44458      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44459      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44460      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44461      put 'if upcase(NAME) = "PCT_OWNER_OCCUPIED" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "PCT_OWNER_OCCUPIED" then do;';
44462      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44463      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44464      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44465      put 'if upcase(NAME) = "PUBLISHED_PHONE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "PUBLISHED_PHONE" then do;';
44466      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44467      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44468      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44469      put 'if upcase(NAME) = "Q_TARGET_B0" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_TARGET_B0" then do;';
44470      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
44471      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44472      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44473      put 'if upcase(NAME) = "Q_TARGET_B1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_TARGET_B1" then do;';
44474      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
44475      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44476      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44477      put 'if upcase(NAME) = "RECENCY_STATUS_96NK" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "RECENCY_STATUS_96NK" then do;';
44478      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44479      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44480      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44481      put 'if upcase(NAME) = "RECENT_AVG_CARD_GIFT_AMT" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "RECENT_AVG_CARD_GIFT_AMT" then do;';
44482      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44483      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44484      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44485      put 'if upcase(NAME) = "RECENT_CARD_RESPONSE_COUNT" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "RECENT_CARD_RESPONSE_COUNT" then do;';
44486      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44487      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44488      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44489      put 'if upcase(NAME) = "RECENT_CARD_RESPONSE_PROP" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "RECENT_CARD_RESPONSE_PROP" then do;';
44490      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44491      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44492      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44493      put 'if upcase(NAME) = "REP_DONOR_GENDER" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "REP_DONOR_GENDER" then do;';
44494      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44495      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44496      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44497      put 'if upcase(NAME) = "REP_URBANICITY" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "REP_URBANICITY" then do;';
44498      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44499      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44500      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44501      put 'if upcase(NAME) = "WEALTH_RATING" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "WEALTH_RATING" then do;';
44502      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
44503      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44504      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
44505      put 'if upcase(NAME) = "_NODE_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "_NODE_" then do;';
44506      put 'ROLE = "SEGMENT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "SEGMENT";';
44507      put 'LEVEL = "NOMINAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "NOMINAL";';
44508      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
44509      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file X is:
      Filename=C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=11Oct2015:15:00:59,
      Create Time=08Oct2015:11:17:16
 
NOTE: 108 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
44510      filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
44511      filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44512      *------------------------------------------------------------*;
44513      * Tree: Scoring DATA data;
44514      *------------------------------------------------------------*;
44515      data EMWS1.Tree_TRAIN
44516      / view=EMWS1.Tree_TRAIN
44517      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_TRAIN / view=EMWS1.Tree_TRAIN ;
44518      set EMWS1.Repl_TRAIN
44519      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_TRAIN ;
44520      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
44521     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
44522     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
44523     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
44524     +
44525     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
44526     +LENGTH F_TARGET_B  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_TARGET_B $ 12;
44527     +LENGTH I_TARGET_B  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_TARGET_B $ 12;
44528     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
44529     +
44530     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
44531     +LABEL _NODE_  = 'Node' ;
MPRINT(EM_DIAGRAM):   LABEL _NODE_ = 'Node' ;
44532     +LABEL _LEAF_  = 'Leaf' ;
MPRINT(EM_DIAGRAM):   LABEL _LEAF_ = 'Leaf' ;
44533     +LABEL P_TARGET_B1  = 'Predicted: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   LABEL P_TARGET_B1 = 'Predicted: TARGET_B=1' ;
44534     +LABEL P_TARGET_B0  = 'Predicted: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   LABEL P_TARGET_B0 = 'Predicted: TARGET_B=0' ;
44535     +LABEL Q_TARGET_B1  = 'Unadjusted P: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   LABEL Q_TARGET_B1 = 'Unadjusted P: TARGET_B=1' ;
44536     +LABEL Q_TARGET_B0  = 'Unadjusted P: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   LABEL Q_TARGET_B0 = 'Unadjusted P: TARGET_B=0' ;
44537     +LABEL V_TARGET_B1  = 'Validated: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   LABEL V_TARGET_B1 = 'Validated: TARGET_B=1' ;
44538     +LABEL V_TARGET_B0  = 'Validated: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   LABEL V_TARGET_B0 = 'Validated: TARGET_B=0' ;
44539     +LABEL R_TARGET_B1  = 'Residual: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   LABEL R_TARGET_B1 = 'Residual: TARGET_B=1' ;
44540     +LABEL R_TARGET_B0  = 'Residual: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   LABEL R_TARGET_B0 = 'Residual: TARGET_B=0' ;
44541     +LABEL F_TARGET_B  = 'From: TARGET_B' ;
MPRINT(EM_DIAGRAM):   LABEL F_TARGET_B = 'From: TARGET_B' ;
44542     +LABEL I_TARGET_B  = 'Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   LABEL I_TARGET_B = 'Into: TARGET_B' ;
44543     +LABEL U_TARGET_B  = 'Unnormalized Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   LABEL U_TARGET_B = 'Unnormalized Into: TARGET_B' ;
44544     +LABEL _WARN_  = 'Warnings' ;
MPRINT(EM_DIAGRAM):   LABEL _WARN_ = 'Warnings' ;
44545     +
44546     +
44547     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
44548     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
44549     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
44550     +LENGTH _ARBFMT_2 $      2; DROP _ARBFMT_2;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_2 $ 2;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_2;
44551     +_ARBFMT_2 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_2 = ' ';
44552     +LENGTH _ARBFMT_4 $      4; DROP _ARBFMT_4;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_4 $ 4;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_4;
44553     +_ARBFMT_4 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_4 = ' ';
44554     +
44555     +
44556     +_ARBFMT_12 = PUT( TARGET_B , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( TARGET_B , BEST12.);
44557     + %DMNORMCP( _ARBFMT_12, F_TARGET_B );
MPRINT(DMNORMCP):   F_TARGET_B=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
44558     +
44559     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
44560     +
44561     + DROP _BRANCH_;
MPRINT(EM_DIAGRAM):   DROP _BRANCH_;
44562     +_BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
44563     +_ARBFMT_12 = PUT( FREQUENCY_STATUS_97NK , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( FREQUENCY_STATUS_97NK , BEST12.);
44564     + %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
44565     +  IF _ARBFMT_12 IN ('3' ,'4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('3' ,'4' ) THEN DO;
44566     +   _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44567     +  END;
MPRINT(EM_DIAGRAM):   END;
44568     +  ELSE IF _ARBFMT_12 IN ('1' ,'2' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('1' ,'2' ) THEN DO;
44569     +   _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44570     +  END;
MPRINT(EM_DIAGRAM):   END;
44571     +IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_RESPONSE_PROP ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_RESPONSE_PROP ) THEN DO;
44572     +    IF                0.218 <= RECENT_RESPONSE_PROP  THEN DO;
MPRINT(EM_DIAGRAM):   IF 0.218 <= RECENT_RESPONSE_PROP THEN DO;
44573     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44574     +    END;
MPRINT(EM_DIAGRAM):   END;
44575     +    ELSE IF RECENT_RESPONSE_PROP  <                0.218 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF RECENT_RESPONSE_PROP < 0.218 THEN DO;
44576     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44577     +    END;
MPRINT(EM_DIAGRAM):   END;
44578     +  END;
MPRINT(EM_DIAGRAM):   END;
44579     +IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_RESPONSE_COUNT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_RESPONSE_COUNT ) THEN DO;
44580     +  _ARBFMT_12 = PUT( RECENT_RESPONSE_COUNT , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( RECENT_RESPONSE_COUNT , BEST12.);
44581     +   %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
44582     +    IF _ARBFMT_12 IN ('9' ,'11' ,'7' ,'4' ,'12' ,'5' ,'8' ,'6' ,'10' ,'13' )
44583     +     THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('9' ,'11' ,'7' ,'4' ,'12' ,'5' ,'8' ,'6' ,'10' ,'13' ) THEN DO;
44584     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44585     +    END;
MPRINT(EM_DIAGRAM):   END;
44586     +    ELSE IF _ARBFMT_12 IN ('1' ,'2' ,'3' ,'0' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('1' ,'2' ,'3' ,'0' ) THEN DO;
44587     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44588     +    END;
MPRINT(EM_DIAGRAM):   END;
44589     +  END;
MPRINT(EM_DIAGRAM):   END;
44590     +IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_MAX_GIFT_AMT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_MAX_GIFT_AMT ) THEN DO;
44591     +    IF LIFETIME_MAX_GIFT_AMT  <                 13.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF LIFETIME_MAX_GIFT_AMT < 13.5 THEN DO;
44592     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44593     +    END;
MPRINT(EM_DIAGRAM):   END;
44594     +    ELSE IF                 13.5 <= LIFETIME_MAX_GIFT_AMT  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 13.5 <= LIFETIME_MAX_GIFT_AMT THEN DO;
44595     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44596     +    END;
MPRINT(EM_DIAGRAM):   END;
44597     +  END;
MPRINT(EM_DIAGRAM):   END;
44598     +IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_AVG_GIFT_AMT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_AVG_GIFT_AMT ) THEN DO;
44599     +    IF RECENT_AVG_GIFT_AMT  <                 9.95 THEN DO;
MPRINT(EM_DIAGRAM):   IF RECENT_AVG_GIFT_AMT < 9.95 THEN DO;
44600     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44601     +    END;
MPRINT(EM_DIAGRAM):   END;
44602     +    ELSE IF                 9.95 <= RECENT_AVG_GIFT_AMT  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 9.95 <= RECENT_AVG_GIFT_AMT THEN DO;
44603     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44604     +    END;
MPRINT(EM_DIAGRAM):   END;
44605     +  END;
MPRINT(EM_DIAGRAM):   END;
44606     +IF _BRANCH_ LT 0 THEN _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 2;
44607     +
44608     +IF _BRANCH_ EQ    1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 1 THEN DO;
44609     +  _NODE_  =                    2;
MPRINT(EM_DIAGRAM):   _NODE_ = 2;
44610     +  _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
44611     +  P_TARGET_B1  =     0.07300054401831;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.07300054401831;
44612     +  P_TARGET_B0  =     0.92699945598168;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.92699945598168;
44613     +  Q_TARGET_B1  =     0.33283087126921;
MPRINT(EM_DIAGRAM):   Q_TARGET_B1 = 0.33283087126921;
44614     +  Q_TARGET_B0  =     0.66716912873078;
MPRINT(EM_DIAGRAM):   Q_TARGET_B0 = 0.66716912873078;
44615     +  V_TARGET_B1  =     0.07029666958131;
MPRINT(EM_DIAGRAM):   V_TARGET_B1 = 0.07029666958131;
44616     +  V_TARGET_B0  =     0.92970333041868;
MPRINT(EM_DIAGRAM):   V_TARGET_B0 = 0.92970333041868;
44617     +  I_TARGET_B  = '0' ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = '0' ;
44618     +  U_TARGET_B  =                    0;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
44619     +  END;
MPRINT(EM_DIAGRAM):   END;
44620     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
44621     +
44622     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
44623     +  _ARBFMT_12 = PUT( PEP_STAR , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( PEP_STAR , BEST12.);
44624     +   %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
44625     +    IF _ARBFMT_12 IN ('1' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ) THEN DO;
44626     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44627     +    END;
MPRINT(EM_DIAGRAM):   END;
44628     +    ELSE IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('0' ) THEN DO;
44629     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44630     +    END;
MPRINT(EM_DIAGRAM):   END;
44631     +  IF _BRANCH_ LT 0 AND NOT MISSING(FILE_CARD_GIFT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(FILE_CARD_GIFT ) THEN DO;
44632     +      IF                  4.5 <= FILE_CARD_GIFT  THEN DO;
MPRINT(EM_DIAGRAM):   IF 4.5 <= FILE_CARD_GIFT THEN DO;
44633     +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44634     +      END;
MPRINT(EM_DIAGRAM):   END;
44635     +      ELSE IF FILE_CARD_GIFT  <                  4.5 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF FILE_CARD_GIFT < 4.5 THEN DO;
44636     +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44637     +      END;
MPRINT(EM_DIAGRAM):   END;
44638     +    END;
MPRINT(EM_DIAGRAM):   END;
44639     +  IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_GIFT_COUNT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_GIFT_COUNT ) THEN DO;
44640     +      IF                  8.5 <= LIFETIME_GIFT_COUNT  THEN DO;
MPRINT(EM_DIAGRAM):   IF 8.5 <= LIFETIME_GIFT_COUNT THEN DO;
44641     +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44642     +      END;
MPRINT(EM_DIAGRAM):   END;
44643     +      ELSE IF LIFETIME_GIFT_COUNT  <                  8.5 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF LIFETIME_GIFT_COUNT < 8.5 THEN DO;
44644     +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44645     +      END;
MPRINT(EM_DIAGRAM):   END;
44646     +    END;
MPRINT(EM_DIAGRAM):   END;
44647     +  IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_STAR_STATUS ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_STAR_STATUS ) THEN DO;
44648     +      IF                  0.5 <= RECENT_STAR_STATUS  THEN DO;
MPRINT(EM_DIAGRAM):   IF 0.5 <= RECENT_STAR_STATUS THEN DO;
44649     +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44650     +      END;
MPRINT(EM_DIAGRAM):   END;
44651     +      ELSE IF RECENT_STAR_STATUS  <                  0.5 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF RECENT_STAR_STATUS < 0.5 THEN DO;
44652     +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44653     +      END;
MPRINT(EM_DIAGRAM):   END;
44654     +    END;
MPRINT(EM_DIAGRAM):   END;
44655     +  IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_PROM ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_PROM ) THEN DO;
44656     +      IF                 53.5 <= LIFETIME_PROM  THEN DO;
MPRINT(EM_DIAGRAM):   IF 53.5 <= LIFETIME_PROM THEN DO;
44657     +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44658     +      END;
MPRINT(EM_DIAGRAM):   END;
44659     +      ELSE IF LIFETIME_PROM  <                 53.5 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF LIFETIME_PROM < 53.5 THEN DO;
44660     +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44661     +      END;
MPRINT(EM_DIAGRAM):   END;
44662     +    END;
MPRINT(EM_DIAGRAM):   END;
44663     +  IF _BRANCH_ LT 0 THEN _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 2;
44664     +
44665     +  IF _BRANCH_ EQ    1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 1 THEN DO;
44666     +    _NODE_  =                    6;
MPRINT(EM_DIAGRAM):   _NODE_ = 6;
44667     +    _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
44668     +    P_TARGET_B1  =     0.05030587345486;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.05030587345486;
44669     +    P_TARGET_B0  =     0.94969412654513;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.94969412654513;
44670     +    Q_TARGET_B1  =     0.25125292348813;
MPRINT(EM_DIAGRAM):   Q_TARGET_B1 = 0.25125292348813;
44671     +    Q_TARGET_B0  =     0.74874707651186;
MPRINT(EM_DIAGRAM):   Q_TARGET_B0 = 0.74874707651186;
44672     +    V_TARGET_B1  =     0.04964830264094;
MPRINT(EM_DIAGRAM):   V_TARGET_B1 = 0.04964830264094;
44673     +    V_TARGET_B0  =     0.95035169735905;
MPRINT(EM_DIAGRAM):   V_TARGET_B0 = 0.95035169735905;
44674     +    I_TARGET_B  = '0' ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = '0' ;
44675     +    U_TARGET_B  =                    0;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
44676     +    END;
MPRINT(EM_DIAGRAM):   END;
44677     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
44678     +
44679     +    _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
44680     +      IF  NOT MISSING(PER_CAPITA_INCOME ) AND
44681     +      PER_CAPITA_INCOME  <                17477 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PER_CAPITA_INCOME ) AND PER_CAPITA_INCOME < 17477 THEN DO;
44682     +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44683     +      END;
MPRINT(EM_DIAGRAM):   END;
44684     +      ELSE IF  NOT MISSING(PER_CAPITA_INCOME ) AND
44685     +                     17477 <= PER_CAPITA_INCOME  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(PER_CAPITA_INCOME ) AND 17477 <= PER_CAPITA_INCOME THEN DO;
44686     +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44687     +      END;
MPRINT(EM_DIAGRAM):   END;
44688     +    IF _BRANCH_ LT 0 AND NOT MISSING(CLUSTER_CODE ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(CLUSTER_CODE ) THEN DO;
44689     +      _ARBFMT_2 = PUT( CLUSTER_CODE , $2.);
MPRINT(EM_DIAGRAM):   _ARBFMT_2 = PUT( CLUSTER_CODE , $2.);
44690     +       %DMNORMIP( _ARBFMT_2);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
44691     +        IF _ARBFMT_2 IN ('.' ,'04' ,'49' ,'50' ,'43' ,'53' ,'42' ,'46' ,'45' ,
44692     +        '20' ,'16' ,'30' ,'07' ,'25' ,'09' ,'41' ,'37' ,'38' ,'18' ,'36' ,
44693     +        '48' ,'08' ,'31' ,'19' ,'27' ,'40' ,'26' ,'28' ,'21' ,'51' ,'44' ,
44694     +        '05' ,'17' ,'39' ,'33' ,'47' ,'06' ,'32' ,'52' ,'10' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_2 IN ('.' ,'04' ,'49' ,'50' ,'43' ,'53' ,'42' ,'46' ,'45' , '20' ,'16' ,'30' ,'07' ,'25' ,'09' ,'41' ,'37' ,'38' ,'18' ,'36' , '48' ,'08' ,'31' ,'19' ,'27' ,'40' ,'26' ,'28' ,'21' ,'51' ,'44' , '05' ,'17' ,'39' ,'33' ,'47'
,'06' ,'32' ,'52' ,'10' ) THEN DO;
44695     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44696     +        END;
MPRINT(EM_DIAGRAM):   END;
44697     +        ELSE IF _ARBFMT_2 IN ('34' ,'23' ,'01' ,'02' ,'15' ,'24' ,'12' ,'35' ,
44698     +        '13' ,'14' ,'29' ,'11' ,'22' ,'03' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_2 IN ('34' ,'23' ,'01' ,'02' ,'15' ,'24' ,'12' ,'35' , '13' ,'14' ,'29' ,'11' ,'22' ,'03' ) THEN DO;
44699     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44700     +        END;
MPRINT(EM_DIAGRAM):   END;
44701     +      END;
MPRINT(EM_DIAGRAM):   END;
44702     +    IF _BRANCH_ LT 0 AND NOT MISSING(MEDIAN_HOUSEHOLD_INCOME ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(MEDIAN_HOUSEHOLD_INCOME ) THEN DO;
44703     +        IF MEDIAN_HOUSEHOLD_INCOME  <                409.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF MEDIAN_HOUSEHOLD_INCOME < 409.5 THEN DO;
44704     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44705     +        END;
MPRINT(EM_DIAGRAM):   END;
44706     +        ELSE IF                409.5 <= MEDIAN_HOUSEHOLD_INCOME  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 409.5 <= MEDIAN_HOUSEHOLD_INCOME THEN DO;
44707     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44708     +        END;
MPRINT(EM_DIAGRAM):   END;
44709     +      END;
MPRINT(EM_DIAGRAM):   END;
44710     +    IF _BRANCH_ LT 0 AND NOT MISSING(REP_SES ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(REP_SES ) THEN DO;
44711     +      _ARBFMT_4 = PUT( REP_SES , $4.);
MPRINT(EM_DIAGRAM):   _ARBFMT_4 = PUT( REP_SES , $4.);
44712     +       %DMNORMIP( _ARBFMT_4);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
44713     +        IF _ARBFMT_4 IN ('2' ,'3' ,'4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_4 IN ('2' ,'3' ,'4' ) THEN DO;
44714     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44715     +        END;
MPRINT(EM_DIAGRAM):   END;
44716     +        ELSE IF _ARBFMT_4 IN ('1' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_4 IN ('1' ) THEN DO;
44717     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44718     +        END;
MPRINT(EM_DIAGRAM):   END;
44719     +      END;
MPRINT(EM_DIAGRAM):   END;
44720     +    IF _BRANCH_ LT 0 AND NOT MISSING(MEDIAN_HOME_VALUE ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(MEDIAN_HOME_VALUE ) THEN DO;
44721     +        IF MEDIAN_HOME_VALUE  <                 1126 THEN DO;
MPRINT(EM_DIAGRAM):   IF MEDIAN_HOME_VALUE < 1126 THEN DO;
44722     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44723     +        END;
MPRINT(EM_DIAGRAM):   END;
44724     +        ELSE IF                 1126 <= MEDIAN_HOME_VALUE  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 1126 <= MEDIAN_HOME_VALUE THEN DO;
44725     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44726     +        END;
MPRINT(EM_DIAGRAM):   END;
44727     +      END;
MPRINT(EM_DIAGRAM):   END;
44728     +    IF _BRANCH_ LT 0 THEN _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 1;
44729     +
44730     +    IF _BRANCH_ EQ    2 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 2 THEN DO;
44731     +      _NODE_  =                   15;
MPRINT(EM_DIAGRAM):   _NODE_ = 15;
44732     +      _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
44733     +      P_TARGET_B1  =     0.04725884462623;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.04725884462623;
44734     +      P_TARGET_B0  =     0.95274115537376;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.95274115537376;
44735     +      Q_TARGET_B1  =      0.2390988372093;
MPRINT(EM_DIAGRAM):   Q_TARGET_B1 = 0.2390988372093;
44736     +      Q_TARGET_B0  =     0.76090116279069;
MPRINT(EM_DIAGRAM):   Q_TARGET_B0 = 0.76090116279069;
44737     +      V_TARGET_B1  =     0.04024137145951;
MPRINT(EM_DIAGRAM):   V_TARGET_B1 = 0.04024137145951;
44738     +      V_TARGET_B0  =     0.95975862854048;
MPRINT(EM_DIAGRAM):   V_TARGET_B0 = 0.95975862854048;
44739     +      I_TARGET_B  = '0' ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = '0' ;
44740     +      U_TARGET_B  =                    0;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
44741     +      END;
MPRINT(EM_DIAGRAM):   END;
44742     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
44743     +
44744     +      _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
44745     +        IF  NOT MISSING(FILE_AVG_GIFT ) AND
44746     +        FILE_AVG_GIFT  <               13.615 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(FILE_AVG_GIFT ) AND FILE_AVG_GIFT < 13.615 THEN DO;
44747     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44748     +        END;
MPRINT(EM_DIAGRAM):   END;
44749     +        ELSE IF  NOT MISSING(FILE_AVG_GIFT ) AND
44750     +                      13.615 <= FILE_AVG_GIFT  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(FILE_AVG_GIFT ) AND 13.615 <= FILE_AVG_GIFT THEN DO;
44751     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44752     +        END;
MPRINT(EM_DIAGRAM):   END;
44753     +      IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_AVG_GIFT_AMT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_AVG_GIFT_AMT ) THEN DO;
44754     +          IF LIFETIME_AVG_GIFT_AMT  <               13.615 THEN DO;
MPRINT(EM_DIAGRAM):   IF LIFETIME_AVG_GIFT_AMT < 13.615 THEN DO;
44755     +           _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44756     +          END;
MPRINT(EM_DIAGRAM):   END;
44757     +          ELSE IF               13.615 <= LIFETIME_AVG_GIFT_AMT  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 13.615 <= LIFETIME_AVG_GIFT_AMT THEN DO;
44758     +           _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44759     +          END;
MPRINT(EM_DIAGRAM):   END;
44760     +        END;
MPRINT(EM_DIAGRAM):   END;
44761     +      IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_MIN_GIFT_AMT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_MIN_GIFT_AMT ) THEN DO;
44762     +          IF LIFETIME_MIN_GIFT_AMT  <                 7.75 THEN DO;
MPRINT(EM_DIAGRAM):   IF LIFETIME_MIN_GIFT_AMT < 7.75 THEN DO;
44763     +           _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44764     +          END;
MPRINT(EM_DIAGRAM):   END;
44765     +          ELSE IF                 7.75 <= LIFETIME_MIN_GIFT_AMT  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 7.75 <= LIFETIME_MIN_GIFT_AMT THEN DO;
44766     +           _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44767     +          END;
MPRINT(EM_DIAGRAM):   END;
44768     +        END;
MPRINT(EM_DIAGRAM):   END;
44769     +      IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_AVG_GIFT_AMT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_AVG_GIFT_AMT ) THEN DO;
44770     +          IF RECENT_AVG_GIFT_AMT  <               14.835 THEN DO;
MPRINT(EM_DIAGRAM):   IF RECENT_AVG_GIFT_AMT < 14.835 THEN DO;
44771     +           _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44772     +          END;
MPRINT(EM_DIAGRAM):   END;
44773     +          ELSE IF               14.835 <= RECENT_AVG_GIFT_AMT  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 14.835 <= RECENT_AVG_GIFT_AMT THEN DO;
44774     +           _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44775     +          END;
MPRINT(EM_DIAGRAM):   END;
44776     +        END;
MPRINT(EM_DIAGRAM):   END;
44777     +      IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_MAX_GIFT_AMT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_MAX_GIFT_AMT ) THEN DO;
44778     +          IF LIFETIME_MAX_GIFT_AMT  <                 19.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF LIFETIME_MAX_GIFT_AMT < 19.5 THEN DO;
44779     +           _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44780     +          END;
MPRINT(EM_DIAGRAM):   END;
44781     +          ELSE IF                 19.5 <= LIFETIME_MAX_GIFT_AMT  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 19.5 <= LIFETIME_MAX_GIFT_AMT THEN DO;
44782     +           _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44783     +          END;
MPRINT(EM_DIAGRAM):   END;
44784     +        END;
MPRINT(EM_DIAGRAM):   END;
44785     +      IF _BRANCH_ LT 0 THEN _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 2;
44786     +
44787     +      IF _BRANCH_ EQ    1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 1 THEN DO;
44788     +        _NODE_  =                   24;
MPRINT(EM_DIAGRAM):   _NODE_ = 24;
44789     +        _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
44790     +        P_TARGET_B1  =      0.0361451652753;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.0361451652753;
44791     +        P_TARGET_B0  =     0.96385483472469;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.96385483472469;
44792     +        Q_TARGET_B1  =     0.19196062346185;
MPRINT(EM_DIAGRAM):   Q_TARGET_B1 = 0.19196062346185;
44793     +        Q_TARGET_B0  =     0.80803937653814;
MPRINT(EM_DIAGRAM):   Q_TARGET_B0 = 0.80803937653814;
44794     +        V_TARGET_B1  =     0.03668059246853;
MPRINT(EM_DIAGRAM):   V_TARGET_B1 = 0.03668059246853;
44795     +        V_TARGET_B0  =     0.96331940753146;
MPRINT(EM_DIAGRAM):   V_TARGET_B0 = 0.96331940753146;
44796     +        I_TARGET_B  = '0' ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = '0' ;
44797     +        U_TARGET_B  =                    0;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
44798     +        END;
MPRINT(EM_DIAGRAM):   END;
44799     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
44800     +
44801     +        _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
44802     +          IF  NOT MISSING(NUMBER_PROM_12 ) AND
44803     +          NUMBER_PROM_12  <                 13.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NUMBER_PROM_12 ) AND NUMBER_PROM_12 < 13.5 THEN DO;
44804     +           _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44805     +          END;
MPRINT(EM_DIAGRAM):   END;
44806     +          ELSE IF  NOT MISSING(NUMBER_PROM_12 ) AND
44807     +                          13.5 <= NUMBER_PROM_12  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(NUMBER_PROM_12 ) AND 13.5 <= NUMBER_PROM_12 THEN DO;
44808     +           _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44809     +          END;
MPRINT(EM_DIAGRAM):   END;
44810     +        IF _BRANCH_ LT 0 AND NOT MISSING(IN_HOUSE ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(IN_HOUSE ) THEN DO;
44811     +          _ARBFMT_12 = PUT( IN_HOUSE , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( IN_HOUSE , BEST12.);
44812     +           %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
44813     +            IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
44814     +             _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44815     +            END;
MPRINT(EM_DIAGRAM):   END;
44816     +            ELSE IF _ARBFMT_12 IN ('1' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('1' ) THEN DO;
44817     +             _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44818     +            END;
MPRINT(EM_DIAGRAM):   END;
44819     +          END;
MPRINT(EM_DIAGRAM):   END;
44820     +        IF _BRANCH_ LT 0 AND NOT MISSING(MONTHS_SINCE_LAST_GIFT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(MONTHS_SINCE_LAST_GIFT ) THEN DO;
44821     +            IF                 14.5 <= MONTHS_SINCE_LAST_GIFT  THEN DO;
MPRINT(EM_DIAGRAM):   IF 14.5 <= MONTHS_SINCE_LAST_GIFT THEN DO;
44822     +             _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44823     +            END;
MPRINT(EM_DIAGRAM):   END;
44824     +            ELSE IF MONTHS_SINCE_LAST_GIFT  <                 14.5 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF MONTHS_SINCE_LAST_GIFT < 14.5 THEN DO;
44825     +             _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44826     +            END;
MPRINT(EM_DIAGRAM):   END;
44827     +          END;
MPRINT(EM_DIAGRAM):   END;
44828     +        IF _BRANCH_ LT 0 AND NOT MISSING(CARD_PROM_12 ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(CARD_PROM_12 ) THEN DO;
44829     +          _ARBFMT_12 = PUT( CARD_PROM_12 , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( CARD_PROM_12 , BEST12.);
44830     +           %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
44831     +            IF _ARBFMT_12 IN ('5' ,'6' ,'4' ,'2' ,'3' ,'1' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ,'6' ,'4' ,'2' ,'3' ,'1' ) THEN DO;
44832     +             _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44833     +            END;
MPRINT(EM_DIAGRAM):   END;
44834     +            ELSE IF _ARBFMT_12 IN ('7' ,'9' ,'8' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('7' ,'9' ,'8' ) THEN DO;
44835     +             _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44836     +            END;
MPRINT(EM_DIAGRAM):   END;
44837     +          END;
MPRINT(EM_DIAGRAM):   END;
44838     +        IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_PROM ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_PROM ) THEN DO;
44839     +            IF LIFETIME_PROM  <                 71.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF LIFETIME_PROM < 71.5 THEN DO;
44840     +             _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
44841     +            END;
MPRINT(EM_DIAGRAM):   END;
44842     +            ELSE IF                 71.5 <= LIFETIME_PROM  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 71.5 <= LIFETIME_PROM THEN DO;
44843     +             _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
44844     +            END;
MPRINT(EM_DIAGRAM):   END;
44845     +          END;
MPRINT(EM_DIAGRAM):   END;
44846     +        IF _BRANCH_ LT 0 THEN _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 1;
44847     +
44848     +        IF _BRANCH_ EQ    2 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 2 THEN DO;
44849     +          _NODE_  =                   35;
MPRINT(EM_DIAGRAM):   _NODE_ = 35;
44850     +          _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
44851     +          P_TARGET_B1  =     0.04899772110298;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.04899772110298;
44852     +          P_TARGET_B0  =     0.95100227889701;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.95100227889701;
44853     +          Q_TARGET_B1  =     0.24607329842931;
MPRINT(EM_DIAGRAM):   Q_TARGET_B1 = 0.24607329842931;
44854     +          Q_TARGET_B0  =     0.75392670157068;
MPRINT(EM_DIAGRAM):   Q_TARGET_B0 = 0.75392670157068;
44855     +          V_TARGET_B1  =     0.03602921311568;
MPRINT(EM_DIAGRAM):   V_TARGET_B1 = 0.03602921311568;
44856     +          V_TARGET_B0  =     0.96397078688431;
MPRINT(EM_DIAGRAM):   V_TARGET_B0 = 0.96397078688431;
44857     +          I_TARGET_B  = '0' ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = '0' ;
44858     +          U_TARGET_B  =                    0;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
44859     +          END;
MPRINT(EM_DIAGRAM):   END;
44860     +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
44861     +          IF  NOT MISSING(PCT_ATTRIBUTE2 ) AND
44862     +                            58.5 <= PCT_ATTRIBUTE2  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PCT_ATTRIBUTE2 ) AND 58.5 <= PCT_ATTRIBUTE2 THEN DO;
44863     +            _NODE_  =                   41;
MPRINT(EM_DIAGRAM):   _NODE_ = 41;
44864     +            _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
44865     +            P_TARGET_B1  =     0.12136059263373;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.12136059263373;
44866     +            P_TARGET_B0  =     0.87863940736626;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.87863940736626;
44867     +            Q_TARGET_B1  =     0.46666666666666;
MPRINT(EM_DIAGRAM):   Q_TARGET_B1 = 0.46666666666666;
44868     +            Q_TARGET_B0  =     0.53333333333333;
MPRINT(EM_DIAGRAM):   Q_TARGET_B0 = 0.53333333333333;
44869     +            V_TARGET_B1  =     0.05942303585465;
MPRINT(EM_DIAGRAM):   V_TARGET_B1 = 0.05942303585465;
44870     +            V_TARGET_B0  =     0.94057696414534;
MPRINT(EM_DIAGRAM):   V_TARGET_B0 = 0.94057696414534;
44871     +            I_TARGET_B  = '0' ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = '0' ;
44872     +            U_TARGET_B  =                    0;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
44873     +            END;
MPRINT(EM_DIAGRAM):   END;
44874     +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
44875     +            _NODE_  =                   40;
MPRINT(EM_DIAGRAM):   _NODE_ = 40;
44876     +            _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
44877     +            P_TARGET_B1  =      0.0218140868437;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.0218140868437;
44878     +            P_TARGET_B0  =     0.97818591315629;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.97818591315629;
44879     +            Q_TARGET_B1  =     0.12378483473752;
MPRINT(EM_DIAGRAM):   Q_TARGET_B1 = 0.12378483473752;
44880     +            Q_TARGET_B0  =     0.87621516526247;
MPRINT(EM_DIAGRAM):   Q_TARGET_B0 = 0.87621516526247;
44881     +            V_TARGET_B1  =     0.03330189507384;
MPRINT(EM_DIAGRAM):   V_TARGET_B1 = 0.03330189507384;
44882     +            V_TARGET_B0  =     0.96669810492615;
MPRINT(EM_DIAGRAM):   V_TARGET_B0 = 0.96669810492615;
44883     +            I_TARGET_B  = '0' ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = '0' ;
44884     +            U_TARGET_B  =                    0;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
44885     +            END;
MPRINT(EM_DIAGRAM):   END;
44886     +          END;
MPRINT(EM_DIAGRAM):   END;
44887     +        END;
MPRINT(EM_DIAGRAM):   END;
44888     +      END;
MPRINT(EM_DIAGRAM):   END;
44889     +    END;
MPRINT(EM_DIAGRAM):   END;
44890     +  END;
MPRINT(EM_DIAGRAM):   END;
44891     +
44892     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
44893     +IF  F_TARGET_B  NE '1'
44894     +AND F_TARGET_B  NE '0'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_TARGET_B NE '1' AND F_TARGET_B NE '0' THEN DO;
44895     +        R_TARGET_B1  = .;
MPRINT(EM_DIAGRAM):   R_TARGET_B1 = .;
44896     +        R_TARGET_B0  = .;
MPRINT(EM_DIAGRAM):   R_TARGET_B0 = .;
44897     + END;
MPRINT(EM_DIAGRAM):   END;
44898     + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
44899     +       R_TARGET_B1  =  -P_TARGET_B1 ;
MPRINT(EM_DIAGRAM):   R_TARGET_B1 = -P_TARGET_B1 ;
44900     +       R_TARGET_B0  =  -P_TARGET_B0 ;
MPRINT(EM_DIAGRAM):   R_TARGET_B0 = -P_TARGET_B0 ;
44901     +       SELECT( F_TARGET_B  );
MPRINT(EM_DIAGRAM):   SELECT( F_TARGET_B );
44902     +          WHEN( '1'  ) R_TARGET_B1  = R_TARGET_B1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_TARGET_B1 = R_TARGET_B1 +1;
44903     +          WHEN( '0'  ) R_TARGET_B0  = R_TARGET_B0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_TARGET_B0 = R_TARGET_B0 +1;
44904     +       END;
MPRINT(EM_DIAGRAM):   END;
44905     + END;
MPRINT(EM_DIAGRAM):   END;
44906     +
44907     +*****  DECISION VARIABLES *******;
MPRINT(EM_DIAGRAM):   ***** DECISION VARIABLES *******;
44908     +
44909     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
44910     +label D_TARGET_B = 'Decision: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label D_TARGET_B = 'Decision: TARGET_B' ;
44911     +label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
44912     +label BP_TARGET_B = 'Best Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label BP_TARGET_B = 'Best Profit: TARGET_B' ;
44913     +label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
44914     +
44915     +length D_TARGET_B $ 9;
MPRINT(EM_DIAGRAM):   length D_TARGET_B $ 9;
44916     +
44917     +D_TARGET_B = ' ';
MPRINT(EM_DIAGRAM):   D_TARGET_B = ' ';
44918     +EP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = .;
44919     +BP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   BP_TARGET_B = .;
44920     +CP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   CP_TARGET_B = .;
44921     +
44922     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
44923     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
44924     +
44925     +D_TARGET_B = '1' ;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '1' ;
44926     +EP_TARGET_B = P_TARGET_B1 * 14.5 + P_TARGET_B0 * -0.5;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = P_TARGET_B1 * 14.5 + P_TARGET_B0 * -0.5;
44927     +drop _sum;
MPRINT(EM_DIAGRAM):   drop _sum;
44928     +_sum = P_TARGET_B1 * 0 + P_TARGET_B0 * 0;
MPRINT(EM_DIAGRAM):   _sum = P_TARGET_B1 * 0 + P_TARGET_B0 * 0;
44929     +if _sum > EP_TARGET_B + 6.593837E-12 then do;
MPRINT(EM_DIAGRAM):   if _sum > EP_TARGET_B + 6.593837E-12 then do;
44930     +   EP_TARGET_B = _sum; _decnum = 2;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
44931     +   D_TARGET_B = '0' ;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '0' ;
44932     +end;
MPRINT(EM_DIAGRAM):   end;
44933     +
44934     +*** Decision Matrix;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
44935     +array TREEdema [2,2] _temporary_ (
44936     +/* row 1 */  14.5 0
44937     +/* row 2 */  -0.5 0
44938     +);
MPRINT(EM_DIAGRAM):   array TREEdema [2,2] _temporary_ ( 14.5 0 -0.5 0 );
44939     +
44940     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
44941     +drop _tarnum; select( F_TARGET_B );
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_TARGET_B );
44942     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
44943     +   when('0' ) _tarnum = 2;
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
44944     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
44945     +end;
MPRINT(EM_DIAGRAM):   end;
44946     +if _tarnum <= 0 then goto TREEdeex;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto TREEdeex;
44947     +
44948     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
44949     +CP_TARGET_B = TREEdema [_tarnum,_decnum];
MPRINT(EM_DIAGRAM):   CP_TARGET_B = TREEdema [_tarnum,_decnum];
44950     +
44951     +*** Best Possible Consequence of Any Decision without Cost;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
44952     +array TREEdebe [2] _temporary_ ( 14.5 0);
MPRINT(EM_DIAGRAM):   array TREEdebe [2] _temporary_ ( 14.5 0);
44953     +BP_TARGET_B = TREEdebe [_tarnum];
MPRINT(EM_DIAGRAM):   BP_TARGET_B = TREEdebe [_tarnum];
44954     +
44955     +
44956     +TREEdeex:;
MPRINT(EM_DIAGRAM):   TREEdeex:;
44957     +
44958     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
44959     +
44960     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
44961     +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
44962     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
44963     +
44964     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44965     +*Computing Unadjusted Residual Vars: TARGET_B;
MPRINT(EM_DIAGRAM):   *Computing Unadjusted Residual Vars: TARGET_B;
44966     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44967     +Label R_TARGET_B1='Residual: TARGET_B=1';
MPRINT(EM_DIAGRAM):   Label R_TARGET_B1= 'Residual: TARGET_B=1';
44968     +Label R_TARGET_B0='Residual: TARGET_B=0';
MPRINT(EM_DIAGRAM):   Label R_TARGET_B0= 'Residual: TARGET_B=0';
44969     +if
44970     + F_TARGET_B ne '1'
44971     +and F_TARGET_B ne '0'
44972     + then do;
MPRINT(EM_DIAGRAM):   if F_TARGET_B ne '1' and F_TARGET_B ne '0' then do;
44973     +R_TARGET_B1=.;
MPRINT(EM_DIAGRAM):   R_TARGET_B1=.;
44974     +R_TARGET_B0=.;
MPRINT(EM_DIAGRAM):   R_TARGET_B0=.;
44975     +end;
MPRINT(EM_DIAGRAM):   end;
44976     +else do;
MPRINT(EM_DIAGRAM):   else do;
44977     +R_TARGET_B1= - Q_TARGET_B1;
MPRINT(EM_DIAGRAM):   R_TARGET_B1= - Q_TARGET_B1;
44978     +R_TARGET_B0= - Q_TARGET_B0;
MPRINT(EM_DIAGRAM):   R_TARGET_B0= - Q_TARGET_B0;
44979     +select(F_TARGET_B);
MPRINT(EM_DIAGRAM):   select(F_TARGET_B);
44980     +when('1')R_TARGET_B1= R_TARGET_B1+1;
MPRINT(EM_DIAGRAM):   when('1')R_TARGET_B1= R_TARGET_B1+1;
44981     +when('0')R_TARGET_B0= R_TARGET_B0+1;
MPRINT(EM_DIAGRAM):   when('0')R_TARGET_B0= R_TARGET_B0+1;
44982     +otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
44983     +end;
MPRINT(EM_DIAGRAM):   end;
44984     +end;
MPRINT(EM_DIAGRAM):   end;
44985     +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
44986      run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
44987      quit;
44988      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
44989      filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44990      *------------------------------------------------------------*;
44991      * Tree: Scoring VALIDATE data;
44992      *------------------------------------------------------------*;
44993      data EMWS1.Tree_VALIDATE
44994      / view=EMWS1.Tree_VALIDATE
44995      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_VALIDATE / view=EMWS1.Tree_VALIDATE ;
44996      set EMWS1.Repl_VALIDATE
44997      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_VALIDATE ;
44998      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
44999     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
45000     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
45001     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
45002     +
45003     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
45004     +LENGTH F_TARGET_B  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_TARGET_B $ 12;
45005     +LENGTH I_TARGET_B  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_TARGET_B $ 12;
45006     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
45007     +
45008     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
45009     +LABEL _NODE_  = 'Node' ;
MPRINT(EM_DIAGRAM):   LABEL _NODE_ = 'Node' ;
45010     +LABEL _LEAF_  = 'Leaf' ;
MPRINT(EM_DIAGRAM):   LABEL _LEAF_ = 'Leaf' ;
45011     +LABEL P_TARGET_B1  = 'Predicted: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   LABEL P_TARGET_B1 = 'Predicted: TARGET_B=1' ;
45012     +LABEL P_TARGET_B0  = 'Predicted: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   LABEL P_TARGET_B0 = 'Predicted: TARGET_B=0' ;
45013     +LABEL Q_TARGET_B1  = 'Unadjusted P: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   LABEL Q_TARGET_B1 = 'Unadjusted P: TARGET_B=1' ;
45014     +LABEL Q_TARGET_B0  = 'Unadjusted P: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   LABEL Q_TARGET_B0 = 'Unadjusted P: TARGET_B=0' ;
45015     +LABEL V_TARGET_B1  = 'Validated: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   LABEL V_TARGET_B1 = 'Validated: TARGET_B=1' ;
45016     +LABEL V_TARGET_B0  = 'Validated: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   LABEL V_TARGET_B0 = 'Validated: TARGET_B=0' ;
45017     +LABEL R_TARGET_B1  = 'Residual: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   LABEL R_TARGET_B1 = 'Residual: TARGET_B=1' ;
45018     +LABEL R_TARGET_B0  = 'Residual: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   LABEL R_TARGET_B0 = 'Residual: TARGET_B=0' ;
45019     +LABEL F_TARGET_B  = 'From: TARGET_B' ;
MPRINT(EM_DIAGRAM):   LABEL F_TARGET_B = 'From: TARGET_B' ;
45020     +LABEL I_TARGET_B  = 'Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   LABEL I_TARGET_B = 'Into: TARGET_B' ;
45021     +LABEL U_TARGET_B  = 'Unnormalized Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   LABEL U_TARGET_B = 'Unnormalized Into: TARGET_B' ;
45022     +LABEL _WARN_  = 'Warnings' ;
MPRINT(EM_DIAGRAM):   LABEL _WARN_ = 'Warnings' ;
45023     +
45024     +
45025     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
45026     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
45027     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
45028     +LENGTH _ARBFMT_2 $      2; DROP _ARBFMT_2;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_2 $ 2;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_2;
45029     +_ARBFMT_2 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_2 = ' ';
45030     +LENGTH _ARBFMT_4 $      4; DROP _ARBFMT_4;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_4 $ 4;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_4;
45031     +_ARBFMT_4 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_4 = ' ';
45032     +
45033     +
45034     +_ARBFMT_12 = PUT( TARGET_B , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( TARGET_B , BEST12.);
45035     + %DMNORMCP( _ARBFMT_12, F_TARGET_B );
MPRINT(DMNORMCP):   F_TARGET_B=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
45036     +
45037     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
45038     +
45039     + DROP _BRANCH_;
MPRINT(EM_DIAGRAM):   DROP _BRANCH_;
45040     +_BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
45041     +_ARBFMT_12 = PUT( FREQUENCY_STATUS_97NK , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( FREQUENCY_STATUS_97NK , BEST12.);
45042     + %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
45043     +  IF _ARBFMT_12 IN ('3' ,'4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('3' ,'4' ) THEN DO;
45044     +   _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45045     +  END;
MPRINT(EM_DIAGRAM):   END;
45046     +  ELSE IF _ARBFMT_12 IN ('1' ,'2' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('1' ,'2' ) THEN DO;
45047     +   _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45048     +  END;
MPRINT(EM_DIAGRAM):   END;
45049     +IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_RESPONSE_PROP ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_RESPONSE_PROP ) THEN DO;
45050     +    IF                0.218 <= RECENT_RESPONSE_PROP  THEN DO;
MPRINT(EM_DIAGRAM):   IF 0.218 <= RECENT_RESPONSE_PROP THEN DO;
45051     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45052     +    END;
MPRINT(EM_DIAGRAM):   END;
45053     +    ELSE IF RECENT_RESPONSE_PROP  <                0.218 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF RECENT_RESPONSE_PROP < 0.218 THEN DO;
45054     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45055     +    END;
MPRINT(EM_DIAGRAM):   END;
45056     +  END;
MPRINT(EM_DIAGRAM):   END;
45057     +IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_RESPONSE_COUNT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_RESPONSE_COUNT ) THEN DO;
45058     +  _ARBFMT_12 = PUT( RECENT_RESPONSE_COUNT , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( RECENT_RESPONSE_COUNT , BEST12.);
45059     +   %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
45060     +    IF _ARBFMT_12 IN ('9' ,'11' ,'7' ,'4' ,'12' ,'5' ,'8' ,'6' ,'10' ,'13' )
45061     +     THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('9' ,'11' ,'7' ,'4' ,'12' ,'5' ,'8' ,'6' ,'10' ,'13' ) THEN DO;
45062     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45063     +    END;
MPRINT(EM_DIAGRAM):   END;
45064     +    ELSE IF _ARBFMT_12 IN ('1' ,'2' ,'3' ,'0' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('1' ,'2' ,'3' ,'0' ) THEN DO;
45065     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45066     +    END;
MPRINT(EM_DIAGRAM):   END;
45067     +  END;
MPRINT(EM_DIAGRAM):   END;
45068     +IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_MAX_GIFT_AMT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_MAX_GIFT_AMT ) THEN DO;
45069     +    IF LIFETIME_MAX_GIFT_AMT  <                 13.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF LIFETIME_MAX_GIFT_AMT < 13.5 THEN DO;
45070     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45071     +    END;
MPRINT(EM_DIAGRAM):   END;
45072     +    ELSE IF                 13.5 <= LIFETIME_MAX_GIFT_AMT  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 13.5 <= LIFETIME_MAX_GIFT_AMT THEN DO;
45073     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45074     +    END;
MPRINT(EM_DIAGRAM):   END;
45075     +  END;
MPRINT(EM_DIAGRAM):   END;
45076     +IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_AVG_GIFT_AMT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_AVG_GIFT_AMT ) THEN DO;
45077     +    IF RECENT_AVG_GIFT_AMT  <                 9.95 THEN DO;
MPRINT(EM_DIAGRAM):   IF RECENT_AVG_GIFT_AMT < 9.95 THEN DO;
45078     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45079     +    END;
MPRINT(EM_DIAGRAM):   END;
45080     +    ELSE IF                 9.95 <= RECENT_AVG_GIFT_AMT  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 9.95 <= RECENT_AVG_GIFT_AMT THEN DO;
45081     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45082     +    END;
MPRINT(EM_DIAGRAM):   END;
45083     +  END;
MPRINT(EM_DIAGRAM):   END;
45084     +IF _BRANCH_ LT 0 THEN _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 2;
45085     +
45086     +IF _BRANCH_ EQ    1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 1 THEN DO;
45087     +  _NODE_  =                    2;
MPRINT(EM_DIAGRAM):   _NODE_ = 2;
45088     +  _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
45089     +  P_TARGET_B1  =     0.07300054401831;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.07300054401831;
45090     +  P_TARGET_B0  =     0.92699945598168;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.92699945598168;
45091     +  Q_TARGET_B1  =     0.33283087126921;
MPRINT(EM_DIAGRAM):   Q_TARGET_B1 = 0.33283087126921;
45092     +  Q_TARGET_B0  =     0.66716912873078;
MPRINT(EM_DIAGRAM):   Q_TARGET_B0 = 0.66716912873078;
45093     +  V_TARGET_B1  =     0.07029666958131;
MPRINT(EM_DIAGRAM):   V_TARGET_B1 = 0.07029666958131;
45094     +  V_TARGET_B0  =     0.92970333041868;
MPRINT(EM_DIAGRAM):   V_TARGET_B0 = 0.92970333041868;
45095     +  I_TARGET_B  = '0' ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = '0' ;
45096     +  U_TARGET_B  =                    0;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
45097     +  END;
MPRINT(EM_DIAGRAM):   END;
45098     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
45099     +
45100     +  _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
45101     +  _ARBFMT_12 = PUT( PEP_STAR , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( PEP_STAR , BEST12.);
45102     +   %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
45103     +    IF _ARBFMT_12 IN ('1' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ) THEN DO;
45104     +     _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45105     +    END;
MPRINT(EM_DIAGRAM):   END;
45106     +    ELSE IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('0' ) THEN DO;
45107     +     _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45108     +    END;
MPRINT(EM_DIAGRAM):   END;
45109     +  IF _BRANCH_ LT 0 AND NOT MISSING(FILE_CARD_GIFT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(FILE_CARD_GIFT ) THEN DO;
45110     +      IF                  4.5 <= FILE_CARD_GIFT  THEN DO;
MPRINT(EM_DIAGRAM):   IF 4.5 <= FILE_CARD_GIFT THEN DO;
45111     +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45112     +      END;
MPRINT(EM_DIAGRAM):   END;
45113     +      ELSE IF FILE_CARD_GIFT  <                  4.5 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF FILE_CARD_GIFT < 4.5 THEN DO;
45114     +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45115     +      END;
MPRINT(EM_DIAGRAM):   END;
45116     +    END;
MPRINT(EM_DIAGRAM):   END;
45117     +  IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_GIFT_COUNT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_GIFT_COUNT ) THEN DO;
45118     +      IF                  8.5 <= LIFETIME_GIFT_COUNT  THEN DO;
MPRINT(EM_DIAGRAM):   IF 8.5 <= LIFETIME_GIFT_COUNT THEN DO;
45119     +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45120     +      END;
MPRINT(EM_DIAGRAM):   END;
45121     +      ELSE IF LIFETIME_GIFT_COUNT  <                  8.5 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF LIFETIME_GIFT_COUNT < 8.5 THEN DO;
45122     +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45123     +      END;
MPRINT(EM_DIAGRAM):   END;
45124     +    END;
MPRINT(EM_DIAGRAM):   END;
45125     +  IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_STAR_STATUS ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_STAR_STATUS ) THEN DO;
45126     +      IF                  0.5 <= RECENT_STAR_STATUS  THEN DO;
MPRINT(EM_DIAGRAM):   IF 0.5 <= RECENT_STAR_STATUS THEN DO;
45127     +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45128     +      END;
MPRINT(EM_DIAGRAM):   END;
45129     +      ELSE IF RECENT_STAR_STATUS  <                  0.5 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF RECENT_STAR_STATUS < 0.5 THEN DO;
45130     +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45131     +      END;
MPRINT(EM_DIAGRAM):   END;
45132     +    END;
MPRINT(EM_DIAGRAM):   END;
45133     +  IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_PROM ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_PROM ) THEN DO;
45134     +      IF                 53.5 <= LIFETIME_PROM  THEN DO;
MPRINT(EM_DIAGRAM):   IF 53.5 <= LIFETIME_PROM THEN DO;
45135     +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45136     +      END;
MPRINT(EM_DIAGRAM):   END;
45137     +      ELSE IF LIFETIME_PROM  <                 53.5 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF LIFETIME_PROM < 53.5 THEN DO;
45138     +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45139     +      END;
MPRINT(EM_DIAGRAM):   END;
45140     +    END;
MPRINT(EM_DIAGRAM):   END;
45141     +  IF _BRANCH_ LT 0 THEN _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 2;
45142     +
45143     +  IF _BRANCH_ EQ    1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 1 THEN DO;
45144     +    _NODE_  =                    6;
MPRINT(EM_DIAGRAM):   _NODE_ = 6;
45145     +    _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
45146     +    P_TARGET_B1  =     0.05030587345486;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.05030587345486;
45147     +    P_TARGET_B0  =     0.94969412654513;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.94969412654513;
45148     +    Q_TARGET_B1  =     0.25125292348813;
MPRINT(EM_DIAGRAM):   Q_TARGET_B1 = 0.25125292348813;
45149     +    Q_TARGET_B0  =     0.74874707651186;
MPRINT(EM_DIAGRAM):   Q_TARGET_B0 = 0.74874707651186;
45150     +    V_TARGET_B1  =     0.04964830264094;
MPRINT(EM_DIAGRAM):   V_TARGET_B1 = 0.04964830264094;
45151     +    V_TARGET_B0  =     0.95035169735905;
MPRINT(EM_DIAGRAM):   V_TARGET_B0 = 0.95035169735905;
45152     +    I_TARGET_B  = '0' ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = '0' ;
45153     +    U_TARGET_B  =                    0;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
45154     +    END;
MPRINT(EM_DIAGRAM):   END;
45155     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
45156     +
45157     +    _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
45158     +      IF  NOT MISSING(PER_CAPITA_INCOME ) AND
45159     +      PER_CAPITA_INCOME  <                17477 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PER_CAPITA_INCOME ) AND PER_CAPITA_INCOME < 17477 THEN DO;
45160     +       _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45161     +      END;
MPRINT(EM_DIAGRAM):   END;
45162     +      ELSE IF  NOT MISSING(PER_CAPITA_INCOME ) AND
45163     +                     17477 <= PER_CAPITA_INCOME  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(PER_CAPITA_INCOME ) AND 17477 <= PER_CAPITA_INCOME THEN DO;
45164     +       _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45165     +      END;
MPRINT(EM_DIAGRAM):   END;
45166     +    IF _BRANCH_ LT 0 AND NOT MISSING(CLUSTER_CODE ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(CLUSTER_CODE ) THEN DO;
45167     +      _ARBFMT_2 = PUT( CLUSTER_CODE , $2.);
MPRINT(EM_DIAGRAM):   _ARBFMT_2 = PUT( CLUSTER_CODE , $2.);
45168     +       %DMNORMIP( _ARBFMT_2);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_2,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
45169     +        IF _ARBFMT_2 IN ('.' ,'04' ,'49' ,'50' ,'43' ,'53' ,'42' ,'46' ,'45' ,
45170     +        '20' ,'16' ,'30' ,'07' ,'25' ,'09' ,'41' ,'37' ,'38' ,'18' ,'36' ,
45171     +        '48' ,'08' ,'31' ,'19' ,'27' ,'40' ,'26' ,'28' ,'21' ,'51' ,'44' ,
45172     +        '05' ,'17' ,'39' ,'33' ,'47' ,'06' ,'32' ,'52' ,'10' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_2 IN ('.' ,'04' ,'49' ,'50' ,'43' ,'53' ,'42' ,'46' ,'45' , '20' ,'16' ,'30' ,'07' ,'25' ,'09' ,'41' ,'37' ,'38' ,'18' ,'36' , '48' ,'08' ,'31' ,'19' ,'27' ,'40' ,'26' ,'28' ,'21' ,'51' ,'44' , '05' ,'17' ,'39' ,'33' ,'47'
,'06' ,'32' ,'52' ,'10' ) THEN DO;
45173     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45174     +        END;
MPRINT(EM_DIAGRAM):   END;
45175     +        ELSE IF _ARBFMT_2 IN ('34' ,'23' ,'01' ,'02' ,'15' ,'24' ,'12' ,'35' ,
45176     +        '13' ,'14' ,'29' ,'11' ,'22' ,'03' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_2 IN ('34' ,'23' ,'01' ,'02' ,'15' ,'24' ,'12' ,'35' , '13' ,'14' ,'29' ,'11' ,'22' ,'03' ) THEN DO;
45177     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45178     +        END;
MPRINT(EM_DIAGRAM):   END;
45179     +      END;
MPRINT(EM_DIAGRAM):   END;
45180     +    IF _BRANCH_ LT 0 AND NOT MISSING(MEDIAN_HOUSEHOLD_INCOME ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(MEDIAN_HOUSEHOLD_INCOME ) THEN DO;
45181     +        IF MEDIAN_HOUSEHOLD_INCOME  <                409.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF MEDIAN_HOUSEHOLD_INCOME < 409.5 THEN DO;
45182     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45183     +        END;
MPRINT(EM_DIAGRAM):   END;
45184     +        ELSE IF                409.5 <= MEDIAN_HOUSEHOLD_INCOME  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 409.5 <= MEDIAN_HOUSEHOLD_INCOME THEN DO;
45185     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45186     +        END;
MPRINT(EM_DIAGRAM):   END;
45187     +      END;
MPRINT(EM_DIAGRAM):   END;
45188     +    IF _BRANCH_ LT 0 AND NOT MISSING(REP_SES ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(REP_SES ) THEN DO;
45189     +      _ARBFMT_4 = PUT( REP_SES , $4.);
MPRINT(EM_DIAGRAM):   _ARBFMT_4 = PUT( REP_SES , $4.);
45190     +       %DMNORMIP( _ARBFMT_4);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
45191     +        IF _ARBFMT_4 IN ('2' ,'3' ,'4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_4 IN ('2' ,'3' ,'4' ) THEN DO;
45192     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45193     +        END;
MPRINT(EM_DIAGRAM):   END;
45194     +        ELSE IF _ARBFMT_4 IN ('1' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_4 IN ('1' ) THEN DO;
45195     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45196     +        END;
MPRINT(EM_DIAGRAM):   END;
45197     +      END;
MPRINT(EM_DIAGRAM):   END;
45198     +    IF _BRANCH_ LT 0 AND NOT MISSING(MEDIAN_HOME_VALUE ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(MEDIAN_HOME_VALUE ) THEN DO;
45199     +        IF MEDIAN_HOME_VALUE  <                 1126 THEN DO;
MPRINT(EM_DIAGRAM):   IF MEDIAN_HOME_VALUE < 1126 THEN DO;
45200     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45201     +        END;
MPRINT(EM_DIAGRAM):   END;
45202     +        ELSE IF                 1126 <= MEDIAN_HOME_VALUE  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 1126 <= MEDIAN_HOME_VALUE THEN DO;
45203     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45204     +        END;
MPRINT(EM_DIAGRAM):   END;
45205     +      END;
MPRINT(EM_DIAGRAM):   END;
45206     +    IF _BRANCH_ LT 0 THEN _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 1;
45207     +
45208     +    IF _BRANCH_ EQ    2 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 2 THEN DO;
45209     +      _NODE_  =                   15;
MPRINT(EM_DIAGRAM):   _NODE_ = 15;
45210     +      _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
45211     +      P_TARGET_B1  =     0.04725884462623;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.04725884462623;
45212     +      P_TARGET_B0  =     0.95274115537376;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.95274115537376;
45213     +      Q_TARGET_B1  =      0.2390988372093;
MPRINT(EM_DIAGRAM):   Q_TARGET_B1 = 0.2390988372093;
45214     +      Q_TARGET_B0  =     0.76090116279069;
MPRINT(EM_DIAGRAM):   Q_TARGET_B0 = 0.76090116279069;
45215     +      V_TARGET_B1  =     0.04024137145951;
MPRINT(EM_DIAGRAM):   V_TARGET_B1 = 0.04024137145951;
45216     +      V_TARGET_B0  =     0.95975862854048;
MPRINT(EM_DIAGRAM):   V_TARGET_B0 = 0.95975862854048;
45217     +      I_TARGET_B  = '0' ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = '0' ;
45218     +      U_TARGET_B  =                    0;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
45219     +      END;
MPRINT(EM_DIAGRAM):   END;
45220     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
45221     +
45222     +      _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
45223     +        IF  NOT MISSING(FILE_AVG_GIFT ) AND
45224     +        FILE_AVG_GIFT  <               13.615 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(FILE_AVG_GIFT ) AND FILE_AVG_GIFT < 13.615 THEN DO;
45225     +         _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45226     +        END;
MPRINT(EM_DIAGRAM):   END;
45227     +        ELSE IF  NOT MISSING(FILE_AVG_GIFT ) AND
45228     +                      13.615 <= FILE_AVG_GIFT  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(FILE_AVG_GIFT ) AND 13.615 <= FILE_AVG_GIFT THEN DO;
45229     +         _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45230     +        END;
MPRINT(EM_DIAGRAM):   END;
45231     +      IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_AVG_GIFT_AMT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_AVG_GIFT_AMT ) THEN DO;
45232     +          IF LIFETIME_AVG_GIFT_AMT  <               13.615 THEN DO;
MPRINT(EM_DIAGRAM):   IF LIFETIME_AVG_GIFT_AMT < 13.615 THEN DO;
45233     +           _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45234     +          END;
MPRINT(EM_DIAGRAM):   END;
45235     +          ELSE IF               13.615 <= LIFETIME_AVG_GIFT_AMT  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 13.615 <= LIFETIME_AVG_GIFT_AMT THEN DO;
45236     +           _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45237     +          END;
MPRINT(EM_DIAGRAM):   END;
45238     +        END;
MPRINT(EM_DIAGRAM):   END;
45239     +      IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_MIN_GIFT_AMT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_MIN_GIFT_AMT ) THEN DO;
45240     +          IF LIFETIME_MIN_GIFT_AMT  <                 7.75 THEN DO;
MPRINT(EM_DIAGRAM):   IF LIFETIME_MIN_GIFT_AMT < 7.75 THEN DO;
45241     +           _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45242     +          END;
MPRINT(EM_DIAGRAM):   END;
45243     +          ELSE IF                 7.75 <= LIFETIME_MIN_GIFT_AMT  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 7.75 <= LIFETIME_MIN_GIFT_AMT THEN DO;
45244     +           _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45245     +          END;
MPRINT(EM_DIAGRAM):   END;
45246     +        END;
MPRINT(EM_DIAGRAM):   END;
45247     +      IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_AVG_GIFT_AMT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(RECENT_AVG_GIFT_AMT ) THEN DO;
45248     +          IF RECENT_AVG_GIFT_AMT  <               14.835 THEN DO;
MPRINT(EM_DIAGRAM):   IF RECENT_AVG_GIFT_AMT < 14.835 THEN DO;
45249     +           _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45250     +          END;
MPRINT(EM_DIAGRAM):   END;
45251     +          ELSE IF               14.835 <= RECENT_AVG_GIFT_AMT  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 14.835 <= RECENT_AVG_GIFT_AMT THEN DO;
45252     +           _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45253     +          END;
MPRINT(EM_DIAGRAM):   END;
45254     +        END;
MPRINT(EM_DIAGRAM):   END;
45255     +      IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_MAX_GIFT_AMT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_MAX_GIFT_AMT ) THEN DO;
45256     +          IF LIFETIME_MAX_GIFT_AMT  <                 19.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF LIFETIME_MAX_GIFT_AMT < 19.5 THEN DO;
45257     +           _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45258     +          END;
MPRINT(EM_DIAGRAM):   END;
45259     +          ELSE IF                 19.5 <= LIFETIME_MAX_GIFT_AMT  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 19.5 <= LIFETIME_MAX_GIFT_AMT THEN DO;
45260     +           _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45261     +          END;
MPRINT(EM_DIAGRAM):   END;
45262     +        END;
MPRINT(EM_DIAGRAM):   END;
45263     +      IF _BRANCH_ LT 0 THEN _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 2;
45264     +
45265     +      IF _BRANCH_ EQ    1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 1 THEN DO;
45266     +        _NODE_  =                   24;
MPRINT(EM_DIAGRAM):   _NODE_ = 24;
45267     +        _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
45268     +        P_TARGET_B1  =      0.0361451652753;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.0361451652753;
45269     +        P_TARGET_B0  =     0.96385483472469;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.96385483472469;
45270     +        Q_TARGET_B1  =     0.19196062346185;
MPRINT(EM_DIAGRAM):   Q_TARGET_B1 = 0.19196062346185;
45271     +        Q_TARGET_B0  =     0.80803937653814;
MPRINT(EM_DIAGRAM):   Q_TARGET_B0 = 0.80803937653814;
45272     +        V_TARGET_B1  =     0.03668059246853;
MPRINT(EM_DIAGRAM):   V_TARGET_B1 = 0.03668059246853;
45273     +        V_TARGET_B0  =     0.96331940753146;
MPRINT(EM_DIAGRAM):   V_TARGET_B0 = 0.96331940753146;
45274     +        I_TARGET_B  = '0' ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = '0' ;
45275     +        U_TARGET_B  =                    0;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
45276     +        END;
MPRINT(EM_DIAGRAM):   END;
45277     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
45278     +
45279     +        _BRANCH_ = -1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = -1;
45280     +          IF  NOT MISSING(NUMBER_PROM_12 ) AND
45281     +          NUMBER_PROM_12  <                 13.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(NUMBER_PROM_12 ) AND NUMBER_PROM_12 < 13.5 THEN DO;
45282     +           _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45283     +          END;
MPRINT(EM_DIAGRAM):   END;
45284     +          ELSE IF  NOT MISSING(NUMBER_PROM_12 ) AND
45285     +                          13.5 <= NUMBER_PROM_12  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(NUMBER_PROM_12 ) AND 13.5 <= NUMBER_PROM_12 THEN DO;
45286     +           _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45287     +          END;
MPRINT(EM_DIAGRAM):   END;
45288     +        IF _BRANCH_ LT 0 AND NOT MISSING(IN_HOUSE ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(IN_HOUSE ) THEN DO;
45289     +          _ARBFMT_12 = PUT( IN_HOUSE , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( IN_HOUSE , BEST12.);
45290     +           %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
45291     +            IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
45292     +             _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45293     +            END;
MPRINT(EM_DIAGRAM):   END;
45294     +            ELSE IF _ARBFMT_12 IN ('1' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('1' ) THEN DO;
45295     +             _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45296     +            END;
MPRINT(EM_DIAGRAM):   END;
45297     +          END;
MPRINT(EM_DIAGRAM):   END;
45298     +        IF _BRANCH_ LT 0 AND NOT MISSING(MONTHS_SINCE_LAST_GIFT ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(MONTHS_SINCE_LAST_GIFT ) THEN DO;
45299     +            IF                 14.5 <= MONTHS_SINCE_LAST_GIFT  THEN DO;
MPRINT(EM_DIAGRAM):   IF 14.5 <= MONTHS_SINCE_LAST_GIFT THEN DO;
45300     +             _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45301     +            END;
MPRINT(EM_DIAGRAM):   END;
45302     +            ELSE IF MONTHS_SINCE_LAST_GIFT  <                 14.5 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF MONTHS_SINCE_LAST_GIFT < 14.5 THEN DO;
45303     +             _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45304     +            END;
MPRINT(EM_DIAGRAM):   END;
45305     +          END;
MPRINT(EM_DIAGRAM):   END;
45306     +        IF _BRANCH_ LT 0 AND NOT MISSING(CARD_PROM_12 ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(CARD_PROM_12 ) THEN DO;
45307     +          _ARBFMT_12 = PUT( CARD_PROM_12 , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( CARD_PROM_12 , BEST12.);
45308     +           %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
45309     +            IF _ARBFMT_12 IN ('5' ,'6' ,'4' ,'2' ,'3' ,'1' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ,'6' ,'4' ,'2' ,'3' ,'1' ) THEN DO;
45310     +             _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45311     +            END;
MPRINT(EM_DIAGRAM):   END;
45312     +            ELSE IF _ARBFMT_12 IN ('7' ,'9' ,'8' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('7' ,'9' ,'8' ) THEN DO;
45313     +             _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45314     +            END;
MPRINT(EM_DIAGRAM):   END;
45315     +          END;
MPRINT(EM_DIAGRAM):   END;
45316     +        IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_PROM ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 AND NOT MISSING(LIFETIME_PROM ) THEN DO;
45317     +            IF LIFETIME_PROM  <                 71.5 THEN DO;
MPRINT(EM_DIAGRAM):   IF LIFETIME_PROM < 71.5 THEN DO;
45318     +             _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 1;
45319     +            END;
MPRINT(EM_DIAGRAM):   END;
45320     +            ELSE IF                 71.5 <= LIFETIME_PROM  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF 71.5 <= LIFETIME_PROM THEN DO;
45321     +             _BRANCH_ =    2;
MPRINT(EM_DIAGRAM):   _BRANCH_ = 2;
45322     +            END;
MPRINT(EM_DIAGRAM):   END;
45323     +          END;
MPRINT(EM_DIAGRAM):   END;
45324     +        IF _BRANCH_ LT 0 THEN _BRANCH_ =    1;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ LT 0 THEN _BRANCH_ = 1;
45325     +
45326     +        IF _BRANCH_ EQ    2 THEN DO;
MPRINT(EM_DIAGRAM):   IF _BRANCH_ EQ 2 THEN DO;
45327     +          _NODE_  =                   35;
MPRINT(EM_DIAGRAM):   _NODE_ = 35;
45328     +          _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
45329     +          P_TARGET_B1  =     0.04899772110298;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.04899772110298;
45330     +          P_TARGET_B0  =     0.95100227889701;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.95100227889701;
45331     +          Q_TARGET_B1  =     0.24607329842931;
MPRINT(EM_DIAGRAM):   Q_TARGET_B1 = 0.24607329842931;
45332     +          Q_TARGET_B0  =     0.75392670157068;
MPRINT(EM_DIAGRAM):   Q_TARGET_B0 = 0.75392670157068;
45333     +          V_TARGET_B1  =     0.03602921311568;
MPRINT(EM_DIAGRAM):   V_TARGET_B1 = 0.03602921311568;
45334     +          V_TARGET_B0  =     0.96397078688431;
MPRINT(EM_DIAGRAM):   V_TARGET_B0 = 0.96397078688431;
45335     +          I_TARGET_B  = '0' ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = '0' ;
45336     +          U_TARGET_B  =                    0;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
45337     +          END;
MPRINT(EM_DIAGRAM):   END;
45338     +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
45339     +          IF  NOT MISSING(PCT_ATTRIBUTE2 ) AND
45340     +                            58.5 <= PCT_ATTRIBUTE2  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(PCT_ATTRIBUTE2 ) AND 58.5 <= PCT_ATTRIBUTE2 THEN DO;
45341     +            _NODE_  =                   41;
MPRINT(EM_DIAGRAM):   _NODE_ = 41;
45342     +            _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
45343     +            P_TARGET_B1  =     0.12136059263373;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.12136059263373;
45344     +            P_TARGET_B0  =     0.87863940736626;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.87863940736626;
45345     +            Q_TARGET_B1  =     0.46666666666666;
MPRINT(EM_DIAGRAM):   Q_TARGET_B1 = 0.46666666666666;
45346     +            Q_TARGET_B0  =     0.53333333333333;
MPRINT(EM_DIAGRAM):   Q_TARGET_B0 = 0.53333333333333;
45347     +            V_TARGET_B1  =     0.05942303585465;
MPRINT(EM_DIAGRAM):   V_TARGET_B1 = 0.05942303585465;
45348     +            V_TARGET_B0  =     0.94057696414534;
MPRINT(EM_DIAGRAM):   V_TARGET_B0 = 0.94057696414534;
45349     +            I_TARGET_B  = '0' ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = '0' ;
45350     +            U_TARGET_B  =                    0;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
45351     +            END;
MPRINT(EM_DIAGRAM):   END;
45352     +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
45353     +            _NODE_  =                   40;
MPRINT(EM_DIAGRAM):   _NODE_ = 40;
45354     +            _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
45355     +            P_TARGET_B1  =      0.0218140868437;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.0218140868437;
45356     +            P_TARGET_B0  =     0.97818591315629;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.97818591315629;
45357     +            Q_TARGET_B1  =     0.12378483473752;
MPRINT(EM_DIAGRAM):   Q_TARGET_B1 = 0.12378483473752;
45358     +            Q_TARGET_B0  =     0.87621516526247;
MPRINT(EM_DIAGRAM):   Q_TARGET_B0 = 0.87621516526247;
45359     +            V_TARGET_B1  =     0.03330189507384;
MPRINT(EM_DIAGRAM):   V_TARGET_B1 = 0.03330189507384;
45360     +            V_TARGET_B0  =     0.96669810492615;
MPRINT(EM_DIAGRAM):   V_TARGET_B0 = 0.96669810492615;
45361     +            I_TARGET_B  = '0' ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = '0' ;
45362     +            U_TARGET_B  =                    0;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
45363     +            END;
MPRINT(EM_DIAGRAM):   END;
45364     +          END;
MPRINT(EM_DIAGRAM):   END;
45365     +        END;
MPRINT(EM_DIAGRAM):   END;
45366     +      END;
MPRINT(EM_DIAGRAM):   END;
45367     +    END;
MPRINT(EM_DIAGRAM):   END;
45368     +  END;
MPRINT(EM_DIAGRAM):   END;
45369     +
45370     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
45371     +IF  F_TARGET_B  NE '1'
45372     +AND F_TARGET_B  NE '0'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_TARGET_B NE '1' AND F_TARGET_B NE '0' THEN DO;
45373     +        R_TARGET_B1  = .;
MPRINT(EM_DIAGRAM):   R_TARGET_B1 = .;
45374     +        R_TARGET_B0  = .;
MPRINT(EM_DIAGRAM):   R_TARGET_B0 = .;
45375     + END;
MPRINT(EM_DIAGRAM):   END;
45376     + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
45377     +       R_TARGET_B1  =  -P_TARGET_B1 ;
MPRINT(EM_DIAGRAM):   R_TARGET_B1 = -P_TARGET_B1 ;
45378     +       R_TARGET_B0  =  -P_TARGET_B0 ;
MPRINT(EM_DIAGRAM):   R_TARGET_B0 = -P_TARGET_B0 ;
45379     +       SELECT( F_TARGET_B  );
MPRINT(EM_DIAGRAM):   SELECT( F_TARGET_B );
45380     +          WHEN( '1'  ) R_TARGET_B1  = R_TARGET_B1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_TARGET_B1 = R_TARGET_B1 +1;
45381     +          WHEN( '0'  ) R_TARGET_B0  = R_TARGET_B0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_TARGET_B0 = R_TARGET_B0 +1;
45382     +       END;
MPRINT(EM_DIAGRAM):   END;
45383     + END;
MPRINT(EM_DIAGRAM):   END;
45384     +
45385     +*****  DECISION VARIABLES *******;
MPRINT(EM_DIAGRAM):   ***** DECISION VARIABLES *******;
45386     +
45387     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
45388     +label D_TARGET_B = 'Decision: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label D_TARGET_B = 'Decision: TARGET_B' ;
45389     +label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
45390     +label BP_TARGET_B = 'Best Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label BP_TARGET_B = 'Best Profit: TARGET_B' ;
45391     +label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
45392     +
45393     +length D_TARGET_B $ 9;
MPRINT(EM_DIAGRAM):   length D_TARGET_B $ 9;
45394     +
45395     +D_TARGET_B = ' ';
MPRINT(EM_DIAGRAM):   D_TARGET_B = ' ';
45396     +EP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = .;
45397     +BP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   BP_TARGET_B = .;
45398     +CP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   CP_TARGET_B = .;
45399     +
45400     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
45401     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
45402     +
45403     +D_TARGET_B = '1' ;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '1' ;
45404     +EP_TARGET_B = P_TARGET_B1 * 14.5 + P_TARGET_B0 * -0.5;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = P_TARGET_B1 * 14.5 + P_TARGET_B0 * -0.5;
45405     +drop _sum;
MPRINT(EM_DIAGRAM):   drop _sum;
45406     +_sum = P_TARGET_B1 * 0 + P_TARGET_B0 * 0;
MPRINT(EM_DIAGRAM):   _sum = P_TARGET_B1 * 0 + P_TARGET_B0 * 0;
45407     +if _sum > EP_TARGET_B + 6.593837E-12 then do;
MPRINT(EM_DIAGRAM):   if _sum > EP_TARGET_B + 6.593837E-12 then do;
45408     +   EP_TARGET_B = _sum; _decnum = 2;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
45409     +   D_TARGET_B = '0' ;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '0' ;
45410     +end;
MPRINT(EM_DIAGRAM):   end;
45411     +
45412     +*** Decision Matrix;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
45413     +array TREEdema [2,2] _temporary_ (
45414     +/* row 1 */  14.5 0
45415     +/* row 2 */  -0.5 0
45416     +);
MPRINT(EM_DIAGRAM):   array TREEdema [2,2] _temporary_ ( 14.5 0 -0.5 0 );
45417     +
45418     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
45419     +drop _tarnum; select( F_TARGET_B );
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_TARGET_B );
45420     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
45421     +   when('0' ) _tarnum = 2;
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
45422     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
45423     +end;
MPRINT(EM_DIAGRAM):   end;
45424     +if _tarnum <= 0 then goto TREEdeex;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto TREEdeex;
45425     +
45426     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
45427     +CP_TARGET_B = TREEdema [_tarnum,_decnum];
MPRINT(EM_DIAGRAM):   CP_TARGET_B = TREEdema [_tarnum,_decnum];
45428     +
45429     +*** Best Possible Consequence of Any Decision without Cost;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
45430     +array TREEdebe [2] _temporary_ ( 14.5 0);
MPRINT(EM_DIAGRAM):   array TREEdebe [2] _temporary_ ( 14.5 0);
45431     +BP_TARGET_B = TREEdebe [_tarnum];
MPRINT(EM_DIAGRAM):   BP_TARGET_B = TREEdebe [_tarnum];
45432     +
45433     +
45434     +TREEdeex:;
MPRINT(EM_DIAGRAM):   TREEdeex:;
45435     +
45436     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
45437     +
45438     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
45439     +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
45440     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
45441     +
45442     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45443     +*Computing Unadjusted Residual Vars: TARGET_B;
MPRINT(EM_DIAGRAM):   *Computing Unadjusted Residual Vars: TARGET_B;
45444     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45445     +Label R_TARGET_B1='Residual: TARGET_B=1';
MPRINT(EM_DIAGRAM):   Label R_TARGET_B1= 'Residual: TARGET_B=1';
45446     +Label R_TARGET_B0='Residual: TARGET_B=0';
MPRINT(EM_DIAGRAM):   Label R_TARGET_B0= 'Residual: TARGET_B=0';
45447     +if
45448     + F_TARGET_B ne '1'
45449     +and F_TARGET_B ne '0'
45450     + then do;
MPRINT(EM_DIAGRAM):   if F_TARGET_B ne '1' and F_TARGET_B ne '0' then do;
45451     +R_TARGET_B1=.;
MPRINT(EM_DIAGRAM):   R_TARGET_B1=.;
45452     +R_TARGET_B0=.;
MPRINT(EM_DIAGRAM):   R_TARGET_B0=.;
45453     +end;
MPRINT(EM_DIAGRAM):   end;
45454     +else do;
MPRINT(EM_DIAGRAM):   else do;
45455     +R_TARGET_B1= - Q_TARGET_B1;
MPRINT(EM_DIAGRAM):   R_TARGET_B1= - Q_TARGET_B1;
45456     +R_TARGET_B0= - Q_TARGET_B0;
MPRINT(EM_DIAGRAM):   R_TARGET_B0= - Q_TARGET_B0;
45457     +select(F_TARGET_B);
MPRINT(EM_DIAGRAM):   select(F_TARGET_B);
45458     +when('1')R_TARGET_B1= R_TARGET_B1+1;
MPRINT(EM_DIAGRAM):   when('1')R_TARGET_B1= R_TARGET_B1+1;
45459     +when('0')R_TARGET_B0= R_TARGET_B0+1;
MPRINT(EM_DIAGRAM):   when('0')R_TARGET_B0= R_TARGET_B0+1;
45460     +otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
45461     +end;
MPRINT(EM_DIAGRAM):   end;
45462     +end;
MPRINT(EM_DIAGRAM):   end;
45463     +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
45464      run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
45465      quit;
45466      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
45468      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
45469      * Tree: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Tree: Computing metadata for TRAIN data;
45470      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Tree_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Tree_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Tree_TRAIN out=WORK.M3PNK1H3 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3PNK1H3;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3PNK1H3(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3PNK1H3;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3PNK1H3;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3WUD280 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3WUD280;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3WUD280;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3UXDSQ5(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3WUD280;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3WUD280;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3WUD280;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3WUD280;
MPRINT(EMADVISECOLUMNS):   set WORK.M3WUD280;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Repl_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Repl_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Tree";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_TARGET_B1") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("P_TARGET_B0") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("TARGET_B") model = "Tree";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "DONOR_AGE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "HOME_OWNER" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "INCOME_GROUP" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "LAST_GIFT_AMT" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "LIFETIME_CARD_PROM" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "LIFETIME_GIFT_AMOUNT" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "LIFETIME_GIFT_RANGE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "MONTHS_SINCE_FIRST_GIFT" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "MONTHS_SINCE_LAST_PROM_RESP" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "MONTHS_SINCE_ORIGIN" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "MOR_HIT_RATE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "OVERLAY_SOURCE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "PCT_ATTRIBUTE1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "PCT_ATTRIBUTE3" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "PCT_ATTRIBUTE4" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "PCT_OWNER_OCCUPIED" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "PUBLISHED_PHONE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_TARGET_B0" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_TARGET_B1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "RECENCY_STATUS_96NK" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "RECENT_AVG_CARD_GIFT_AMT" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "RECENT_CARD_RESPONSE_COUNT" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "RECENT_CARD_RESPONSE_PROP" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "REP_DONOR_GENDER" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "REP_URBANICITY" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "WEALTH_RATING" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "_NODE_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
45885      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
45886      set EMWS1.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMINFO;
45887      where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
45888      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
45889      data EMWS1.Tree_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_EMINFO;
45890      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
45891      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
45892      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
45896      run;
45897      data EMWS1.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_EMINFO;
45898      set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
45899      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
45900      proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
45901      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
45902      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
45903      proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
45904      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
45905      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
45906      proc sort data = EMWS1.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
45907      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
45908      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
45909      data EMWS1.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_EMINFO;
45910      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
45911      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
45912      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
45913      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
45914      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
45915      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
45916      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 11, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:01:01" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                October 11, 2015
Time:                15:01:01
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2XL8VET "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Tree\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2XL8VET new;
MPRINT(EM_DIAGRAM):   run;
45940      data EMWS1.Tree_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_EMOUTFIT;
45941      set EMWS1.Tree_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMOUTFIT;
45942      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
45943      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
45944      if upcase(TARGET) eq "TARGET_B" then TargetLabel = 'Target Variable Indicates for Response to 97NK Mailing';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "TARGET_B" then TargetLabel = 'Target Variable Indicates for Response to 97NK Mailing';
45945      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
45946      proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
45947      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
45948      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 12 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
45949      %let _EMwarndup = 0;
45950      %let _EMtargetdup =;
45951      %let _EMASEtargetdup =;
45952      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
45953      set EMWS1.Tree_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMOUTFIT;
45954      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
45955      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
45956      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
45957      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
45958      end;
MPRINT(EM_DIAGRAM):   end;
45959      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
45960      %let EMEXCEPTIONSTRING=;
45961      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
45962      * REPORT: Tree;
MPRINT(EM_DIAGRAM):   * REPORT: Tree;
45963      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45964      %let EM_ACTION = REPORT;
45965      %let syscc = 0;
45966      %macro main;
45967
45968        %if %upcase(&EM_ACTION) = CREATE %then %do;
45969          filename temp catalog 'sashelp.emmodl.tree_create.source';
45970          %include temp;
45971          filename temp;
45972
45973          %em_tree_create;
45974        %end;
45975
45976         %else
45977         %if %upcase(&EM_ACTION) = TRAIN %then %do;
45978
45979             filename temp catalog 'sashelp.emmodl.tree_train.source';
45980             %include temp;
45981             filename temp;
45982             %em_tree_train;
45983         %end;
45984
45985        %else
45986        %if %upcase(&EM_ACTION) = SCORE %then %do;
45987          filename temp catalog 'sashelp.emmodl.tree_score.source';
45988          %include temp;
45989          filename temp;
45990
45991          %em_tree_score;
45992
45993        %end;
45994
45995        %else
45996        %if %upcase(&EM_ACTION) = REPORT %then %do;
45997
45998             filename temp catalog 'sashelp.emmodl.tree_report.source';
45999             %include temp;
46000             filename temp;
46001
46002             %em_tree_report;
46003         %end;
46004
46005        %else
46006        %if %upcase(&EM_ACTION) = OPENINT %then %do;
46007
46008             filename temp catalog 'sashelp.emmodl.tree_actions.source';
46009             %include temp;
46010             filename temp;
46011             %EM_TREE_OPENTREEVIEWER;
46012
46013         %end;
46014
46015        %else
46016        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
46017
46018             filename temp catalog 'sashelp.emmodl.tree_actions.source';
46019             %include temp;
46020             filename temp;
46021             %EM_TREE_CLOSETREEVIEWER;
46022
46023         %end;
46024
46025
46026         %doendm:
46027      %mend main;
46028
46029      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
46031     +%macro em_tree_makePlotDs( multipleTar= );
46033     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
46034     +  %EM_GETNAME(key=OUTNODES, type=DATA);
46035     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
46036     +  %EM_GETNAME(key=OUTRULES, type=DATA);
46038     +  /* determine if validation statistics will be displayed */
46039     +  %let validflag=N;
46040     +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
46041     +    /* determine if validation data exists */
46042     +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
46043     +      %let validflag=Y;
46044     +    %end;
46045     +  %end;
46047     +   /* retrieve name of decmeta even in presence of multiple targets */
46048     +   %let decmeta = ;
46049     +   %if &EM_DEC_DECMETA eq %then %do;
46050     +     data _Target;
46051     +       set &em_data_variableset;
46052     +       where ROLE='TARGET' and USE in('D', 'Y');
46053     +       keep NAME;
46054     +     run;
46055     +     proc sort data=_Target;
46056     +       by NAME;
46057     +     run;
46058     +     proc sort data=EM_TARGETDECINFO;
46059     +       by TARGET;
46060     +     run;
46061     +     data _Target;
46062     +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
46063     +       by NAME;
46064     +       if _a then do;
46065     +         call symput('decmeta', trim(DECMETA));
46066     +       end;
46067     +     run;
46068     +     proc delete data=_Target;run;
46069     +   %end;
46070     +   %else %let decmeta = &EM_DEC_DECMETA;
46073     +  /* retrieve targetEvent from decmeta */
46074     +  %let targetEvent=;
46075     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
46076     +    %if %sysfunc(exist(&DECMETA)) %then %do;
46077     +      data _null_;
46078     +       set &DECMETA(where=(_TYPE_="TARGET"));
46079     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
46080     +      run;
46081     +    %end;
46082     +  %end;
46084     +  /* retrieve predicted var for targetEvent from decmeta */
46085     +  %let predTarget=;
46086     +  %let predLvl=;
46087     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
46088     +    %if %sysfunc(exist(&DECMETA)) %then %do;
46089     +      data _null_;
46090     +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
46091     +       call symput('predTarget', strip(VARIABLE));
46092     +       call symput('predLvl', strip(LEVEL));
46093     +      run;
46094     +    %end;
46095     +  %end;
46096     +  %else %do;
46097     +    %if %sysfunc(exist(&DECMETA)) %then %do;
46098     +      data _null_;
46099     +       set &DECMETA(where=(_TYPE_="PREDICTED"));
46100     +       call symput('predTarget', strip(VARIABLE));
46101     +      run;
46102     +    %end;
46103     +  %end;
46105     +  /* create BelowText value */
46106     +  data belowtext;
46107     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
46108     +    keep node belowtext;
46109     +  run;
46111     +  /* relace belowtext with variable label if it exists */
46112     +  data belowtext2;
46113     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
46114     +    keep node belowtextlbl;
46115     +  run;
46117     +  proc sort data=belowtext; by node; run;
46118     +  proc sort data=belowtext2; by node; run;
46120     +  data belowtext;
46121     +    merge belowtext belowtext2(in=_a);
46122     +    by node;
46123     +    if _a then belowtext=belowtextlbl;
46124     +    keep node belowtext;
46125     +  run;
46127     +  /* create AboveText value */
46128     +  data abovetext;
46129     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
46130     +  run;
46131     +  proc sort data=abovetext; by node numeric_value; run;
46133     +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
46134     +  data abovetext;
46135     +    set abovetext(rename=(node=parent));
46136     +    by parent numeric_value;
46137     +    retain abovetext tempstring flag branch origval origchar ;
46138     +    length abovetext tempstring origchar $45;
46140     +    if STAT in ("INTERVAL", "ORDINAL") then do;
46141     +      if first.parent then do;
46142     +        if missing(character_value) then do;
46143     +          numeric_value = round(numeric_value, &sp_precision);
46144     +          abovetext = "< "||strip(NUMERIC_VALUE);
46145     +          branch = 1;
46146     +          origval = numeric_value;
46147     +          output;
46148     +        end;
46149     +        else do;
46150     +          abovetext = "< "||strip(CHARACTER_VALUE);
46151     +          branch = 1;
46152     +          origchar = character_value;
46153     +          output;
46154     +        end;
46156     +        if first.parent AND last.parent then do;
46157     +          if missing(character_value) then do;
46158     +            numeric_value = round(numeric_value, &sp_precision);
46159     +            branch = branch + 1;
46160     +            abovetext = ">= "||strip(NUMERIC_VALUE);
46161     +            output;
46162     +          end;
46163     +          else do;
46164     +            branch = branch + 1;
46165     +            abovetext = ">= "||strip(CHARACTER_VALUE);
46166     +            output;
46167     +          end;
46168     +        end;
46169     +      end;
46170     +      else if last.parent then do;
46171     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
46172     +          if missing(character_value) then do;
46173     +            numeric_value = round(numeric_value, &sp_precision);
46174     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
46175     +          end;
46176     +          else do;
46177     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
46178     +          end;
46179     +          branch = branch + 1;
46180     +          output;
46182     +          if missing(character_value) then do;
46183     +            numeric_value = round(numeric_value, &sp_precision);
46184     +            abovetext = ">= "||strip(NUMERIC_VALUE);
46185     +          end;
46186     +          else do;
46187     +            abovetext = ">= "||strip(CHARACTER_VALUE);
46188     +          end;
46189     +          branch = branch + 1;
46190     +          output;
46191     +        end;
46192     +        else do;
46193     +          if missing(character_value) then do;
46194     +            numeric_value = round(numeric_value, &sp_precision);
46195     +            abovetext = ">= "||strip(NUMERIC_VALUE);
46196     +          end;
46197     +          else do;
46198     +            abovetext = ">= "||strip(CHARACTER_VALUE);
46199     +          end;
46200     +          branch = branch + 1;
46201     +          output;
46202     +        end;
46203     +      end;
46204     +      else do;
46205     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
46206     +          if missing(character_value) then do;
46207     +            numeric_value = round(numeric_value,&sp_precision);
46208     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
46209     +            origval = numeric_value;
46210     +          end;
46211     +          else do;
46212     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
46213     +            origchar = character_value;
46214     +          end;
46215     +          branch = branch + 1;
46216     +          output;
46218     +        end;
46219     +        else do;
46220     +          if missing(character_value) then do;
46221     +            numeric_value = round(numeric_value, &sp_precision);
46222     +            abovetext = ">= "||strip(NUMERIC_VALUE);
46223     +            origval = numeric_value;
46224     +          end;
46225     +          else do;
46226     +            abovetext = ">= "||strip(CHARACTER_VALUE);
46227     +            origval = character_value;
46228     +          end;
46229     +          branch = branch + 1;
46230     +          output;
46231     +        end;
46232     +      end;
46233     +    end;
46234     +    else do;
46235     +       if first.numeric_value then do;
46236     +         flag = 0;
46237     +         abovetext = strip(CHARACTER_VALUE);
46238     +         branch = numeric_value;
46239     +         if first.numeric_value AND last.numeric_value then do;
46240     +           output;
46241     +         end;
46242     +       end;
46243     +       else if last.numeric_value then do;
46244     +         if flag=0 then do;
46245     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
46246     +           length = length(strip(tempstring));
46247     +           if length < 32 then do;
46248     +             abovetext = strip(tempstring);
46249     +           end;
46250     +           else do;
46251     +             abovetext = strip(abovetext)||", ...";
46252     +             flag = 1;
46253     +           end;
46254     +         end;
46255     +         branch = numeric_value;
46256     +         output;
46257     +       end;
46258     +       else do;
46259     +         if flag=0 then do;
46260     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
46261     +           length = length(strip(tempstring));
46262     +           if length < 32 then do;
46263     +             abovetext = strip(tempstring);
46264     +           end;
46265     +           else do;
46266     +             abovetext = strip(abovetext)||", ...";
46267     +             flag=1;
46268     +           end;
46269     +         end;
46270     +         branch = numeric_value;
46271     +       end;
46272     +    end;
46273     +    keep parent branch abovetext;
46274     +  run;
46276     +  /* MIssing value to abovetext */
46277     +  data tempmissing;
46278     +    set &EM_USER_OUTRULES;
46279     +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
46280     +    rename node=parent numeric_value=branch character_value=misschar;
46281     +  run;
46284     +  proc sort data=abovetext; by parent branch; run;
46285     +  proc sort data=tempmissing; by parent branch; run;
46286     +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
46288     +  data tempoutnodes;
46289     +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
46290     +    by parent branch;
46291     +    length traintotal validtotal 8;
46292     +    retain traintotal validtotal;
46294     +    if _a then do;
46295     +      if ^MISSING(abovetext) then do;
46296     +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
46297     +      end;
46298     +      else do;
46299     +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
46300     +      end;
46301     +    end;
46302     +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
46304     +    if node=1 then do;
46305     +      traintotal = N;
46306     +      validtotal=VN;
46307     +    end;
46309     +    drop role rank stat misschar belowtext;
46310     +  run;
46311     +  proc sort data=tempoutnodes; by node; run;
46312     +  proc sort data=belowtext; by node; run;
46314     +  data tempoutnodes;
46315     +    merge tempoutnodes belowtext;
46316     +    by node;
46318     +  run;
46320     +  /* determine if adjusted counts exists; if so, use these vs true counts */
46321     +  %let adjusted = N;
46322     +  %let npriors = 0;
46323     +  data _null_ ;
46324     +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
46325     +    if eof then do ;
46326     +      call symput("npriors" , strip(put(_N_,best.))) ;
46327     +    end;
46328     +  run;
46329     +  %if &npriors gt 0 %then %let adjusted=Y;
46332     +  /* create a table with targetUsed and targetLevel columns for each node */
46333     +  data temptarmeta;
46334     +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
46335     +    %if &multipleTar eq N %then %do;
46336     +      AND USE in ('D', 'Y')
46337     +    %end;
46338     +    ));
46339     +    length TARGET $32;
46340     +    Target=name;
46341     +    keep target level;
46342     +  run;
46344     +  %if &multipleTar eq Y %then %do;
46345     +    data temptargetused;
46346     +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
46347     +      keep node target;
46348     +    run;
46349     +    proc sort data=temptargetused; by target; run;
46350     +    proc sort data=temptarmeta; by target; run;
46351     +    data temptargetused;
46352     +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
46353     +      by target;
46354     +      if _a and _b;
46355     +    run;
46356     +  %end;
46357     +  %else %do;
46358     +    data temptargetused;
46359     +      set &EM_USER_OUTSTATS;
46360     +      length target $32 tarlevel $10;
46361     +      target="%EM_TARGET";
46362     +      tarlevel="%EM_TARGET_LEVEL";
46363     +      keep node target tarlevel;
46364     +    run;
46365     +    proc sort data=temptargetused nodupkey; by node; run;
46366     +  %end;
46368     +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
46369     +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
46370     +  proc sort data=temptargetused; by node; run;
46373     +  /* create tables for all interval targets as well as all class targets */
46374     +  data tempinterval tempclass;
46375     +    merge tempoutstats temptargetused( rename=(target=targetused));
46376     +    by node;
46377     +    %if "&multipleTar" eq "Y" %then %do;
46378     +      if ((missing(Target)) OR (target=targetused ));
46379     +    %end;
46381     +    if tarlevel="INTERVAL" then output tempinterval;
46382     +    else output tempclass;
46383     +  run;
46385     +  /* iniitalize intTarget and classTarget flags */
46386     +  %let em_intNobs =0;
46387     +  %let em_classNobs = 0;
46388     +  %let em_intTarget= N;
46389     +  %let em_classTarget= N;
46391     +  proc sql;
46392     +    reset noprint;
46393     +    select count(*) into :em_intNobs from tempinterval;
46394     +  quit;
46395     +  proc sql;
46396     +    reset noprint;
46397     +    select count(*) into :em_classNobs from tempclass;
46398     +  quit;
46400     +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
46401     +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
46403     +  /* retrieve all information for interval targets */
46404     +  %if &em_intTarget eq Y %then %do;
46406     +    /* determine if leaf variable exists */
46407     +    %let dsid=%sysfunc(open(tempinterval,i));
46408     +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
46409     +    %let rc=%sysfunc(close(&dsid));
46411     +    proc transpose data=tempinterval
46412     +      %if &leafexists %then %do;
46413     +        (drop=leaf)
46414     +      %end;
46415     +      %if &validexist %then %do;
46416     +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
46417     +      %end;
46418     +      %else %do;
46419     +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
46420     +      %end;
46421     +      by node;
46422     +      id statname;
46423     +    run;
46424     +    data tempinterval;
46425     +      set tempinterval;
46426     +      if missing(N) then delete;
46427     +    run;
46428     +  %end;
46430     +  /* retrieve all information for class targets */
46431     +  %if &em_classTarget eq Y %then %do;
46432     +    proc sort data=tempclass; by node category; run;
46433     +    %if &validflag eq N %then %do;
46434     +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
46435     +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
46436     +    %end;
46437     +    %else %do;
46438     +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
46439     +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
46440     +    %end;
46441     +      set tempclass;
46443     +      %if &validflag eq N %then %do;
46444     +        %if "&adjusted" eq "N" %then %do;
46445     +          if statname="N" then output tempn;
46446     +        %end;
46447     +        %else %do;
46448     +          if statname="NPRIORS" then output tempn;
46449     +        %end;
46450     +        else if statname="PREDICTION" then output temppredict;
46451     +        else if statname="PROBABILITY" then output tempprob;
46452     +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
46453     +        else if statname="ALTERNATIVE LOSS" then output temploss;
46454     +      %end;
46455     +      %else %do;
46456     +        %if "&adjusted" eq "N" %then %do;
46457     +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
46458     +        %end;
46459     +        %else %do;
46460     +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
46461     +        %end;
46462     +        else if statname="PREDICTION" then output temppredict;
46463     +        else if statname="PROBABILITY" then output tempprob;
46464     +        else if statname="VALID: PROBABILITY" then output tempvprob;
46465     +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
46466     +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
46467     +      %end;
46468     +    run;
46471     +    /* determine if profit/loss exists in tempprofit */
46472     +    %let em_profitflag=0;
46473     +    %let em_lossflag=0;
46474     +    proc sql;
46475     +      reset noprint;
46476     +      select count(*) into :em_profitflag from tempprofit;
46477     +    quit;
46478     +    proc sql;
46479     +      reset noprint;
46480     +      select count(*) into :em_lossflag from temploss;
46481     +    quit;
46483     +    %if &validFlag eq Y %then %do;
46484     +      proc transpose data=tempn
46485     +        %if "&adjusted" eq "N" %then %do;
46486     +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
46487     +        %end;
46488     +        %else %do;
46489     +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
46490     +        %end;
46491     +        by node;
46492     +        id statname;
46493     +      run;
46494     +      %if &em_profitflag ne 0 %then %do;
46495     +        proc transpose data=tempprofit out=tempprofit;
46496     +          by node category;
46497     +          id statname ;
46498     +        run;
46499     +      %end;
46500     +      %if &em_lossflag ne 0 %then %do;
46501     +        proc transpose data=temploss out=temploss;
46502     +          by node category;
46503     +          id statname ;
46504     +        run;
46505     +      %end;
46506     +      data tempprob;
46507     +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
46508     +        by node
46509     +        %if &multipleTar eq Y %then %do;
46510     +          target
46511     +        %end;
46512     +        category;
46513     +      run;
46514     +    %end;
46516     +    /* store percentcorrect value */
46517     +    data temppredict;
46518     +      merge tempprob temppredict(in=_a);
46519     +      by node category;
46520     +      if _a then do;
46521     +        percentCorrect = statvalue;
46522     +        %if &validFlag eq Y %then %do;
46523     +          vpercentCorrect= vstatvalue;
46524     +        %end;
46525     +      end;
46526     +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
46527     +      %if &validFlag eq Y %then %do;
46528     +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
46529     +      %end;
46530     +      ;
46531     +      if missing(percentCorrect) then delete;
46532     +      drop target;
46533     +    run;
46535     +    /* build profittext */
46536     +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
46537     +      data tempprofittext(keep= node profittext profitloss);
46538     +        length profittext $800 profitloss 8.;
46539     +        retain profittext profitloss;
46541     +        merge tempprob
46542     +        %if &em_profitflag ne 0 %then %do;
46543     +          tempprofit
46544     +        %end;
46545     +        %else %if &em_lossflag ne 0 %then %do;
46546     +          temploss
46547     +        %end;
46548     +        ;
46549     +        by node category;
46551     +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
46552     +        %let profittype = &EM_PROPERTY_PROFITLOSS;
46553     +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
46554     +          %let profittype = ALL;
46555     +        %end;
46557     +        /* create the profitloss variable for nodecolor if selected */
46558     +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
46560     +        %if "&profittype" eq "ALL" %then %do;
46561     +          if strip(CATEGORY)="&targetEvent" then do;
46562     +            profitloss=statvalue;
46563     +          end;
46564     +          if first.node then do;
46565     +            %if &validFlag eq N %then %do;
46566     +             %if &em_profitflag ne 0 %then %do;
46567     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
46568     +             %end;
46569     +             %if &em_lossflag ne 0 %then %do;
46570     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
46571     +             %end;
46572     +            %end;
46573     +            %else %do;
46574     +             %if &em_profitflag ne 0 %then %do;
46575     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
46575    !+14.&EM_PROPERTY_SPLITPRECISION);
46576     +             %end;
46577     +             %if &em_lossflag ne 0 %then %do;
46578     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
46579     +             %end;
46580     +            %end;
46581     +          end;
46582     +          else if last.node then do;
46583     +            %if &validFlag eq N %then %do;
46584     +             %if &em_profitflag ne 0 %then %do;
46585     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
46586     +             %end;
46587     +             %if &em_lossflag ne 0 %then %do;
46588     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
46589     +             %end;
46590     +             /*if CATEGORY="&targetEvent" then do;
46591     +               profitloss=statvalue;
46592     +             end;*/
46593     +            %end;
46594     +            %else %do;
46595     +             %if &em_profitflag ne 0 %then %do;
46596     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
46596    !+14.&EM_PROPERTY_SPLITPRECISION);
46597     +                if CATEGORY="&targetEvent" then do;
46598     +                 profitloss=ALTERNATIVE_PROFIT;
46599     +                end;
46600     +             %end;
46601     +             %if &em_lossflag ne 0 %then %do;
46602     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
46602    !+14.&EM_PROPERTY_SPLITPRECISION);
46603     +                if CATEGORY="&targetEvent" then do;
46604     +                  profitloss=ALTERNATIVE_LOSS;
46605     +                end;
46606     +             %end;
46607     +            %end;
46608     +            output;
46609     +          end;
46610     +          else do;
46611     +            %if &validFlag eq N %then %do;
46612     +             %if &em_profitflag ne 0 %then %do;
46613     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
46614     +             %end;
46615     +             %if &em_lossflag ne 0 %then %do;
46616     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
46617     +             %end;
46618     +            %end;
46619     +            %else %do;
46620     +             %if &em_profitflag ne 0 %then %do;
46621     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
46621    !+14.&EM_PROPERTY_SPLITPRECISION);
46622     +             %end;
46623     +             %if &em_lossflag ne 0 %then %do;
46624     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
46624    !+14.&EM_PROPERTY_SPLITPRECISION);
46625     +             %end;
46626     +            %end;
46627     +          end;
46628     +        %end;
46629     +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
46630     +          if strip(CATEGORY) = "&targetevent" then do;
46631     +            %if &validFlag eq N %then %do;
46632     +             %if &em_profitflag ne 0 %then %do;
46633     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
46634     +             %end;
46635     +             %if &em_lossflag ne 0 %then %do;
46636     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
46637     +             %end;
46638     +             profitloss=statvalue;
46639     +            %end;
46640     +            %else %do;
46641     +             %if &em_profitflag ne 0 %then %do;
46642     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
46642    !+14.&EM_PROPERTY_SPLITPRECISION);
46643     +                profitloss=ALTERNATIVE_PROFIT;
46644     +             %end;
46645     +             %if &em_lossflag ne 0 %then %do;
46646     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
46647     +                profitloss=ALTERNATIVE_LOSS;
46648     +             %end;
46649     +            %end;
46650     +            output;
46651     +          end;
46652     +        %end;
46653     +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
46654     +          if strip(CATEGORY) = "&targetevent" then do;
46655     +            %if &validFlag eq N %then %do;
46656     +             profitloss=statvalue;
46657     +            %end;
46658     +            %else %do;
46659     +             %if &em_profitflag ne 0 %then %do;
46660     +                profitloss=ALTERNATIVE_PROFIT;
46661     +             %end;
46662     +             %if &em_lossflag ne 0 %then %do;
46663     +                profitloss=ALTERNATIVE_LOSS;
46664     +             %end;
46665     +            %end;
46666     +            output;
46667     +          end;
46668     +        %end;
46669     +      run;
46670     +    %end;
46672     +    data tempprob(keep= node probtext);
46673     +      length probtext $800;
46674     +      retain probtext;
46675     +      set tempprob ;
46676     +      by node;
46678     +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
46679     +      %let probtype = &EM_PROPERTY_TARGET;
46680     +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
46681     +        %let probtype = ALL;
46682     +      %end;
46684     +      %if "&probtype" eq "ALL" %then %do;
46685     +        if first.node then do;
46686     +          %if &validFlag eq N %then %do;
46687     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
46688     +          %end;
46689     +          %else %do;
46690     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
46691     +          %end;
46692     +        end;
46693     +        else if last.node then do;
46694     +          %if &validFlag eq N %then %do;
46695     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
46696     +          %end;
46697     +          %else %do;
46698     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
46699     +          %end;
46700     +          output;
46701     +        end;
46702     +        else do;
46703     +          %if &validFlag eq N %then %do;
46704     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
46705     +          %end;
46706     +          %else %do;
46707     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
46708     +          %end;
46709     +        end;
46710     +      %end;
46711     +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
46712     +        if strip(CATEGORY) = "&targetevent" then do;
46713     +          %if &validFlag eq N %then %do;
46714     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
46715     +          %end;
46716     +          %else %do;
46717     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
46718     +          %end;
46719     +          output;
46720     +        end;
46721     +      %end;
46722     +      %else %if "&probtype" eq "NONE" %then %do;
46723     +        if last.node then do;
46724     +          output;
46725     +        end;
46726     +      %end;
46727     +    run;
46728     +  %end;
46730     +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
46732     +  %let oldexists=0;
46733     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
46734     +     data old_tree_plot;
46735     +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
46736     +        rename nodecolor=oldnodecolor;
46737     +     run;
46739     +     proc sort data=old_tree_plot;
46740     +        by node;
46741     +     run;
46743     +     %let oldexists=1;
46744     +  %end;
46746     +  data &EM_USER_TREE_PLOT;
46747     +    length textall $800;
46748     +    merge tempoutnodes temptargetused
46750     +    %if &em_intTarget eq Y %then %do;
46751     +      tempinterval
46752     +    %end;
46754     +    %if &em_classTarget eq Y %then %do;
46756     +      %if &validFlag eq N %then %do;
46757     +        tempn(rename=(statvalue=N))
46758     +      %end;
46759     +      %else %do;
46760     +        tempn
46761     +      %end;
46763     +      temppredict tempprob
46765     +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
46766     +        tempprofittext
46767     +      %end;
46768     +    %end;
46769     +    ;
46770     +    by node;
46772     +    /* build nodetext based on user selection */
46773     +    textall="";
46775     +    %if &em_intTarget eq Y %then %do;
46776     +    if tarlevel="INTERVAL" then do;
46777     +      /* Nodeid */
46778     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
46779     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
46780     +      %end;
46782     +      /* Target identifier if multiple targets are used */
46783     +      %if "&multipleTar" eq "Y" %then %do;
46784     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
46785     +      %end;
46787     +      %if &validFlag eq Y %then %do;
46788     +         /* Column labels displayed in validflag eq Y only */
46789     +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
46790     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
46790    !+ noquote ))";
46791     +         %end;
46793     +         /* Average values */
46794     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
46795     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
46796     +         %end;
46798     +         /* RASE */
46799     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
46800     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
46801     +         %end;
46803     +         /* Count */
46804     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
46805     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
46806     +         %end;
46807     +      %end;
46808     +      %else %do;
46809     +         /* Average values */
46810     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
46811     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
46812     +         %end;
46814     +         /* RASE */
46815     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
46816     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
46817     +         %end;
46819     +         /* Count */
46820     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
46821     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
46822     +         %end;
46823     +      %end;
46825     +      /* nodecolor */
46826     +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
46827     +        nodecolor=PREDICTION;
46828     +      %end;
46829     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
46830     +        nodecolor=RASE;
46831     +      %end;
46832     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
46833     +        nodecolor=1;
46834     +      %end;
46836     +    end;
46837     +    %end;
46838     +    %if &em_classTarget eq Y %then %do;
46839     +    if tarlevel^="INTERVAL" then  do;
46841     +      /* Nodeid */
46842     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
46843     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
46844     +      %end;
46845     +      /* Target identifier if multiple targets are used */
46846     +      %if "&multipleTar" eq "Y" %then %do;
46847     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
46848     +      %end;
46850     +      /* Predicted values */
46851     +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
46852     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
46853     +      %end;
46855     +      /* Column labels displayed in validflag eq Y only */
46856     +      %if "&ValidFlag" eq "Y" %then %do;
46857     +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
46858     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
46858    !+ noquote ))";
46859     +        %end;
46860     +      %end;
46862     +      /* Target Values */
46863     +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
46864     +        textall=strip(textall)||"0A"x||strip(probtext);
46865     +      %end;
46867     +      /* include profit or loss for all target levels */
46868     +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
46869     +        textall=strip(textall)||"0A"x||strip(profittext);
46870     +      %end;
46872     +      %if &validFlag eq N %then %do;
46873     +        /* Percent Correct */
46874     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
46875     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
46876     +        %end;
46878     +         /* Count */
46879     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
46880     +          %if "&adjusted" eq "N" %then %do;
46881     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
46882     +          %end;
46883     +          %else %do;
46884     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
46885     +          %end;
46886     +         %end;
46887     +      %end;
46888     +      %else %do;
46889     +        /* Percent Correct */
46890     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
46891     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
46892     +        %end;
46894     +         /* Count */
46895     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
46896     +          %if "&adjusted" eq "N" %then %do;
46897     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
46898     +          %end;
46899     +          %else %do;
46900     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
46901     +          %end;
46902     +         %end;
46903     +      %end;
46905     +      /* nodecolor */
46906     +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
46907     +       %if &multipleTar ne Y %then %do;
46908     +        nodecolor=&predTarget;
46909     +       %end;
46910     +       %else %do;
46911     +         nodecolor=percentcorrect;
46912     +       %end;
46913     +      %end;
46914     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
46915     +        nodecolor=percentcorrect;
46916     +      %end;
46917     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
46918     +        nodecolor=1;
46919     +      %end;
46920     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
46921     +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
46922     +          nodecolor=percentcorrect;
46923     +        %end;
46924     +        %else %do;
46925     +          nodecolor=profitloss;
46926     +        %end;
46927     +      %end;
46929     +    end;
46930     +    %end;
46931     +    %if &em_intTarget eq Y %then %do;
46932     +     drop  PREDICTION  TARGET TARLEVEL
46933     +     %if &ValidFlag eq Y %then %do;
46934     +         VPREDICTION
46935     +     %end;
46936     +     ;
46937     +    %end;
46938     +    %if &em_classTarget eq Y %then %do;
46939     +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
46940     +     %if &ValidFlag eq Y %then %do;
46941     +         VSTATVALUE
46942     +     %end;
46943     +     ;
46944     +    %end;
46946     +  run;
46948     +  /* add leaf index information to plotds - based on primary target only*/
46949     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
46950     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
46951     +      set &EM_USER_OUTSTATS;
46952     +      if ((statname="PROBABILITY"
46953     +      %if &validexist %then %do;
46954     +       or statname="VALID: PROBABILITY"
46955     +      %end;
46956     +      ) AND (CATEGORY="&TARGETEVENT")
46957     +      %if "&multipleTar" eq "Y" %then %do;
46958     +        AND (Target="%EM_TARGET")
46959     +      %end;
46960     +      );
46961     +    run;
46963     +    %if &validexist %then %do;
46964     +      proc sort data=tempprob; by node; run;
46965     +      %let vpredTarget = V%substr(&predTarget, 2);
46966     +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
46967     +         by node;
46968     +         id statname;
46969     +      run;
46970     +    %end;
46971     +  %end;
46972     +  %else %do;
46973     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
46974     +      set &EM_USER_OUTSTATS;
46975     +      if ((statname="PREDICTION"
46976     +      %if &validexist %then %do;
46977     +       or statname="VALID: PREDICTION"
46978     +      %end;
46979     +      )
46980     +      %if "&multipleTar" eq "Y" %then %do;
46981     +        AND (Target="%EM_TARGET")
46982     +      %end;
46983     +      );
46984     +    run;
46985     +    %if &validexist %then %do;
46986     +      proc sort data=tempprob; by node; run;
46987     +      %let vpredTarget = V%substr(&predTarget, 2);
46988     +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
46989     +         by node;
46990     +         id statname;
46991     +      run;
46992     +    %end;
46993     +  %end;
46995     +  proc sort data=tempprob; by node; run;
46996     +  data tempoutnodes;
46997     +    merge tempoutnodes tempprob;
46998     +    by node;
46999     +  run;
47001     +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
47002     +  data tempnodes;
47003     +    retain traintotal validtotal;
47004     +    set tempnodes(where=(leaf ne . ));
47005     +    tprob=round(&predTarget, .01);
47006     +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
47007     +      percevent_train=round(tprob*100, .01);
47008     +    %end;
47009     +    %else %do;
47010     +      percevent_train=tprob;
47011     +    %end;
47013     +    perc_train=round((n/traintotal), .01);
47014     +    if missing(perc_train) then perc_train = round(linkwidth*100, .001);
47016     +    %if &validexist %then %do;
47017     +      %let vpredTarget = V%substr(&predTarget,2);
47018     +      vprob=round(&vpredTarget, .01);
47019     +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
47020     +        percevent_valid=round(vprob*100, .01);
47021     +      %end;
47022     +      %else %do;
47023     +        percevent_valid=vprob;
47024     +      %end;
47025     +      perc_valid=round((vn/validtotal), .01);
47026     +    %end;
47028     +    index=_N_;
47029     +    keep node index tprob perc_train percevent_train
47030     +    %if &validexist %then %do;
47031     +        vprob percevent_valid perc_valid
47032     +    %end;
47033     +    ;
47034     +  run;
47035     +  proc sort data=tempnodes; by node; run;
47036     +  data &EM_USER_TREE_PLOT;
47037     +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
47038     +    by node;
47039     +    if missing(node) then delete;
47040     +    %if &oldexists %then %do;
47041     +      if missing(nodecolor) then nodecolor=oldnodecolor;
47042     +      drop oldnodecolor;
47043     +    %end;
47044     +    abovetext = compbl(abovetext);
47046     +    /* add variable labels */
47047     +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
47048     +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
47049     +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
47050     +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
47051     +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
47052     +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
47054     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
47055     +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
47056     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
47057     +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
47058     +          %end;
47059     +          %else %do;
47060     +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
47061     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
47062     +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
47063     +          %end;
47064     +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
47066     +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
47067     +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
47068     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
47069     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
47070     +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
47071     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
47072     +          %end;
47073     +          %else %do;
47074     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
47075     +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
47076     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
47077     +          %end;
47078     +    ;
47079     +  run;
47081     +  /* delete temporary tables */
47082     +  proc datasets lib=work nolist;
47083     +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
47084     +  run;
47086     +%mend em_tree_makePlotDs;
47090     +%macro em_tree_report;
47092     +   %let validexist=0;
47093     +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
47094     +     %let validexist=1;
47095     +   %end;
47097     +   /* determine if multiple targets will be processed */
47098     +   %let em_tree_multipleTargets=N;
47099     +   %let em_tree_numTarget=1;
47100     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
47101     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
47102     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
47103     +         %let em_tree_multipleTargets=N;
47104     +      %end;
47105     +      %else %do;
47106     +        data _null_;
47107     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
47108     +          if eof then
47109     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
47110     +        run;
47112     +        %if &em_tree_numTarget gt 1 %then %do;
47113     +           %let em_tree_multipleTargets=Y;
47114     +        %end;
47115     +     %end;
47116     +   %end;
47118     +  %if "&em_tree_multipleTargets" eq "N" %then %do;
47120     +   /* variable importance */
47121     +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
47122     +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
47124     +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
47125     +     /* and the columns may not be generated                                                                                 */
47126     +     %let em_tree_cvexists=;
47127     +     %let em_tree_surrexists=.;
47128     +     data _null_;
47129     +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
47130     +       if eof then do ;
47131     +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
47132     +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
47133     +       end;
47134     +     run;
47136     +     data &EM_USER_OUTIMPORT;
47137     +         set &EM_USER_OUTIMPORT;
47139     +         /* format columns based on Precison value specified */
47140     +         format importance 15.&EM_PROPERTY_PRECISION
47141     +              %if &validexist %then %do;
47142     +                vimportance ratio 15.&EM_PROPERTY_PRECISION
47143     +              %end;
47144     +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
47145     +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
47146     +              %end;
47147     +         ;
47148     +         label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
47149     +              LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
47150     +              NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
47151     +              IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
47152     +              NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
47153     +              %if &validexist %then %do;
47154     +                VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
47155     +                RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
47156     +              %end;
47157     +              %if "&EM_TREE_CVEXISTS" ne "" %then %do;
47158     +                VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
47159     +                CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
47160     +                CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
47161     +                RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
47162     +              %end;
47163     +              ;
47164     +     run;
47165     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
47166     +     proc print data=&EM_USER_OUTIMPORT
47167     +     %if "&EM_TREE_SURREXISTS" ne "." %then %do;
47168     +       (where=((nrules>0) OR (nsurrogates>0)))
47169     +     %end;
47170     +     %else %do;
47171     +        (where=(nrules>0))
47172     +     %end;
47173     +     label noobs
47174     +     ;
47175     +     run;
47176     +     title10;
47177     +     %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
47179     +   %end;
47181     +   /* Sequence */
47182     +   %EM_GETNAME(key=OUTSEQ, type=DATA);
47183     +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
47184     +   data _null_ ;
47185     +      set &EM_USER_outseq (obs=2) end=eof ;
47186     +      if eof then do ;
47187     +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
47188     +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
47189     +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
47190     +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
47191     +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
47192     +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
47193     +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
47194     +      end;
47195     +    run;
47197     +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
47198     +      data &EM_USER_OUTSEQ;
47199     +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
47200     +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
47201     +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
47202     +           _XMISC_=_VMISC_
47203     +        %end;
47204     +        %if "&em_tree_aprof" ne "."  %then %do;
47205     +           _XAPROF_=_VAPROF_
47206     +           _XPROF_ = _VPROF_
47207     +        %end;
47208     +        %if "&em_tree_aloss" ne "."  %then %do;
47209     +           _XALOSS_=_VALOSS_
47210     +        %end;
47211     +        %if "&EM_TREE_PRIOR" ne "." %then %do;
47212     +           _XPASE_ = _VPASE_
47213     +           _XPMISC_ = _VPMISC_
47214     +        %end;
47216     +        ));
47217     +     %end;
47218     +     %else %do;
47219     +        set &EM_USER_OUTSEQ;
47220     +     %end;
47222     +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
47223     +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
47224     +            _MISC_   15.&EM_PROPERTY_PRECISION
47225     +         %end;
47226     +         %if "&EM_TREE_PRIOR" ne "." %then %do;
47227     +            _PASE_  15.&EM_PROPERTY_PRECISION
47228     +            _PMISC_ 15.&EM_PROPERTY_PRECISION
47229     +         %end;
47230     +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
47231     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
47232     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
47233     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
47234     +            %end;
47235     +            %if "&EM_TREE_PRIOR" ne "." %then %do;
47236     +              _VPASE_  15.&EM_PROPERTY_PRECISION
47237     +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
47238     +            %end;
47239     +         %end;
47240     +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
47241     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
47242     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
47243     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
47244     +            %end;
47245     +         %end;
47246     +         %if "&em_tree_seq" ne "." %then %do;
47247     +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
47248     +         %end;
47249     +         %if "&em_tree_vseq" ne "." %then %do;
47250     +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
47251     +         %end;
47252     +         %if "&em_tree_aprof" ne "." %then %do;
47253     +           _APROF_ 15.&EM_PROPERTY_PRECISION
47254     +           _PROF_ 15.&EM_PROPERTY_PRECISION
47255     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
47256     +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
47257     +             _VPROF_ 15.&EM_PROPERTY_PRECISION
47258     +           %end;
47259     +         %end;
47260     +         %else %if "&em_tree_aloss" ne "." %then %do;
47261     +           _ALOSS_  15.&EM_PROPERTY_PRECISION
47262     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
47263     +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
47264     +           %end;
47265     +         %end;
47266     +      ;
47267     +    run;
47268     +   %end;
47270     +   /* Observation Based Importance */
47271     +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
47273     +      /* need to check for 0 obs */
47274     +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
47275     +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
47276     +      %let rc=%sysfunc(close(&dsid));
47278     +      %if &onobs %then %do;
47279     +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
47280     +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
47282     +         data &EM_USER_OUTOBSIMP;
47283     +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
47284     +           if _a;
47285     +           by _INPUT1_;
47286     +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
47287     +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
47288     +                     _MISC_ 15.&EM_PROPERTY_PRECISION
47289     +                   %end;
47290     +                   ;
47291     +         run;
47292     +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
47293     +      %end;
47294     +   %end;
47296     +  %end;
47298     +  /* create dataset to support tree diagram and icicle plot */
47299     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
47300     +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
47302     +  /* display tree diagram */
47303     +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
47304     +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
47306     +  /* display icicle diagram */
47307     +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
47308     +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
47310     +  /* Leaf Statistics Plot */
47311     +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
47313     +  /* print leaf information to output window */
47314     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
47316     +     proc sort data=&EM_USER_TREE_PLOT out=t;
47317     +       by descending N;
47318     +     run;
47320     +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
47321     +     %local vn;
47322     +     data _null_;
47323     +       set t (obs=2) end=eof;
47324     +       if eof then do;
47325     +         call symput("vn", strip(put(vn, best.)));
47326     +       end;
47327     +     run;
47329     +     data t;
47330     +       set t;
47331     +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
47332     +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
47333     +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
47334     +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
47335     +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
47336     +       %end;
47337     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
47338     +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
47339     +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
47340     +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
47341     +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
47342     +          %end;
47343     +       %end;
47344     +       ;
47345     +     run;
47347     +     /* determine if rase is found in t */
47348     +    %let dsid=%sysfunc(open(t,i));
47349     +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
47350     +    %let rc=%sysfunc(close(&dsid));
47352     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
47353     +     proc print data=t noobs label;
47354     +       where tprob ne .;
47355     +       var node depth N tprob
47356     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
47357     +         %if "&vn" ne "." %then %do;
47358     +           VN
47359     +         %end;
47360     +         vprob
47361     +       %end;
47362     +       %if &raseexists %then %do;
47363     +            RASE
47364     +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
47365     +              VRASE
47366     +            %end;
47367     +       %end;
47368     +       ;
47369     +     run;
47370     +     title10;
47371     +  %end;
47373     +  /* create plots that are done during training of node */
47374     +  /* display iterative plot, including reference line */
47375     +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
47376     +   /* %if &nleaves eq  %then %do; */
47377     +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
47378     +      data _null_;
47379     +        set &EM_USER_OUTTOPOLOGY end=eof;
47380     +        if eof then do;
47381     +          call symput('nleaves', LEAF);
47382     +        end;
47383     +      run;
47384     +   /* %end; */
47386     +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
47387     +    /*%EM_REPORT(view=1, Y=_ASE_); */
47388     +  %end;
47390     +  /* display leaf statistics */
47391     +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
47393     +  /* stats by node if multiple targets = Y */
47394     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
47395     +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
47396     +    data &EM_USER_OUTSTATS;
47397     +      set &EM_USER_OUTSTATS;
47399     +     * if STATNAME="TARGET" then delete;
47400     +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
47401     +      drop leaf;
47402     +    run;
47403     +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
47405     +  %end;
47406     +  %else %do;
47407     +    /* add outstats and outdescribe to spk but not results */
47408     +    %EM_REPORT(viewtype=, key=OUTSTATS);
47409     +  %end;
47411     +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set EMWS1.Tree_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Variable cvimportance is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data EMWS1.Tree_OUTIMPORT;
MPRINT(EM_TREE_REPORT):   set EMWS1.Tree_OUTIMPORT;
MPRINT(EM_TREE_REPORT):   format importance 15.4 vimportance ratio 15.4 ;
MPRINT(EM_TREE_REPORT):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules" VIMPORTANCE = "Validation Importance" RATIO = "Ratio of Validation to Training
Importance" VIMPORTANCE = "Validation Importance" CVIMPORTANCE = "Relative Importance" CVRULES= "Number of Rules in CV Trees" RATIO = "Ratio of Validation to Training Importance" ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 47 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 47 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10 "Variable Importance";
MPRINT(EM_TREE_REPORT):   proc print data=EMWS1.Tree_OUTIMPORT (where=((nrules>0) OR (nsurrogates>0))) label noobs ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 23 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE (nrules>0) or (nsurrogates>0);
NOTE: The PROCEDURE PRINT printed page 18.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTIMPORT";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "IMPORTANCE";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.76191350853159;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 129 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_ ;
MPRINT(EM_TREE_REPORT):   set EMWS1.Tree_OUTSEQ (obs=2) end=eof ;
MPRINT(EM_TREE_REPORT):   if eof then do ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_vase" , strip(put(_VASE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_seq" , strip(put(_SEQUENCE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_vseq" , strip(put(_VSEQUENCE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_prior" , strip(put(_PASE_, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data EMWS1.Tree_OUTSEQ;
MPRINT(EM_TREE_REPORT):   set EMWS1.Tree_OUTSEQ;
MPRINT(EM_TREE_REPORT):   format _ASE_ _ASSESS_ _MAX_ _SSE_ _RASE_ 15.4
MPRINT(EM_TREE_REPORT):   _MISC_ 15.4 _PASE_ 15.4 _PMISC_ 15.4 _VASE_ _VASSESS_ _VMAX_ _VSSE_ _VRASE_ 15.4
MPRINT(EM_TREE_REPORT):   _VMISC_ 15.4 _APROF_ 15.4 _PROF_ 15.4 _VAPROF_ 15.4 _VPROF_ 15.4 ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 22 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 22 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Ids_TARGET_B_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET_B_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Ids_TARGET_B_DM(where=(_TYPE_="PREDICTED" AND LEVEL="1"));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('predTarget', strip(VARIABLE));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('predLvl', strip(LEVEL));
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET_B_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext2;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtextlbl;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext2;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   merge belowtext belowtext2(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then belowtext=belowtextlbl;
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 10 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 10 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 10 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 10 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   set abovetext(rename=(node=parent));
MPRINT(EM_TREE_MAKEPLOTDS):   by parent numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   retain abovetext tempstring flag branch origval origchar ;
MPRINT(EM_TREE_MAKEPLOTDS):   length abovetext tempstring origchar $45;
MPRINT(EM_TREE_MAKEPLOTDS):   if STAT in ("INTERVAL", "ORDINAL") then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = "< "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = "< "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   origchar = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.parent AND last.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value,0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_TREE_MAKEPLOTDS):   origchar = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   origval = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   flag = 0;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.numeric_value AND last.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if flag=0 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   length = length(strip(tempstring));
MPRINT(EM_TREE_MAKEPLOTDS):   if length < 32 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(tempstring);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(abovetext)||", ...";
MPRINT(EM_TREE_MAKEPLOTDS):   flag = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if flag=0 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   length = length(strip(tempstring));
MPRINT(EM_TREE_MAKEPLOTDS):   if length < 32 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(tempstring);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(abovetext)||", ...";
MPRINT(EM_TREE_MAKEPLOTDS):   flag=1;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   keep parent branch abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      169:103   218:136   261:102   261:125   293:104   327:104   369:103   369:126   412:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      428:99
NOTE: There were 10 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempmissing;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree_OUTRULES;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
MPRINT(EM_TREE_MAKEPLOTDS):   rename node=parent numeric_value=branch character_value=misschar;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 409 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 12 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 12 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempmissing;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=EMWS1.Tree_OUTNODES out=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   length traintotal validtotal 8;
MPRINT(EM_TREE_MAKEPLOTDS):   retain traintotal validtotal;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ^MISSING(abovetext) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= strip(abovetext)||" Or Missing";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = " Missing Values Only";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   if MISSING(abovetext) then abovetext="Non-Missing Values";
MPRINT(EM_TREE_MAKEPLOTDS):   if node=1 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   traintotal = N;
MPRINT(EM_TREE_MAKEPLOTDS):   validtotal=VN;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   drop role rank stat misschar belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 12 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_ ;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree_OUTSTATS(where=(STATNAME="NPRIORS")) end=eof ;
MPRINT(EM_TREE_MAKEPLOTDS):   if eof then do ;
MPRINT(EM_TREE_MAKEPLOTDS):   call symput("npriors" , strip(put(_N_,best.))) ;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temptarmeta;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree_VariableSet(where=(ROLE='TARGET' AND LEVEL^='ORDINAL' AND USE in ('D', 'Y') ));
MPRINT(EM_TREE_MAKEPLOTDS):   length TARGET $32;
MPRINT(EM_TREE_MAKEPLOTDS):   Target=name;
MPRINT(EM_TREE_MAKEPLOTDS):   keep target level;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temptargetused;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree_OUTSTATS;
MPRINT(EM_TREE_MAKEPLOTDS):   length target $32 tarlevel $10;
MPRINT(EM_TREE_MAKEPLOTDS):   target=
MPRINT(EM_TREE_MAKEPLOTDS):  "TARGET_B";
MPRINT(EM_TREE_MAKEPLOTDS):   tarlevel=
MPRINT(EM_TREE_MAKEPLOTDS):  "BINARY";
MPRINT(EM_TREE_MAKEPLOTDS):   keep node target tarlevel;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 221 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 221 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=temptargetused nodupkey;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 221 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 208 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 13 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=EMWS1.Tree_OUTSTATS out=tempoutstats;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 221 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 221 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=temptargetused;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempinterval tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutstats temptargetused( rename=(target=targetused));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if tarlevel="INTERVAL" then output tempinterval;
MPRINT(EM_TREE_MAKEPLOTDS):   else output tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 221 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 13 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 221 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_intNobs from tempinterval;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_classNobs from tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 221 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 221 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET ) tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY )
temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
MPRINT(EM_TREE_MAKEPLOTDS):   set tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="PREDICTION" then output temppredict;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="PROBABILITY" then output tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="VALID: PROBABILITY" then output tempvprob;
MPRINT(EM_TREE_MAKEPLOTDS):   else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
MPRINT(EM_TREE_MAKEPLOTDS):   else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 221 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 26 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 13 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 26 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 26 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 52 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_profitflag from tempprofit;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_lossflag from temploss;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc transpose data=tempn out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   id statname;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 26 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 13 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc transpose data=tempprofit out=tempprofit;
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   id statname ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 52 observations read from the data set WORK.TEMPPROFIT.
NOTE: The data set WORK.TEMPPROFIT has 26 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempprob tempvprob(rename=(statvalue=vstatvalue));
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: There were 26 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 26 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temppredict;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempprob temppredict(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then do;
MPRINT(EM_TREE_MAKEPLOTDS):   percentCorrect = statvalue;
MPRINT(EM_TREE_MAKEPLOTDS):   vpercentCorrect= vstatvalue;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   label percentCorrect= "Percent Correct" vpercentCorrect= "Valid Percent Correct" ;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(percentCorrect) then delete;
MPRINT(EM_TREE_MAKEPLOTDS):   drop target;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: There were 13 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprofittext(keep= node profittext profitloss);
MPRINT(EM_TREE_MAKEPLOTDS):   length profittext $800 profitloss 8.;
MPRINT(EM_TREE_MAKEPLOTDS):   retain profittext profitloss;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempprob tempprofit ;
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   label profitloss= "Profit/Loss";
MPRINT(EM_TREE_MAKEPLOTDS):   if strip(CATEGORY) = "1" then do;
MPRINT(EM_TREE_MAKEPLOTDS):   profitloss=ALTERNATIVE_PROFIT;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Variable profittext is uninitialized.
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: There were 26 observations read from the data set WORK.TEMPPROFIT.
NOTE: The data set WORK.TEMPPROFITTEXT has 13 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob(keep= node probtext);
MPRINT(EM_TREE_MAKEPLOTDS):   length probtext $800;
MPRINT(EM_TREE_MAKEPLOTDS):   retain probtext;
MPRINT(EM_TREE_MAKEPLOTDS):   set tempprob ;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.node then do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.node then do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes out=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data EMWS1.Tree_TREE_PLOT;
MPRINT(EM_TREE_MAKEPLOTDS):   length textall $800;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes temptargetused tempn temppredict tempprob tempprofittext ;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   textall="";
MPRINT(EM_TREE_MAKEPLOTDS):   if tarlevel^="INTERVAL" then do;
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||"Node Id: "||"09"x||strip(Node);
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||"Statistic "||"09"x||"Train" ||"09"x|| "Validation";
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||strip(probtext);
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||" Count: "||"09"x||strip(put(NPRIORS,15.4))||"09"x||strip(put(VNPRIORS,15.4));
MPRINT(EM_TREE_MAKEPLOTDS):   nodecolor=percentcorrect;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   drop CATEGORY PROBTEXT TARGET TARLEVEL STATVALUE VSTATVALUE ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1210:196
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 13 observations read from the data set WORK.TEMPN.
NOTE: There were 13 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 13 observations read from the data set WORK.TEMPPROB.
NOTE: There were 13 observations read from the data set WORK.TEMPPROFITTEXT.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 13 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob(keep=node statname statvalue rename=(statvalue=P_TARGET_B1));
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree_OUTSTATS;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((statname="PROBABILITY" or statname="VALID: PROBABILITY" ) AND (CATEGORY="1") );
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 221 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 26 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=P_TARGET_B1 VALID__PROBABILITY=V_TARGET_B1));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   id statname;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 13 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 13 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 13 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes out=tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by descending P_TARGET_B1;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 13 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   retain traintotal validtotal;
MPRINT(EM_TREE_MAKEPLOTDS):   set tempnodes(where=(leaf ne . ));
MPRINT(EM_TREE_MAKEPLOTDS):   tprob=round(P_TARGET_B1, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   percevent_train=round(tprob*100, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   perc_train=round((n/traintotal), .01);
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(perc_train) then perc_train = round(linkwidth*100, .001);
MPRINT(EM_TREE_MAKEPLOTDS):   vprob=round(V_TARGET_B1, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   percevent_valid=round(vprob*100, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   perc_valid=round((vn/validtotal), .01);
MPRINT(EM_TREE_MAKEPLOTDS):   index=_N_;
MPRINT(EM_TREE_MAKEPLOTDS):   keep node index tprob perc_train percevent_train vprob percevent_valid perc_valid ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 7 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 7 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 7 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data EMWS1.Tree_TREE_PLOT;
MPRINT(EM_TREE_MAKEPLOTDS):   merge EMWS1.Tree_TREE_PLOT tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(node) then delete;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = compbl(abovetext);
MPRINT(EM_TREE_MAKEPLOTDS):   label textall = "All Text" parent = "Parent Id" node = "Node Id" abovetext = "Above Text" traintotal = "Train Total" nodecolor =
MPRINT(EM_TREE_MAKEPLOTDS):   "Node Color" tprob = "Training Percent 1" percevent_train = "Event Percentage" perc_train = "Percent Cases" index = "Index" validtotal = "Valid Total" VN =
MPRINT(EM_TREE_MAKEPLOTDS):   "Valid: Number of Observations" vprob = "Validation Percent 1" perc_valid = "Valid: Percent Cases" percevent_valid = "Valid: Event Percentage" ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 7 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 13 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEPLOTDS):   delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
MPRINT(EM_TREE_REPORT):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DTree";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "TREE";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
The SAS System
 
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "TEXTALL";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "PARENT";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "NODETEXT";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "ABOVETEXT";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "BELOWTEXT";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "NODECOLOR";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "LINKWIDTH";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.86265434178647;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 129 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 258 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "Icicle";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ICICLE";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "TEXTALL";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "PARENT";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "NODETEXT";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "NODECOLOR";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.26446243574119;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 258 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 387 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "AREABAR";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "VARWIDTH";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "PERCEVENT_TRAIN";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "PERC_TRAIN";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.18561373007745;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 387 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 517 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   proc sort data=EMWS1.Tree_TREE_PLOT out=t;
MPRINT(EM_TREE_REPORT):   by descending N;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 13 observations and 39 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set t (obs=2) end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do;
MPRINT(EM_TREE_REPORT):   call symput("vn", strip(put(vn, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data t;
MPRINT(EM_TREE_REPORT):   set t;
MPRINT(EM_TREE_REPORT):   label N= "Training Observations" DEPTH=
MPRINT(EM_TREE_REPORT):   "Depth" ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 13 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 13 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10 "Tree Leaf Report";
MPRINT(EM_TREE_REPORT):   proc print data=t noobs label;
MPRINT(EM_TREE_REPORT):   where tprob ne .;
MPRINT(EM_TREE_REPORT):   var node depth N tprob ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 7 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 19.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set EMWS1.Tree_OUTTOPOLOGY end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do;
MPRINT(EM_TREE_REPORT):   call symput('nleaves', LEAF);
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      305:141
NOTE: There were 13 observations read from the data set EMWS1.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTSEQ";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "ITERATIONPLOT";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "SUBTREE";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_NW_";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "7";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48937483201239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 517 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 646 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "RESPONSEBAR";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "INDEX ne .";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "LEAFSTATS";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "INDEX";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "tprob";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "vprob";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 646 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 776 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTSTATS";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7758873350806;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 776 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 905 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47412
47413      *------------------------------------------------------------*;
47414      * End REPORT: Tree;
47415      *------------------------------------------------------------*;
 
47416      /* Reset EM Options */
47417      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
47418      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
47419      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
47420      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
47421      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
47422      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 905 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 905 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47423      proc sort data=EMWS1.Repl_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Repl_CMeta_TRAIN out=WORK.SUBSETINMETA;
47424      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
47425      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set EMWS1.REPL_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 53 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47426      proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
47427      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
47428      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 53 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47429      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
47430      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
47431      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
47432      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 53 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 53 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47433      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
47434      set EMWS1.Tree_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_CMeta_TRAIN;
47435      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
47436      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47437      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
47438      set EMWS1.Tree_TRAIN(keep=
47439      BP_TARGET_B
47440      CP_TARGET_B
47441      D_TARGET_B
47442      EP_TARGET_B
47443      F_TARGET_B
47444      I_TARGET_B
47445      P_TARGET_B0
47446      P_TARGET_B1
47447      Q_TARGET_B0
47448      Q_TARGET_B1
47449      R_TARGET_B0
47450      R_TARGET_B1
47451      U_TARGET_B
47452      V_TARGET_B0
47453      V_TARGET_B1
47454      _WARN_
47455      TARGET_B
47456      );
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_TRAIN(keep= BP_TARGET_B CP_TARGET_B D_TARGET_B EP_TARGET_B F_TARGET_B I_TARGET_B P_TARGET_B0 P_TARGET_B1 Q_TARGET_B0 Q_TARGET_B1 R_TARGET_B0 R_TARGET_B1 U_TARGET_B V_TARGET_B0 V_TARGET_B1 _WARN_ TARGET_B );
47457      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 10654 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
 
NOTE: There were 10654 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10654 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 10654 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.18 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_TARGET_B*F_TARGET_B / out = WORK.Tree_24QFK3Z nocol norow outpct;
MPRINT(EM_DIAGRAM):   table D_TARGET_B*F_TARGET_B / out = WORK.Tree_1PSUXUY nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_24QFK3Z;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree_24QFK3Z(rename=(F_TARGET_B=FROM I_TARGET_B=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "TARGET_B";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "TARGET_B" then TARGETLABEL = 'Target Variable Indicates for Response to 97NK Mailing';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc freq data=WORK.Tree_24QFK3Z;
MPRINT(EM_DIAGRAM):   table FROM/out=_prioradjust1(KEEP=FROM PERCENT RENAME=(PERCENT=DATAPERCENT));
MPRINT(EM_DIAGRAM):   weight PERCENT;
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_prioradjust1;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   DATA _prioradjust1;
MPRINT(EM_DIAGRAM):   set _prioradjust1;
MPRINT(EM_DIAGRAM):   DATAPERCENT=0.01*DATAPERCENT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids_TARGET_B_DD out=_prior(keep=decprior);
MPRINT(EM_DIAGRAM):   by TARGET_B;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   DATA _prioradjust1;
MPRINT(EM_DIAGRAM):   merge _prioradjust1 _prior;
MPRINT(EM_DIAGRAM):   ADJUSTMENT = DECPRIOR/DATAPERCENT;
MPRINT(EM_DIAGRAM):   keep FROM ADJUSTMENT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.Tree_24QFK3Z;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Tree_24QFK3Z;
MPRINT(EM_DIAGRAM):   merge WORK.Tree_24QFK3Z _prioradjust1;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   ADJUSTEDPERCENT = PERCENT*ADJUSTMENT;
MPRINT(EM_DIAGRAM):   label ADJUSTEDPERCENT = "Adjusted Percent of Predict/Decision Variable";
MPRINT(EM_DIAGRAM):   drop ADJUSTMENT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Tree_24QFK3Z;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Tree_24QFK3Z;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_1PSUXUY;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 dataRole target $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $9;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree_1PSUXUY(rename=(F_TARGET_B=FROM D_TARGET_B=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'DECISION' DATAROLE "TRAIN" TARGET "TARGET_B";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "TARGET_B" then TARGETLABEL = 'Target Variable Indicates for Response to 97NK Mailing';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.Tree_1PSUXUY;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Tree_1PSUXUY;
MPRINT(EM_DIAGRAM):   merge WORK.Tree_1PSUXUY _prioradjust1;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   AdjustedPercent = Percent*Adjustment;
MPRINT(EM_DIAGRAM):   label ADJUSTEDPERCENT = "Adjusted Percent of Predict/Decision Variable";
MPRINT(EM_DIAGRAM):   drop Adjustment;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMCLASSIFICATION WORK.Tree_1PSUXUY;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "TARGET_B" then TARGETLABEL = 'Target Variable Indicates for Response to 97NK Mailing';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_TARGET_B_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_TARGET_B_DD;
MPRINT(EM_DIAGRAM):   where strip(TARGET_B)=strip(symget('ASSMT_EVENT'));
MPRINT(EM_DIAGRAM):   call symput('DECPRIOR', strip(put(DECPRIOR, best.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_TARGET_B") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_TARGET_B") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_TARGET_B D_TARGET_B ;
 
MPRINT(EM_ASSESS):   VAR P_TARGET_B1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_TARGET_B") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "D_TARGET_B" > " " AND UPCASE(NAME) = UPCASE("D_TARGET_B") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_TARGET_B1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_TARGET_B P_TARGET_B1 EP_TARGET_B CP_TARGET_B BP_TARGET_B _tmpfreqvar_ D_TARGET_B );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_TARGET_B ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_TARGET_B1 D_TARGET_B NTARGET _tmpfreqvar_ EP_TARGET_B CP_TARGET_B BP_TARGET_B WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_TARGET_B1 D_TARGET_B ;
MPRINT(EM_ASSESS):   VAR NTARGET EP_TARGET_B CP_TARGET_B BP_TARGET_B ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANEPTARGET _MEANCPTARGET _MEANBPTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP MNEP_TARGET MINEP_TARGET MAXEP_TARGET TOTALEP_TARGET CUMULATIVEEP CUMULATIVETOTALEP MNCP_TARGET MINCP_TARGET MAXCP_TARGET CP_TARGET TOTALCP_TARGET CUMULATIVECP
CUMULATIVETOTALCP BASECP BASECUMTOTALCP BASECUMULATIVECP BASETOTALCP BESTTOTALBP BESTCUMULATIVEBP BESTCUMTOTALBP BESTBP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP
PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS NUMDECISION1 NUMDECISION2 SCR_MNPROB SCR_MINPROB SCR_MAXPROB SCR_EPMEAN SCR_EPMIN SCR_EPMAX SCR_CPMEAN SCR_CPMIN SCR_CPMAX ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 CUMPROFIT1 - CUMPROFIT20 0 CUMBPROFIT1 - CUMBPROFIT20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 FALSEPOS1 -
FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.05 _NEVENTS 532.7 _NNONEVENTS 10121.3 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   RETAIN EPTARGET1 - EPTARGET20 0 MINEPTARGET1 - MINEPTARGET20 0 MAXEPTARGET1 - MAXEPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY EPTARGET (20) EPTARGET1 - EPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINEPTARGET (20) MINEPTARGET1 - MINEPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXEPTARGET (20) MAXEPTARGET1 - MAXEPTARGET20;
MPRINT(EM_ASSESS):   DROP EPTARGET1 - EPTARGET20 _MEANEPTARGET MINEPTARGET1 - MINEPTARGET20 MAXEPTARGET1 - MAXEPTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN CPTARGET1 - CPTARGET20 0 MINCPTARGET1 - MINCPTARGET20 0 MAXCPTARGET1 - MAXCPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY CPTARGET (20) CPTARGET1 - CPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINCPTARGET (20) MINCPTARGET1 - MINCPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXCPTARGET (20) MAXCPTARGET1 - MAXCPTARGET20;
MPRINT(EM_ASSESS):   DROP CPTARGET1 - CPTARGET20 _MEANCPTARGET MINCPTARGET1 - MINCPTARGET20 MAXCPTARGET1 - MAXCPTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN BPTARGET1 - BPTARGET20 0 MINBPTARGET1 - MINBPTARGET20 0 MAXBPTARGET1 - MAXBPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY BPTARGET (20) BPTARGET1 - BPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINBPTARGET (20) MINBPTARGET1 - MINBPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXBPTARGET (20) MAXBPTARGET1 - MAXBPTARGET20;
MPRINT(EM_ASSESS):   DROP BPTARGET1 - BPTARGET20 _MEANBPTARGET MINBPTARGET1 - MINBPTARGET20 MAXBPTARGET1 - MAXBPTARGET20 ;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1 SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100 SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   RETAIN D_TARGET1_1 - D_TARGET1_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET1 (100) D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   DROP D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   RETAIN D_TARGET2_1 - D_TARGET2_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET2 (100) D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   DROP D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN SCR_EPMEAN1- SCR_EPMEAN100 0 SCR_EPMIN1 - SCR_EPMIN100 1 SCR_EPMAX1 - SCR_EPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMEANS (100) SCR_EPMEAN1 - SCR_EPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMINS (100) SCR_EPMIN1 - SCR_EPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMAXS (100) SCR_EPMAX1 - SCR_EPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_EPMEAN1 - SCR_EPMEAN100 SCR_EPMIN1 - SCR_EPMIN100 SCR_EPMAX1 - SCR_EPMAX100;
MPRINT(EM_ASSESS):   RETAIN SCR_CPMEAN1- SCR_CPMEAN100 0 SCR_CPMIN1 - SCR_CPMIN100 1 SCR_CPMAX1 - SCR_CPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMEANS (100) SCR_CPMEAN1 - SCR_CPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMINS (100) SCR_CPMIN1 - SCR_CPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMAXS (100) SCR_CPMAX1 - SCR_CPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_CPMEAN1 - SCR_CPMEAN100 SCR_CPMIN1 - SCR_CPMIN100 SCR_CPMAX1 - SCR_CPMAX100;
MPRINT(EM_ASSESS):   RETAIN SCR_BPMEAN1- SCR_BPMEAN100 0 SCR_BPMIN1 - SCR_BPMIN100 1 SCR_BPMAX1 - SCR_BPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMEANS (100) SCR_BPMEAN1 - SCR_BPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMINS (100) SCR_BPMIN1 - SCR_BPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMAXS (100) SCR_BPMAX1 - SCR_BPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_BPMEAN1 - SCR_BPMEAN100 SCR_BPMIN1 - SCR_BPMIN100 SCR_BPMAX1 - SCR_BPMAX100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
 
MPRINT(EM_ASSESS):   DROP WEIGHTEDORIG1 WEIGHTEDORIG0 ORIG0 ORIG1;
MPRINT(EM_ASSESS):   ORIG1 = _MEANTARGET * _FREQ_;
MPRINT(EM_ASSESS):   ORIG0 = (1 - _MEANTARGET) * _FREQ_;
MPRINT(EM_ASSESS):   WEIGHTEDORIG1 = ORIG1 * 0.05 / 0.2500469307 ;
MPRINT(EM_ASSESS):   WEIGHTEDORIG0 = ORIG0 * (1 - 0.05) / 0.7499530693 ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = SUM (WEIGHTEDORIG0 , WEIGHTEDORIG1);
MPRINT(EM_ASSESS):   IF SUMWEIGHTS > . THEN _MEANTARGET = WEIGHTEDORIG1 / SUMWEIGHTS;
MPRINT(EM_ASSESS):   ELSE _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   _FREQ_ = SUMWEIGHTS;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 10654));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_TARGET_B1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_TARGET_B1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_TARGET_B1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   EPTARGET (DECILE) = SUM ( EPTARGET (DECILE) , _MEANEPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINEPTARGET (DECILE) = MIN (MINEPTARGET (DECILE), _MEANEPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXEPTARGET (DECILE) = MAX (MAXEPTARGET (DECILE), _MEANEPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   CPTARGET (DECILE) = SUM ( CPTARGET (DECILE) , _MEANCPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINCPTARGET (DECILE) = MIN (MINCPTARGET (DECILE), _MEANCPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXCPTARGET (DECILE) = MAX (MAXCPTARGET (DECILE), _MEANCPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   BPTARGET (DECILE) = SUM ( BPTARGET (DECILE) , _MEANBPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINBPTARGET (DECILE) = MIN (MINBPTARGET (DECILE), _MEANBPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXBPTARGET (DECILE) = MAX (MAXBPTARGET (DECILE), _MEANBPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_TARGET_B1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_TARGET_B1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_TARGET_B1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_TARGET_B1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   D_TARGET_B = TRANSLATE (D_TARGET_B, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   IF D_TARGET_B = "0" THEN D_TARGET1 ( SLOT ) = SUM (D_TARGET1 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   IF D_TARGET_B = "1" THEN D_TARGET2 ( SLOT ) = SUM (D_TARGET2 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_TARGET_B1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_TARGET_B1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_TARGET_B1 );
MPRINT(EM_ASSESS):   SCR_EPMEANS ( SLOT ) = MEAN (SCR_EPMEANS (SLOT), _MEANEPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_EPMINS ( SLOT ) = MIN (SCR_EPMINS (SLOT), _MEANEPTARGET );
MPRINT(EM_ASSESS):   SCR_EPMAXS ( SLOT ) = MAX (SCR_EPMAXS (SLOT), _MEANEPTARGET );
MPRINT(EM_ASSESS):   SCR_CPMEANS ( SLOT ) = MEAN (SCR_CPMEANS (SLOT), _MEANCPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_CPMINS ( SLOT ) = MIN (SCR_CPMINS (SLOT), _MEANCPTARGET );
MPRINT(EM_ASSESS):   SCR_CPMAXS ( SLOT ) = MAX (SCR_CPMAXS (SLOT), _MEANCPTARGET );
MPRINT(EM_ASSESS):   SCR_BPMEANS ( SLOT ) = MEAN (SCR_BPMEANS (SLOT), _MEANBPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_BPMINS ( SLOT ) = MIN (SCR_BPMINS (SLOT), _MEANBPTARGET );
MPRINT(EM_ASSESS):   SCR_BPMAXS ( SLOT ) = MAX (SCR_BPMAXS (SLOT), _MEANBPTARGET );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0218140868 OVLMAX 0.1213605926 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   SUMEP = SUM (OF EPTARGET1 - EPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMEP ;
MPRINT(EM_ASSESS):   SUMCP = SUM (OF CPTARGET1 - CPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMCP ;
MPRINT(EM_ASSESS):   SUMBP = SUM (OF BPTARGET1 - BPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMBP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 10654 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 10654)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 10654 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 10654 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   TOTALEP_TARGET = EPTARGET (GROUP);
MPRINT(EM_ASSESS):   EP_TARGET = TOTALEP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALEP + EPTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVEEP = CUMULATIVETOTALEP / C_NUMOBS;
MPRINT(EM_ASSESS):   MINEP_TARGET = MINEPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXEP_TARGET = MAXEPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNEP_TARGET = EP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXEP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXEP_TARGET + MAXEP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMEP >= C_MAXEP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTEP = MAXEP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALEP = BESTEP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTEP = MIN (MAXEP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTEP < 0 THEN BESTEP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALEP = BESTEP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALEP + BESTTOTALEP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMEP - C_MAXEP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEEP = BESTCUMTOTALEP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEEP = SUMEP / 10654;
MPRINT(EM_ASSESS):   BASECUMULATIVEEP + BASEEP;
MPRINT(EM_ASSESS):   BASETOTALEP = SUMEP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALEP + BASETOTALEP;
MPRINT(EM_ASSESS):   TOTALCP_TARGET = CPTARGET (GROUP);
MPRINT(EM_ASSESS):   CP_TARGET = TOTALCP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALCP + CPTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVECP = CUMULATIVETOTALCP / C_NUMOBS;
MPRINT(EM_ASSESS):   MINCP_TARGET = MINCPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXCP_TARGET = MAXCPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNCP_TARGET = CP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXCP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXCP_TARGET + MAXCP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMCP >= C_MAXCP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTCP = MAXCP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALCP = BESTCP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTCP = MIN (MAXCP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTCP < 0 THEN BESTCP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALCP = BESTCP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALCP + BESTTOTALCP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMCP - C_MAXCP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVECP = BESTCUMTOTALCP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASECP = SUMCP / 10654;
MPRINT(EM_ASSESS):   BASECUMULATIVECP + BASECP;
MPRINT(EM_ASSESS):   BASETOTALCP = SUMCP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALCP + BASETOTALCP;
MPRINT(EM_ASSESS):   TOTALBP_TARGET = BPTARGET (GROUP);
MPRINT(EM_ASSESS):   BP_TARGET = TOTALBP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   MINBP_TARGET = MINBPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXBP_TARGET = MAXBPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNBP_TARGET = BP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXBP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXBP_TARGET + MAXBP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMBP >= C_MAXBP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTBP = MAXBP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALBP = BESTBP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTBP = MIN (MAXBP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTBP < 0 THEN BESTBP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALBP = BESTBP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALBP + BESTTOTALBP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMBP - C_MAXBP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEBP = BESTCUMTOTALBP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEBP = SUMBP / 10654;
MPRINT(EM_ASSESS):   BASECUMULATIVEBP + BASEBP;
MPRINT(EM_ASSESS):   BASETOTALBP = SUMBP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALBP + BASETOTALBP;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_96 - D_TARGET1_100);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_96 - D_TARGET2_100);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN96 - SCR_EPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN96 - SCR_EPMIN100);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX96 - SCR_EPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN96 - SCR_CPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN96 - SCR_CPMIN100);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX96 - SCR_CPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN96 - SCR_BPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN96 - SCR_BPMIN100);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX96 - SCR_BPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_91 - D_TARGET1_95);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_91 - D_TARGET2_95);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN91 - SCR_EPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN91 - SCR_EPMIN95);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX91 - SCR_EPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN91 - SCR_CPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN91 - SCR_CPMIN95);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX91 - SCR_CPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN91 - SCR_BPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN91 - SCR_BPMIN95);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX91 - SCR_BPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_86 - D_TARGET1_90);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_86 - D_TARGET2_90);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN86 - SCR_EPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN86 - SCR_EPMIN90);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX86 - SCR_EPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN86 - SCR_CPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN86 - SCR_CPMIN90);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX86 - SCR_CPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN86 - SCR_BPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN86 - SCR_BPMIN90);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX86 - SCR_BPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_81 - D_TARGET1_85);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_81 - D_TARGET2_85);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN81 - SCR_EPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN81 - SCR_EPMIN85);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX81 - SCR_EPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN81 - SCR_CPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN81 - SCR_CPMIN85);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX81 - SCR_CPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN81 - SCR_BPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN81 - SCR_BPMIN85);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX81 - SCR_BPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_76 - D_TARGET1_80);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_76 - D_TARGET2_80);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN76 - SCR_EPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN76 - SCR_EPMIN80);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX76 - SCR_EPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN76 - SCR_CPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN76 - SCR_CPMIN80);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX76 - SCR_CPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN76 - SCR_BPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN76 - SCR_BPMIN80);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX76 - SCR_BPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_71 - D_TARGET1_75);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_71 - D_TARGET2_75);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN71 - SCR_EPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN71 - SCR_EPMIN75);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX71 - SCR_EPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN71 - SCR_CPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN71 - SCR_CPMIN75);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX71 - SCR_CPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN71 - SCR_BPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN71 - SCR_BPMIN75);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX71 - SCR_BPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_66 - D_TARGET1_70);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_66 - D_TARGET2_70);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN66 - SCR_EPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN66 - SCR_EPMIN70);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX66 - SCR_EPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN66 - SCR_CPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN66 - SCR_CPMIN70);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX66 - SCR_CPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN66 - SCR_BPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN66 - SCR_BPMIN70);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX66 - SCR_BPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_61 - D_TARGET1_65);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_61 - D_TARGET2_65);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN61 - SCR_EPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN61 - SCR_EPMIN65);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX61 - SCR_EPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN61 - SCR_CPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN61 - SCR_CPMIN65);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX61 - SCR_CPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN61 - SCR_BPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN61 - SCR_BPMIN65);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX61 - SCR_BPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_56 - D_TARGET1_60);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_56 - D_TARGET2_60);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN56 - SCR_EPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN56 - SCR_EPMIN60);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX56 - SCR_EPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN56 - SCR_CPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN56 - SCR_CPMIN60);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX56 - SCR_CPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN56 - SCR_BPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN56 - SCR_BPMIN60);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX56 - SCR_BPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_51 - D_TARGET1_55);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_51 - D_TARGET2_55);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN51 - SCR_EPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN51 - SCR_EPMIN55);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX51 - SCR_EPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN51 - SCR_CPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN51 - SCR_CPMIN55);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX51 - SCR_CPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN51 - SCR_BPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN51 - SCR_BPMIN55);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX51 - SCR_BPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_46 - D_TARGET1_50);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_46 - D_TARGET2_50);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN46 - SCR_EPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN46 - SCR_EPMIN50);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX46 - SCR_EPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN46 - SCR_CPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN46 - SCR_CPMIN50);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX46 - SCR_CPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN46 - SCR_BPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN46 - SCR_BPMIN50);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX46 - SCR_BPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_41 - D_TARGET1_45);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_41 - D_TARGET2_45);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN41 - SCR_EPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN41 - SCR_EPMIN45);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX41 - SCR_EPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN41 - SCR_CPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN41 - SCR_CPMIN45);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX41 - SCR_CPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN41 - SCR_BPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN41 - SCR_BPMIN45);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX41 - SCR_BPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_36 - D_TARGET1_40);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_36 - D_TARGET2_40);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN36 - SCR_EPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN36 - SCR_EPMIN40);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX36 - SCR_EPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN36 - SCR_CPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN36 - SCR_CPMIN40);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX36 - SCR_CPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN36 - SCR_BPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN36 - SCR_BPMIN40);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX36 - SCR_BPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_31 - D_TARGET1_35);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_31 - D_TARGET2_35);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN31 - SCR_EPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN31 - SCR_EPMIN35);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX31 - SCR_EPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN31 - SCR_CPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN31 - SCR_CPMIN35);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX31 - SCR_CPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN31 - SCR_BPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN31 - SCR_BPMIN35);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX31 - SCR_BPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_26 - D_TARGET1_30);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_26 - D_TARGET2_30);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN26 - SCR_EPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN26 - SCR_EPMIN30);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX26 - SCR_EPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN26 - SCR_CPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN26 - SCR_CPMIN30);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX26 - SCR_CPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN26 - SCR_BPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN26 - SCR_BPMIN30);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX26 - SCR_BPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_21 - D_TARGET1_25);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_21 - D_TARGET2_25);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN21 - SCR_EPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN21 - SCR_EPMIN25);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX21 - SCR_EPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN21 - SCR_CPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN21 - SCR_CPMIN25);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX21 - SCR_CPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN21 - SCR_BPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN21 - SCR_BPMIN25);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX21 - SCR_BPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_16 - D_TARGET1_20);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_16 - D_TARGET2_20);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN16 - SCR_EPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN16 - SCR_EPMIN20);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX16 - SCR_EPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN16 - SCR_CPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN16 - SCR_CPMIN20);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX16 - SCR_CPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN16 - SCR_BPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN16 - SCR_BPMIN20);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX16 - SCR_BPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_11 - D_TARGET1_15);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_11 - D_TARGET2_15);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN11 - SCR_EPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN11 - SCR_EPMIN15);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX11 - SCR_EPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN11 - SCR_CPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN11 - SCR_CPMIN15);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX11 - SCR_CPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN11 - SCR_BPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN11 - SCR_BPMIN15);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX11 - SCR_BPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_6 - D_TARGET1_10);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_6 - D_TARGET2_10);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN6 - SCR_EPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN6 - SCR_EPMIN10);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX6 - SCR_EPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN6 - SCR_CPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN6 - SCR_CPMIN10);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX6 - SCR_CPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN6 - SCR_BPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN6 - SCR_BPMIN10);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX6 - SCR_BPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_1 - D_TARGET1_5);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_1 - D_TARGET2_5);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN1 - SCR_EPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN1 - SCR_EPMIN5);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX1 - SCR_EPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN1 - SCR_CPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN1 - SCR_CPMIN5);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX1 - SCR_CPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN1 - SCR_BPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN1 - SCR_BPMIN5);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX1 - SCR_BPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS SCR_EPMEAN =
_MEANEP_ SCR_EPMAX = _MAXEP_ SCR_EPMIN = _MINEP_ SCR_CPMEAN = _MEANCP_ SCR_CPMAX = _MAXCP_
SCR_CPMIN = _MINCP_ NUMDECISION1 = D_TARGET_B_1 NUMDECISION2 = D_TARGET_B_2 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" _MEANCP_ =
"Mean Computed Profit" _MAXCP_ = "Max Computed Profit" _MINCP_ = "Min Computed Profit" _MAXEP_
= "Expected profit: upper bound" _MINEP_ = "Expected profit: lower bound" _MEANEP_ = "Mean
Expected Profit" D_TARGET_B_1 = "Report: Number of Decisions = 1" D_TARGET_B_2 = "Report:
Number of Decisions = 2" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC
BASECP = BASEPROFIT BASECUMTOTALCP = BASECUMULATIVETOTALPROFIT BASECUMULATIVECP =
BASECUMULATIVEPROFIT MAXCP_TARGET = _MAXCP_ MNCP_TARGET = _MEANCP_ MINCP_TARGET = _MINCP_
BASETOTALCP = BASETOTALPROFIT CUMULATIVECP = AVGCUMULATIVEPROFIT CUMULATIVETOTALCP=
CUMULATIVETOTALPROFIT CP_TARGET = PROFIT TOTALCP_TARGET = TOTALPROFIT MAXEP_TARGET = _MAXEP_
MINEP_TARGET = _MINEP_ MNEP_TARGET = _MEANEP_ CUMULATIVEEP = CUMULATIVEEXPECTEDPROFIT
CUMULATIVETOTALEP= CUMULATIVETOTALEXPPROFIT TOTALEP_TARGET = TOTALEXPPROFIT BESTBP =
BESTPROFIT BESTCUMTOTALBP = BESTCUMULATIVETOTALPROFIT BESTCUMULATIVEBP = BESTCUMULATIVEPROFIT
BESTTOTALBP = BESTTOTALPROFIT ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MEANCP_ = "Mean Computed Profit" _MAXCP_ = "Max Computed Profit"
_MINCP_ = "Min Computed Profit" AVGCUMULATIVEPROFIT = "Average Cumulative Computed Profit"
CUMULATIVETOTALPROFIT = "Cumulative Total Computed Profit" BESTTOTALPROFIT = "Best Total
Profit" BESTPROFIT = "Best Profit" BASEPROFIT = "Baseline Profit" BASECUMULATIVEPROFIT =
"Baseline Cumulative Profit" BASECUMULATIVETOTALPROFIT = "Baseline Cumulative Total Profit"
BASEPROFIT = "Baseline Profit" BASETOTALPROFIT = "Baseline Total Profit" BESTCUMULATIVEPROFIT
= "Best Cumulative Profit" BESTCUMULATIVETOTALPROFIT = "Best Cumulative Total Profit" PROFIT =
"Average Computed Profit" TOTALPROFIT = "Total Computed Profit" _MEANEP_ = "Mean Expected
Profit" _MINEP_ = "Min Expected Profit" _MAXEP_ = "Max Expected Profit"
CUMULATIVETOTALEXPPROFIT = "Cumulative Total Expected Profit" CUMULATIVEEXPECTEDPROFIT =
"Cumulative Expected Profit" TOTALEXPPROFIT = "Total Expected Profit" _MAXP_ = "Max Posterior
Probability" _MINP_ = "Min Posterior Probability" _MEANP_ = "Mean Posterior Probability"
BASECAP = "Baseline % Captured Response" BASECAPC = "Baseline Cumulative % Captured Response"
BASENUMBEROFEVENTS = "Baseline Number of Events" BASEGAIN = "Baseline Gain" BASELIFT =
"Baseline Lift" BASELIFTC = "Baseline Cumulative Lift" BASERESP = "Baseline % Response"
BASERESPC = "Baseline Cumulative % Response" BASELIFTC = "Baseline Cumulative Lift" BESTCAP =
"Best % Captured Response" BESTCAPC = "Best Cumulative % Captured Response" BESTGAIN = "Best
Gain" BESTRESP = "Best % Response" BESTRESPC = "Best Cumulative % Response" BESTLIFT = "Best
Lift" BESTLIFTC = "Best Cumulative Lift" BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "%
Captured Response" CAPC = "Cumulative % Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT
= "Lift" LIFTC = "Cumulative Lift" NUMNEVENT = "Number of Nonevents" N = "Number of
Observations" EVENT = "Event" RESPC = "Cumulative % Response" NUMBEROFEVENTS = "Number of
Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "TARGET_B";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'Target Variable Indicates for Response to 97NK
Mailing';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "TARGET_B";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'Target Variable Indicates for Response to 97NK
Mailing';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
51800      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
51801      set EMWS1.Tree_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_CMeta_TRAIN;
51802      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
51802    ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
51803      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
51804      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
51805      set EMWS1.Tree_VALIDATE(keep=
51806      BP_TARGET_B
51807      CP_TARGET_B
51808      D_TARGET_B
51809      EP_TARGET_B
51810      F_TARGET_B
51811      I_TARGET_B
51812      P_TARGET_B0
51813      P_TARGET_B1
51814      Q_TARGET_B0
51815      Q_TARGET_B1
51816      R_TARGET_B0
51817      R_TARGET_B1
51818      U_TARGET_B
51819      V_TARGET_B0
51820      V_TARGET_B1
51821      _WARN_
51822      TARGET_B
51823      );
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_VALIDATE(keep= BP_TARGET_B CP_TARGET_B D_TARGET_B
EP_TARGET_B F_TARGET_B I_TARGET_B P_TARGET_B0 P_TARGET_B1 Q_TARGET_B0 Q_TARGET_B1 R_TARGET_B0
R_TARGET_B1 U_TARGET_B V_TARGET_B0 V_TARGET_B1 _WARN_ TARGET_B );
51824      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 8718 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.15 seconds
 
NOTE: There were 8718 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: There were 8718 observations read from the data set EMWS1.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 8718 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.17 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_TARGET_B*F_TARGET_B / out = WORK.Tree_1WDDS2P nocol norow outpct;
MPRINT(EM_DIAGRAM):   table D_TARGET_B*F_TARGET_B / out = WORK.Tree_2JXH_NN nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_1WDDS2P;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree_1WDDS2P(rename=(F_TARGET_B=FROM I_TARGET_B=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "TARGET_B";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "TARGET_B" then TARGETLABEL = 'Target Variable
Indicates for Response to 97NK Mailing';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.Tree_1WDDS2P;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Tree_1WDDS2P;
MPRINT(EM_DIAGRAM):   merge WORK.Tree_1WDDS2P _prioradjust1;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   ADJUSTEDPERCENT = PERCENT*ADJUSTMENT;
MPRINT(EM_DIAGRAM):   label ADJUSTEDPERCENT = "Adjusted Percent of Predict/Decision Variable";
MPRINT(EM_DIAGRAM):   drop ADJUSTMENT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMCLASSIFICATION WORK.Tree_1WDDS2P;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Tree_1WDDS2P;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_2JXH_NN;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 dataRole target $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $9;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree_2JXH_NN(rename=(F_TARGET_B=FROM D_TARGET_B=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'DECISION' DATAROLE "VALIDATE" TARGET "TARGET_B";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "TARGET_B" then TARGETLABEL = 'Target Variable
Indicates for Response to 97NK Mailing';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.Tree_2JXH_NN;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Tree_2JXH_NN;
MPRINT(EM_DIAGRAM):   merge WORK.Tree_2JXH_NN _prioradjust1;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   AdjustedPercent = Percent*Adjustment;
MPRINT(EM_DIAGRAM):   label ADJUSTEDPERCENT = "Adjusted Percent of Predict/Decision Variable";
MPRINT(EM_DIAGRAM):   drop Adjustment;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMCLASSIFICATION WORK.Tree_2JXH_NN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "TARGET_B" then TARGETLABEL = 'Target Variable
Indicates for Response to 97NK Mailing';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_TARGET_B_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_TARGET_B_DD;
MPRINT(EM_DIAGRAM):   where strip(TARGET_B)=strip(symget('ASSMT_EVENT'));
MPRINT(EM_DIAGRAM):   call symput('DECPRIOR', strip(put(DECPRIOR, best.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_TARGET_B") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_TARGET_B") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_TARGET_B D_TARGET_B ;
 
MPRINT(EM_ASSESS):   VAR P_TARGET_B1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_TARGET_B") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "D_TARGET_B" > " " AND UPCASE(NAME) = UPCASE("D_TARGET_B") THEN
DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_TARGET_B1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_TARGET_B P_TARGET_B1 EP_TARGET_B CP_TARGET_B
BP_TARGET_B _tmpfreqvar_ D_TARGET_B );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_TARGET_B ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_TARGET_B1 D_TARGET_B NTARGET
_tmpfreqvar_ EP_TARGET_B CP_TARGET_B BP_TARGET_B WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_TARGET_B1 D_TARGET_B ;
MPRINT(EM_ASSESS):   VAR NTARGET EP_TARGET_B CP_TARGET_B BP_TARGET_B ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANEPTARGET
_MEANCPTARGET _MEANBPTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP MNEP_TARGET
MINEP_TARGET MAXEP_TARGET TOTALEP_TARGET CUMULATIVEEP CUMULATIVETOTALEP MNCP_TARGET
MINCP_TARGET MAXCP_TARGET CP_TARGET TOTALCP_TARGET CUMULATIVECP CUMULATIVETOTALCP BASECP
BASECUMTOTALCP BASECUMULATIVECP BASETOTALCP BESTTOTALBP BESTCUMULATIVEBP BESTCUMTOTALBP BESTBP
) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE
SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS NUMDECISION1 NUMDECISION2 SCR_MNPROB
SCR_MINPROB SCR_MAXPROB SCR_EPMEAN SCR_EPMIN SCR_EPMAX SCR_CPMEAN SCR_CPMIN SCR_CPMAX ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 CUMPROFIT1 - CUMPROFIT20 0 CUMBPROFIT1 -
CUMBPROFIT20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 FALSEPOS1 - FALSEPOS100 0
FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - NONEVENTS100 0 FIRSTIN1 -
FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.05 _NEVENTS 435.9 _NNONEVENTS 8282.1 TARGET
"NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   RETAIN EPTARGET1 - EPTARGET20 0 MINEPTARGET1 - MINEPTARGET20 0
MAXEPTARGET1 - MAXEPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY EPTARGET (20) EPTARGET1 - EPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINEPTARGET (20) MINEPTARGET1 - MINEPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXEPTARGET (20) MAXEPTARGET1 - MAXEPTARGET20;
MPRINT(EM_ASSESS):   DROP EPTARGET1 - EPTARGET20 _MEANEPTARGET MINEPTARGET1 - MINEPTARGET20
MAXEPTARGET1 - MAXEPTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN CPTARGET1 - CPTARGET20 0 MINCPTARGET1 - MINCPTARGET20 0
MAXCPTARGET1 - MAXCPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY CPTARGET (20) CPTARGET1 - CPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINCPTARGET (20) MINCPTARGET1 - MINCPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXCPTARGET (20) MAXCPTARGET1 - MAXCPTARGET20;
MPRINT(EM_ASSESS):   DROP CPTARGET1 - CPTARGET20 _MEANCPTARGET MINCPTARGET1 - MINCPTARGET20
MAXCPTARGET1 - MAXCPTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN BPTARGET1 - BPTARGET20 0 MINBPTARGET1 - MINBPTARGET20 0
MAXBPTARGET1 - MAXBPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY BPTARGET (20) BPTARGET1 - BPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINBPTARGET (20) MINBPTARGET1 - MINBPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXBPTARGET (20) MAXBPTARGET1 - MAXBPTARGET20;
MPRINT(EM_ASSESS):   DROP BPTARGET1 - BPTARGET20 _MEANBPTARGET MINBPTARGET1 - MINBPTARGET20
MAXBPTARGET1 - MAXBPTARGET20 ;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   RETAIN D_TARGET1_1 - D_TARGET1_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET1 (100) D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   DROP D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   RETAIN D_TARGET2_1 - D_TARGET2_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET2 (100) D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   DROP D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN SCR_EPMEAN1- SCR_EPMEAN100 0 SCR_EPMIN1 - SCR_EPMIN100 1
SCR_EPMAX1 - SCR_EPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMEANS (100) SCR_EPMEAN1 - SCR_EPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMINS (100) SCR_EPMIN1 - SCR_EPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMAXS (100) SCR_EPMAX1 - SCR_EPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_EPMEAN1 - SCR_EPMEAN100 SCR_EPMIN1 - SCR_EPMIN100 SCR_EPMAX1 -
SCR_EPMAX100;
MPRINT(EM_ASSESS):   RETAIN SCR_CPMEAN1- SCR_CPMEAN100 0 SCR_CPMIN1 - SCR_CPMIN100 1
SCR_CPMAX1 - SCR_CPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMEANS (100) SCR_CPMEAN1 - SCR_CPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMINS (100) SCR_CPMIN1 - SCR_CPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMAXS (100) SCR_CPMAX1 - SCR_CPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_CPMEAN1 - SCR_CPMEAN100 SCR_CPMIN1 - SCR_CPMIN100 SCR_CPMAX1 -
SCR_CPMAX100;
MPRINT(EM_ASSESS):   RETAIN SCR_BPMEAN1- SCR_BPMEAN100 0 SCR_BPMIN1 - SCR_BPMIN100 1
SCR_BPMAX1 - SCR_BPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMEANS (100) SCR_BPMEAN1 - SCR_BPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMINS (100) SCR_BPMIN1 - SCR_BPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMAXS (100) SCR_BPMAX1 - SCR_BPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_BPMEAN1 - SCR_BPMEAN100 SCR_BPMIN1 - SCR_BPMIN100 SCR_BPMAX1 -
SCR_BPMAX100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
 
MPRINT(EM_ASSESS):   DROP WEIGHTEDORIG1 WEIGHTEDORIG0 ORIG0 ORIG1;
MPRINT(EM_ASSESS):   ORIG1 = _MEANTARGET * _FREQ_;
MPRINT(EM_ASSESS):   ORIG0 = (1 - _MEANTARGET) * _FREQ_;
MPRINT(EM_ASSESS):   WEIGHTEDORIG1 = ORIG1 * 0.05 / 0.2499426474 ;
MPRINT(EM_ASSESS):   WEIGHTEDORIG0 = ORIG0 * (1 - 0.05) / 0.7500573526 ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = SUM (WEIGHTEDORIG0 , WEIGHTEDORIG1);
MPRINT(EM_ASSESS):   IF SUMWEIGHTS > . THEN _MEANTARGET = WEIGHTEDORIG1 / SUMWEIGHTS;
MPRINT(EM_ASSESS):   ELSE _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   _FREQ_ = SUMWEIGHTS;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 8718));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_TARGET_B1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_TARGET_B1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_TARGET_B1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   EPTARGET (DECILE) = SUM ( EPTARGET (DECILE) , _MEANEPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINEPTARGET (DECILE) = MIN (MINEPTARGET (DECILE), _MEANEPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   MAXEPTARGET (DECILE) = MAX (MAXEPTARGET (DECILE), _MEANEPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   CPTARGET (DECILE) = SUM ( CPTARGET (DECILE) , _MEANCPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINCPTARGET (DECILE) = MIN (MINCPTARGET (DECILE), _MEANCPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   MAXCPTARGET (DECILE) = MAX (MAXCPTARGET (DECILE), _MEANCPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   BPTARGET (DECILE) = SUM ( BPTARGET (DECILE) , _MEANBPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINBPTARGET (DECILE) = MIN (MINBPTARGET (DECILE), _MEANBPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   MAXBPTARGET (DECILE) = MAX (MAXBPTARGET (DECILE), _MEANBPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_TARGET_B1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_TARGET_B1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_TARGET_B1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_TARGET_B1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   D_TARGET_B = TRANSLATE (D_TARGET_B, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   IF D_TARGET_B = "0" THEN D_TARGET1 ( SLOT ) = SUM (D_TARGET1 (SLOT) ,
_FREQ_ );
MPRINT(EM_ASSESS):   IF D_TARGET_B = "1" THEN D_TARGET2 ( SLOT ) = SUM (D_TARGET2 (SLOT) ,
_FREQ_ );
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_TARGET_B1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_TARGET_B1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_TARGET_B1 );
MPRINT(EM_ASSESS):   SCR_EPMEANS ( SLOT ) = MEAN (SCR_EPMEANS (SLOT), _MEANEPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_EPMINS ( SLOT ) = MIN (SCR_EPMINS (SLOT), _MEANEPTARGET );
MPRINT(EM_ASSESS):   SCR_EPMAXS ( SLOT ) = MAX (SCR_EPMAXS (SLOT), _MEANEPTARGET );
MPRINT(EM_ASSESS):   SCR_CPMEANS ( SLOT ) = MEAN (SCR_CPMEANS (SLOT), _MEANCPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_CPMINS ( SLOT ) = MIN (SCR_CPMINS (SLOT), _MEANCPTARGET );
MPRINT(EM_ASSESS):   SCR_CPMAXS ( SLOT ) = MAX (SCR_CPMAXS (SLOT), _MEANCPTARGET );
MPRINT(EM_ASSESS):   SCR_BPMEANS ( SLOT ) = MEAN (SCR_BPMEANS (SLOT), _MEANBPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_BPMINS ( SLOT ) = MIN (SCR_BPMINS (SLOT), _MEANBPTARGET );
MPRINT(EM_ASSESS):   SCR_BPMAXS ( SLOT ) = MAX (SCR_BPMAXS (SLOT), _MEANBPTARGET );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0218140868 OVLMAX 0.1213605926 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   SUMEP = SUM (OF EPTARGET1 - EPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMEP ;
MPRINT(EM_ASSESS):   SUMCP = SUM (OF CPTARGET1 - CPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMCP ;
MPRINT(EM_ASSESS):   SUMBP = SUM (OF BPTARGET1 - BPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMBP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 8718 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 8718)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 8718 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 8718 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   TOTALEP_TARGET = EPTARGET (GROUP);
MPRINT(EM_ASSESS):   EP_TARGET = TOTALEP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALEP + EPTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVEEP = CUMULATIVETOTALEP / C_NUMOBS;
MPRINT(EM_ASSESS):   MINEP_TARGET = MINEPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXEP_TARGET = MAXEPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNEP_TARGET = EP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXEP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXEP_TARGET + MAXEP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMEP >= C_MAXEP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTEP = MAXEP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALEP = BESTEP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTEP = MIN (MAXEP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTEP < 0 THEN BESTEP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALEP = BESTEP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALEP + BESTTOTALEP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMEP - C_MAXEP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEEP = BESTCUMTOTALEP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEEP = SUMEP / 8718;
MPRINT(EM_ASSESS):   BASECUMULATIVEEP + BASEEP;
MPRINT(EM_ASSESS):   BASETOTALEP = SUMEP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALEP + BASETOTALEP;
MPRINT(EM_ASSESS):   TOTALCP_TARGET = CPTARGET (GROUP);
MPRINT(EM_ASSESS):   CP_TARGET = TOTALCP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALCP + CPTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVECP = CUMULATIVETOTALCP / C_NUMOBS;
MPRINT(EM_ASSESS):   MINCP_TARGET = MINCPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXCP_TARGET = MAXCPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNCP_TARGET = CP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXCP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXCP_TARGET + MAXCP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMCP >= C_MAXCP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTCP = MAXCP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALCP = BESTCP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTCP = MIN (MAXCP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTCP < 0 THEN BESTCP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALCP = BESTCP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALCP + BESTTOTALCP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMCP - C_MAXCP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVECP = BESTCUMTOTALCP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASECP = SUMCP / 8718;
MPRINT(EM_ASSESS):   BASECUMULATIVECP + BASECP;
MPRINT(EM_ASSESS):   BASETOTALCP = SUMCP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALCP + BASETOTALCP;
MPRINT(EM_ASSESS):   TOTALBP_TARGET = BPTARGET (GROUP);
MPRINT(EM_ASSESS):   BP_TARGET = TOTALBP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   MINBP_TARGET = MINBPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXBP_TARGET = MAXBPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNBP_TARGET = BP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXBP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXBP_TARGET + MAXBP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMBP >= C_MAXBP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTBP = MAXBP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALBP = BESTBP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTBP = MIN (MAXBP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTBP < 0 THEN BESTBP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALBP = BESTBP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALBP + BESTTOTALBP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMBP - C_MAXBP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEBP = BESTCUMTOTALBP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEBP = SUMBP / 8718;
MPRINT(EM_ASSESS):   BASECUMULATIVEBP + BASEBP;
MPRINT(EM_ASSESS):   BASETOTALBP = SUMBP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALBP + BASETOTALBP;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_96 - D_TARGET1_100);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_96 - D_TARGET2_100);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN96 - SCR_EPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN96 - SCR_EPMIN100);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX96 - SCR_EPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN96 - SCR_CPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN96 - SCR_CPMIN100);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX96 - SCR_CPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN96 - SCR_BPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN96 - SCR_BPMIN100);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX96 - SCR_BPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_91 - D_TARGET1_95);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_91 - D_TARGET2_95);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN91 - SCR_EPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN91 - SCR_EPMIN95);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX91 - SCR_EPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN91 - SCR_CPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN91 - SCR_CPMIN95);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX91 - SCR_CPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN91 - SCR_BPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN91 - SCR_BPMIN95);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX91 - SCR_BPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_86 - D_TARGET1_90);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_86 - D_TARGET2_90);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN86 - SCR_EPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN86 - SCR_EPMIN90);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX86 - SCR_EPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN86 - SCR_CPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN86 - SCR_CPMIN90);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX86 - SCR_CPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN86 - SCR_BPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN86 - SCR_BPMIN90);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX86 - SCR_BPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_81 - D_TARGET1_85);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_81 - D_TARGET2_85);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN81 - SCR_EPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN81 - SCR_EPMIN85);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX81 - SCR_EPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN81 - SCR_CPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN81 - SCR_CPMIN85);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX81 - SCR_CPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN81 - SCR_BPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN81 - SCR_BPMIN85);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX81 - SCR_BPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_76 - D_TARGET1_80);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_76 - D_TARGET2_80);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN76 - SCR_EPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN76 - SCR_EPMIN80);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX76 - SCR_EPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN76 - SCR_CPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN76 - SCR_CPMIN80);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX76 - SCR_CPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN76 - SCR_BPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN76 - SCR_BPMIN80);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX76 - SCR_BPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_71 - D_TARGET1_75);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_71 - D_TARGET2_75);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN71 - SCR_EPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN71 - SCR_EPMIN75);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX71 - SCR_EPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN71 - SCR_CPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN71 - SCR_CPMIN75);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX71 - SCR_CPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN71 - SCR_BPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN71 - SCR_BPMIN75);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX71 - SCR_BPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_66 - D_TARGET1_70);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_66 - D_TARGET2_70);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN66 - SCR_EPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN66 - SCR_EPMIN70);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX66 - SCR_EPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN66 - SCR_CPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN66 - SCR_CPMIN70);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX66 - SCR_CPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN66 - SCR_BPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN66 - SCR_BPMIN70);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX66 - SCR_BPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_61 - D_TARGET1_65);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_61 - D_TARGET2_65);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN61 - SCR_EPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN61 - SCR_EPMIN65);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX61 - SCR_EPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN61 - SCR_CPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN61 - SCR_CPMIN65);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX61 - SCR_CPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN61 - SCR_BPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN61 - SCR_BPMIN65);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX61 - SCR_BPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_56 - D_TARGET1_60);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_56 - D_TARGET2_60);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN56 - SCR_EPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN56 - SCR_EPMIN60);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX56 - SCR_EPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN56 - SCR_CPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN56 - SCR_CPMIN60);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX56 - SCR_CPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN56 - SCR_BPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN56 - SCR_BPMIN60);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX56 - SCR_BPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_51 - D_TARGET1_55);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_51 - D_TARGET2_55);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN51 - SCR_EPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN51 - SCR_EPMIN55);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX51 - SCR_EPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN51 - SCR_CPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN51 - SCR_CPMIN55);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX51 - SCR_CPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN51 - SCR_BPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN51 - SCR_BPMIN55);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX51 - SCR_BPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_46 - D_TARGET1_50);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_46 - D_TARGET2_50);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN46 - SCR_EPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN46 - SCR_EPMIN50);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX46 - SCR_EPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN46 - SCR_CPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN46 - SCR_CPMIN50);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX46 - SCR_CPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN46 - SCR_BPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN46 - SCR_BPMIN50);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX46 - SCR_BPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_41 - D_TARGET1_45);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_41 - D_TARGET2_45);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN41 - SCR_EPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN41 - SCR_EPMIN45);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX41 - SCR_EPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN41 - SCR_CPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN41 - SCR_CPMIN45);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX41 - SCR_CPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN41 - SCR_BPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN41 - SCR_BPMIN45);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX41 - SCR_BPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_36 - D_TARGET1_40);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_36 - D_TARGET2_40);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN36 - SCR_EPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN36 - SCR_EPMIN40);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX36 - SCR_EPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN36 - SCR_CPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN36 - SCR_CPMIN40);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX36 - SCR_CPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN36 - SCR_BPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN36 - SCR_BPMIN40);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX36 - SCR_BPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_31 - D_TARGET1_35);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_31 - D_TARGET2_35);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN31 - SCR_EPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN31 - SCR_EPMIN35);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX31 - SCR_EPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN31 - SCR_CPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN31 - SCR_CPMIN35);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX31 - SCR_CPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN31 - SCR_BPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN31 - SCR_BPMIN35);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX31 - SCR_BPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_26 - D_TARGET1_30);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_26 - D_TARGET2_30);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN26 - SCR_EPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN26 - SCR_EPMIN30);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX26 - SCR_EPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN26 - SCR_CPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN26 - SCR_CPMIN30);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX26 - SCR_CPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN26 - SCR_BPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN26 - SCR_BPMIN30);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX26 - SCR_BPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_21 - D_TARGET1_25);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_21 - D_TARGET2_25);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN21 - SCR_EPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN21 - SCR_EPMIN25);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX21 - SCR_EPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN21 - SCR_CPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN21 - SCR_CPMIN25);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX21 - SCR_CPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN21 - SCR_BPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN21 - SCR_BPMIN25);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX21 - SCR_BPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_16 - D_TARGET1_20);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_16 - D_TARGET2_20);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN16 - SCR_EPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN16 - SCR_EPMIN20);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX16 - SCR_EPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN16 - SCR_CPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN16 - SCR_CPMIN20);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX16 - SCR_CPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN16 - SCR_BPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN16 - SCR_BPMIN20);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX16 - SCR_BPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_11 - D_TARGET1_15);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_11 - D_TARGET2_15);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN11 - SCR_EPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN11 - SCR_EPMIN15);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX11 - SCR_EPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN11 - SCR_CPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN11 - SCR_CPMIN15);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX11 - SCR_CPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN11 - SCR_BPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN11 - SCR_BPMIN15);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX11 - SCR_BPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_6 - D_TARGET1_10);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_6 - D_TARGET2_10);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN6 - SCR_EPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN6 - SCR_EPMIN10);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX6 - SCR_EPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN6 - SCR_CPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN6 - SCR_CPMIN10);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX6 - SCR_CPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN6 - SCR_BPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN6 - SCR_BPMIN10);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX6 - SCR_BPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_1 - D_TARGET1_5);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_1 - D_TARGET2_5);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN1 - SCR_EPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN1 - SCR_EPMIN5);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX1 - SCR_EPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN1 - SCR_CPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN1 - SCR_CPMIN5);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX1 - SCR_CPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN1 - SCR_BPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN1 - SCR_BPMIN5);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX1 - SCR_BPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS SCR_EPMEAN =
_MEANEP_ SCR_EPMAX = _MAXEP_ SCR_EPMIN = _MINEP_ SCR_CPMEAN = _MEANCP_ SCR_CPMAX = _MAXCP_
SCR_CPMIN = _MINCP_ NUMDECISION1 = D_TARGET_B_1 NUMDECISION2 = D_TARGET_B_2 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" _MEANCP_ =
"Mean Computed Profit" _MAXCP_ = "Max Computed Profit" _MINCP_ = "Min Computed Profit" _MAXEP_
= "Expected profit: upper bound" _MINEP_ = "Expected profit: lower bound" _MEANEP_ = "Mean
Expected Profit" D_TARGET_B_1 = "Report: Number of Decisions = 1" D_TARGET_B_2 = "Report:
Number of Decisions = 2" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC
BASECP = BASEPROFIT BASECUMTOTALCP = BASECUMULATIVETOTALPROFIT BASECUMULATIVECP =
BASECUMULATIVEPROFIT MAXCP_TARGET = _MAXCP_ MNCP_TARGET = _MEANCP_ MINCP_TARGET = _MINCP_
BASETOTALCP = BASETOTALPROFIT CUMULATIVECP = AVGCUMULATIVEPROFIT CUMULATIVETOTALCP=
CUMULATIVETOTALPROFIT CP_TARGET = PROFIT TOTALCP_TARGET = TOTALPROFIT MAXEP_TARGET = _MAXEP_
MINEP_TARGET = _MINEP_ MNEP_TARGET = _MEANEP_ CUMULATIVEEP = CUMULATIVEEXPECTEDPROFIT
CUMULATIVETOTALEP= CUMULATIVETOTALEXPPROFIT TOTALEP_TARGET = TOTALEXPPROFIT BESTBP =
BESTPROFIT BESTCUMTOTALBP = BESTCUMULATIVETOTALPROFIT BESTCUMULATIVEBP = BESTCUMULATIVEPROFIT
BESTTOTALBP = BESTTOTALPROFIT ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MEANCP_ = "Mean Computed Profit" _MAXCP_ = "Max Computed Profit"
_MINCP_ = "Min Computed Profit" AVGCUMULATIVEPROFIT = "Average Cumulative Computed Profit"
CUMULATIVETOTALPROFIT = "Cumulative Total Computed Profit" BESTTOTALPROFIT = "Best Total
Profit" BESTPROFIT = "Best Profit" BASEPROFIT = "Baseline Profit" BASECUMULATIVEPROFIT =
"Baseline Cumulative Profit" BASECUMULATIVETOTALPROFIT = "Baseline Cumulative Total Profit"
BASEPROFIT = "Baseline Profit" BASETOTALPROFIT = "Baseline Total Profit" BESTCUMULATIVEPROFIT
= "Best Cumulative Profit" BESTCUMULATIVETOTALPROFIT = "Best Cumulative Total Profit" PROFIT =
"Average Computed Profit" TOTALPROFIT = "Total Computed Profit" _MEANEP_ = "Mean Expected
Profit" _MINEP_ = "Min Expected Profit" _MAXEP_ = "Max Expected Profit"
CUMULATIVETOTALEXPPROFIT = "Cumulative Total Expected Profit" CUMULATIVEEXPECTEDPROFIT =
"Cumulative Expected Profit" TOTALEXPPROFIT = "Total Expected Profit" _MAXP_ = "Max Posterior
Probability" _MINP_ = "Min Posterior Probability" _MEANP_ = "Mean Posterior Probability"
BASECAP = "Baseline % Captured Response" BASECAPC = "Baseline Cumulative % Captured Response"
BASENUMBEROFEVENTS = "Baseline Number of Events" BASEGAIN = "Baseline Gain" BASELIFT =
"Baseline Lift" BASELIFTC = "Baseline Cumulative Lift" BASERESP = "Baseline % Response"
BASERESPC = "Baseline Cumulative % Response" BASELIFTC = "Baseline Cumulative Lift" BESTCAP =
"Best % Captured Response" BESTCAPC = "Best Cumulative % Captured Response" BESTGAIN = "Best
Gain" BESTRESP = "Best % Response" BESTRESPC = "Best Cumulative % Response" BESTLIFT = "Best
Lift" BESTLIFTC = "Best Cumulative Lift" BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "%
Captured Response" CAPC = "Cumulative % Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT
= "Lift" LIFTC = "Cumulative Lift" NUMNEVENT = "Number of Nonevents" N = "Number of
Observations" EVENT = "Event" RESPC = "Cumulative % Response" NUMBEROFEVENTS = "Number of
Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "TARGET_B";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'Target Variable Indicates for Response to 97NK
Mailing';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "TARGET_B";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'Target Variable Indicates for Response to 97NK
Mailing';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
56156      %let _cn = %sysfunc(getoption(CENTER));
56157      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
56158      proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
56159      var STAT LABEL TRAIN
56160      VALIDATE
56161      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
56162      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
56163      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
56164      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
56165      run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 21.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
56166      title10;
MPRINT(EM_DIAGRAM):   title10;
56167      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
56168      proc sort data=EMWS1.Tree_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Tree_EMCLASSIFICATION nothreads;
56169      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
56170      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE_EMCLASSIFICATION has 12 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
56171      %let _cn = %sysfunc(getoption(CENTER));
56172      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
56173      proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
56174      var from into pct_row pct_col count percent
56175      Adjustedpercent
56176      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent Adjustedpercent ;
56177      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
56178      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
56179      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
56180      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
56181      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
56182      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
56183      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
56184      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
56185      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
56186      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
56187      run;
 
NOTE: BY line has been truncated at least once.
NOTE: The above message was for the following BY group:
      Data Role=TRAIN Target Variable=TARGET_B Target Label=Target Variable Indicates for
      Response to
NOTE: There were 4 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 22.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
56188      proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
56189      var from into pct_row pct_col count percent
56190      Adjustedpercent
56191      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent Adjustedpercent ;
56192      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
56193      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
56194      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
56195      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
56196      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
56197      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
56198      where _TYPE_='DECISION';
MPRINT(EM_DIAGRAM):   where _TYPE_='DECISION';
56199      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
56200      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
56201      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_decisiontable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Decision Table";
MPRINT(EM_DIAGRAM):   run;
56202      run;
 
NOTE: BY line has been truncated at least once.
NOTE: The above message was for the following BY group:
      Data Role=TRAIN Target Variable=TARGET_B Target Label=Target Variable Indicates for
      Response to
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='DECISION';
NOTE: The PROCEDURE PRINT printed page 23.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
56203      title9;
MPRINT(EM_DIAGRAM):   title9;
56204      title10;
MPRINT(EM_DIAGRAM):   title10;
56205      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
56206      %let _cn = %sysfunc(getoption(CENTER));
56207      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
56208      data EMWS1.Tree_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_EMEVENTREPORT;
56209      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
56209    ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
56210      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
56210    !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
56210    ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
56210    ! FALSEEVENT
56211      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
56211    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
56211    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
56212         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
56213      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
56214      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
56215      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
56216      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
56217      set EMWS1.Tree_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMEVENTREPORT;
56218      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
56219      proc print data=EMWS1.Tree_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree_EMEVENTREPORT noobs label;
56220      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
56221      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
56222      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
56223      run;
 
NOTE: BY line has been truncated at least once.
NOTE: The above message was for the following BY group:
      Data Role=TRAIN Target=TARGET_B Target Label=Target Variable Indicates for Response to
      97NK Mai
NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 24.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
56224      title10;
MPRINT(EM_DIAGRAM):   title10;
56225      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
56226      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
56227      modify Tree_EMRANK;
MPRINT(EM_DIAGRAM):   modify Tree_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
56228      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
56229      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
56229    ! ;
MPRINT(EM_DIAGRAM):   run;
56230      run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
56231      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.32 seconds
      cpu time            0.32 seconds
 
 
56232      %let _cn = %sysfunc(getoption(CENTER));
56233      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
56234      proc print data=EMWS1.Tree_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree_EMRANK label noobs;
56235      var
56236      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
56237      by
56238      notsorted DATAROLE
56239      notsorted TARGET
56240      notsorted TARGETLABEL
56241      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
56242      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
56243      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
56244      run;
 
NOTE: BY line has been truncated at least once.
NOTE: The above message was for the following BY group:
      Data Role=TRAIN Target Variable=TARGET_B Target Label=Target Variable Indicates for
      Response to
NOTE: There were 40 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 25.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
56245      title10;
MPRINT(EM_DIAGRAM):   title10;
56246      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
56247      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
56248      modify Tree_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Tree_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
56249      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
56249    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
56250      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
56250    ! ;
MPRINT(EM_DIAGRAM):   run;
56251      run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
56252      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.32 seconds
      cpu time            0.32 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "TARGET_B" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
