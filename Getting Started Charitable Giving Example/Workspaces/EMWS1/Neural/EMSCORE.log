MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 11, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:54:05" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                October 11, 2015
Time:                14:54:05
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0Y0PZ9N "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0Y0PZ9N new;
MPRINT(EM_DIAGRAM):   run;
21645      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
21646      set EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_OUTKEY;
21647      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
21648      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 51 observations read from the data set EMWS1.NEURAL_OUTKEY.
NOTE: The data set WORK.OUTKEY has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21649      filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21650      *------------------------------------------------------------*;
21651      * Neural: Scoring DATA data;
21652      *------------------------------------------------------------*;
21653      data EMWS1.Neural_TRAIN
21654      / view=EMWS1.Neural_TRAIN
21655      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_TRAIN / view=EMWS1.Neural_TRAIN ;
21656      set EMWS1.Varsel_TRAIN
21657      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_TRAIN ;
21658      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
21659     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
21660     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
21661     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
21662     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
21663     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
21664     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
21665     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
21666     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
21667     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
21668     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
21669     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
21670     +LENGTH _WARN_ $4
21671     +      F_TARGET_B  $ 12
21672     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_TARGET_B $ 12 ;
21673     +      label S_LG10_LAST_GIFT_AMT = 'Standard: LG10_LAST_GIFT_AMT' ;
MPRINT(EM_DIAGRAM):   label S_LG10_LAST_GIFT_AMT = 'Standard: LG10_LAST_GIFT_AMT' ;
21674     +
21675     +      label S_MONTHS_SINCE_LAST_GIFT = 'Standard: MONTHS_SINCE_LAST_GIFT' ;
MPRINT(EM_DIAGRAM):   label S_MONTHS_SINCE_LAST_GIFT = 'Standard: MONTHS_SINCE_LAST_GIFT' ;
21676     +
21677     +      label PEP_STAR0 = 'Dummy: PEP_STAR=0' ;
MPRINT(EM_DIAGRAM):   label PEP_STAR0 = 'Dummy: PEP_STAR=0' ;
21678     +
21679     +      label FREQUENCY_STATUS_97NK1 = 'Dummy: FREQUENCY_STATUS_97NK=1' ;
MPRINT(EM_DIAGRAM):   label FREQUENCY_STATUS_97NK1 = 'Dummy: FREQUENCY_STATUS_97NK=1' ;
21680     +
21681     +      label FREQUENCY_STATUS_97NK2 = 'Dummy: FREQUENCY_STATUS_97NK=2' ;
MPRINT(EM_DIAGRAM):   label FREQUENCY_STATUS_97NK2 = 'Dummy: FREQUENCY_STATUS_97NK=2' ;
21682     +
21683     +      label FREQUENCY_STATUS_97NK3 = 'Dummy: FREQUENCY_STATUS_97NK=3' ;
MPRINT(EM_DIAGRAM):   label FREQUENCY_STATUS_97NK3 = 'Dummy: FREQUENCY_STATUS_97NK=3' ;
21684     +
21685     +      label G_CARD_PROM_120 = 'Dummy: G_CARD_PROM_12=0' ;
MPRINT(EM_DIAGRAM):   label G_CARD_PROM_120 = 'Dummy: G_CARD_PROM_12=0' ;
21686     +
21687     +      label G_CARD_PROM_121 = 'Dummy: G_CARD_PROM_12=1' ;
MPRINT(EM_DIAGRAM):   label G_CARD_PROM_121 = 'Dummy: G_CARD_PROM_12=1' ;
21688     +
21689     +      label G_CARD_PROM_122 = 'Dummy: G_CARD_PROM_12=2' ;
MPRINT(EM_DIAGRAM):   label G_CARD_PROM_122 = 'Dummy: G_CARD_PROM_12=2' ;
21690     +
21691     +      label G_CARD_PROM_123 = 'Dummy: G_CARD_PROM_12=3' ;
MPRINT(EM_DIAGRAM):   label G_CARD_PROM_123 = 'Dummy: G_CARD_PROM_12=3' ;
21692     +
21693     +      label G_CARD_PROM_124 = 'Dummy: G_CARD_PROM_12=4' ;
MPRINT(EM_DIAGRAM):   label G_CARD_PROM_124 = 'Dummy: G_CARD_PROM_12=4' ;
21694     +
21695     +      label G_CARD_PROM_125 = 'Dummy: G_CARD_PROM_12=5' ;
MPRINT(EM_DIAGRAM):   label G_CARD_PROM_125 = 'Dummy: G_CARD_PROM_12=5' ;
21696     +
21697     +      label G_CLUSTER_CODE0 = 'Dummy: G_CLUSTER_CODE=0' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE0 = 'Dummy: G_CLUSTER_CODE=0' ;
21698     +
21699     +      label G_CLUSTER_CODE1 = 'Dummy: G_CLUSTER_CODE=1' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE1 = 'Dummy: G_CLUSTER_CODE=1' ;
21700     +
21701     +      label G_CLUSTER_CODE2 = 'Dummy: G_CLUSTER_CODE=2' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE2 = 'Dummy: G_CLUSTER_CODE=2' ;
21702     +
21703     +      label G_CLUSTER_CODE3 = 'Dummy: G_CLUSTER_CODE=3' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE3 = 'Dummy: G_CLUSTER_CODE=3' ;
21704     +
21705     +      label G_CLUSTER_CODE4 = 'Dummy: G_CLUSTER_CODE=4' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE4 = 'Dummy: G_CLUSTER_CODE=4' ;
21706     +
21707     +      label G_CLUSTER_CODE5 = 'Dummy: G_CLUSTER_CODE=5' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE5 = 'Dummy: G_CLUSTER_CODE=5' ;
21708     +
21709     +      label G_CLUSTER_CODE6 = 'Dummy: G_CLUSTER_CODE=6' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE6 = 'Dummy: G_CLUSTER_CODE=6' ;
21710     +
21711     +      label G_CLUSTER_CODE7 = 'Dummy: G_CLUSTER_CODE=7' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE7 = 'Dummy: G_CLUSTER_CODE=7' ;
21712     +
21713     +      label G_RECENT_CARD_RESPONSE_COUNT0 =
21714     +'Dummy: G_RECENT_CARD_RESPONSE_COUNT=0' ;
MPRINT(EM_DIAGRAM):   label G_RECENT_CARD_RESPONSE_COUNT0 = 'Dummy: G_RECENT_CARD_RESPONSE_COUNT=0' ;
21715     +
21716     +      label G_RECENT_CARD_RESPONSE_COUNT1 =
21717     +'Dummy: G_RECENT_CARD_RESPONSE_COUNT=1' ;
MPRINT(EM_DIAGRAM):   label G_RECENT_CARD_RESPONSE_COUNT1 = 'Dummy: G_RECENT_CARD_RESPONSE_COUNT=1' ;
21718     +
21719     +      label G_RECENT_CARD_RESPONSE_COUNT2 =
21720     +'Dummy: G_RECENT_CARD_RESPONSE_COUNT=2' ;
MPRINT(EM_DIAGRAM):   label G_RECENT_CARD_RESPONSE_COUNT2 = 'Dummy: G_RECENT_CARD_RESPONSE_COUNT=2' ;
21721     +
21722     +      label G_RECENT_CARD_RESPONSE_COUNT3 =
21723     +'Dummy: G_RECENT_CARD_RESPONSE_COUNT=3' ;
MPRINT(EM_DIAGRAM):   label G_RECENT_CARD_RESPONSE_COUNT3 = 'Dummy: G_RECENT_CARD_RESPONSE_COUNT=3' ;
21724     +
21725     +      label G_RECENT_RESPONSE_COUNT0 = 'Dummy: G_RECENT_RESPONSE_COUNT=0' ;
MPRINT(EM_DIAGRAM):   label G_RECENT_RESPONSE_COUNT0 = 'Dummy: G_RECENT_RESPONSE_COUNT=0' ;
21726     +
21727     +      label G_RECENT_RESPONSE_COUNT1 = 'Dummy: G_RECENT_RESPONSE_COUNT=1' ;
MPRINT(EM_DIAGRAM):   label G_RECENT_RESPONSE_COUNT1 = 'Dummy: G_RECENT_RESPONSE_COUNT=1' ;
21728     +
21729     +      label G_RECENT_RESPONSE_COUNT2 = 'Dummy: G_RECENT_RESPONSE_COUNT=2' ;
MPRINT(EM_DIAGRAM):   label G_RECENT_RESPONSE_COUNT2 = 'Dummy: G_RECENT_RESPONSE_COUNT=2' ;
21730     +
21731     +      label OPT_LIFETIME_CA01_low_7_5 =
21732     +'Dummy: OPT_LIFETIME_CARD_PROM=01:low-7.5' ;
MPRINT(EM_DIAGRAM):   label OPT_LIFETIME_CA01_low_7_5 = 'Dummy: OPT_LIFETIME_CARD_PROM=01:low-7.5' ;
21733     +
21734     +      label OPT_LIFETIME_CA02_7_5_12_5 =
21735     +'Dummy: OPT_LIFETIME_CARD_PROM=02:7.5-12.5' ;
MPRINT(EM_DIAGRAM):   label OPT_LIFETIME_CA02_7_5_12_5 = 'Dummy: OPT_LIFETIME_CARD_PROM=02:7.5-12.5' ;
21736     +
21737     +      label OPT_LIFETIME_CA03_12_5_39_5__M =
21738     +'Dummy: OPT_LIFETIME_CARD_PROM=03:12.5-39.5, MISSING' ;
MPRINT(EM_DIAGRAM):   label OPT_LIFETIME_CA03_12_5_39_5__M = 'Dummy: OPT_LIFETIME_CARD_PROM=03:12.5-39.5, MISSING' ;
21739     +
21740     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
21741     +
21742     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
21743     +
21744     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
21745     +
21746     +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
21747     +
21748     +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
21749     +
21750     +      label I_TARGET_B = 'Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label I_TARGET_B = 'Into: TARGET_B' ;
21751     +
21752     +      label F_TARGET_B = 'From: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label F_TARGET_B = 'From: TARGET_B' ;
21753     +
21754     +      label U_TARGET_B = 'Unnormalized Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label U_TARGET_B = 'Unnormalized Into: TARGET_B' ;
21755     +
21756     +      label P_TARGET_B1 = 'Predicted: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   label P_TARGET_B1 = 'Predicted: TARGET_B=1' ;
21757     +
21758     +      label R_TARGET_B1 = 'Residual: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   label R_TARGET_B1 = 'Residual: TARGET_B=1' ;
21759     +
21760     +      label P_TARGET_B0 = 'Predicted: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   label P_TARGET_B0 = 'Predicted: TARGET_B=0' ;
21761     +
21762     +      label R_TARGET_B0 = 'Residual: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   label R_TARGET_B0 = 'Residual: TARGET_B=0' ;
21763     +
21764     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
21765     +
21766     +*** Generate dummy variables for PEP_STAR ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for PEP_STAR ;
21767     +drop PEP_STAR0 ;
MPRINT(EM_DIAGRAM):   drop PEP_STAR0 ;
21768     +if missing( PEP_STAR ) then do;
MPRINT(EM_DIAGRAM):   if missing( PEP_STAR ) then do;
21769     +   PEP_STAR0 = .;
MPRINT(EM_DIAGRAM):   PEP_STAR0 = .;
21770     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21771     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21772     +end;
MPRINT(EM_DIAGRAM):   end;
21773     +else do;
MPRINT(EM_DIAGRAM):   else do;
21774     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
21775     +   _dm12 = put( PEP_STAR , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( PEP_STAR , BEST12. );
21776     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   PEP_STAR0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
21777     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   PEP_STAR0 = 1;
21778     +      PEP_STAR0 = -1;
MPRINT(EM_DIAGRAM):   end;
21779     +   end;
21780     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   PEP_STAR0 = .;
21781     +      PEP_STAR0 = 1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
21782     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21783     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
21784     +      PEP_STAR0 = .;
21785     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for FREQUENCY_STATUS_97NK ;
21786     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop FREQUENCY_STATUS_97NK1 FREQUENCY_STATUS_97NK2 FREQUENCY_STATUS_97NK3 ;
21787     +   end;
MPRINT(EM_DIAGRAM):   if missing( FREQUENCY_STATUS_97NK ) then do;
21788     +end;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK1 = .;
21789     +
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK2 = .;
21790     +*** Generate dummy variables for FREQUENCY_STATUS_97NK ;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK3 = .;
21791     +drop FREQUENCY_STATUS_97NK1 FREQUENCY_STATUS_97NK2 FREQUENCY_STATUS_97NK3 ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21792     +if missing( FREQUENCY_STATUS_97NK ) then do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21793     +   FREQUENCY_STATUS_97NK1 = .;
MPRINT(EM_DIAGRAM):   end;
21794     +   FREQUENCY_STATUS_97NK2 = .;
21795     +   FREQUENCY_STATUS_97NK3 = .;
MPRINT(EM_DIAGRAM):   else do;
21796     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
21797     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
21798     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( FREQUENCY_STATUS_97NK , BEST12. );
21799     +else do;
21800     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
21801     +   _dm12 = put( FREQUENCY_STATUS_97NK , BEST12. );
21802     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK1 = 1;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK2 = 0;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK3 = 0;
MPRINT(EM_DIAGRAM):   end;
21803     +   if _dm12 = '1'  then do;
21804     +      FREQUENCY_STATUS_97NK1 = 1;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
21805     +      FREQUENCY_STATUS_97NK2 = 0;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK1 = 0;
21806     +      FREQUENCY_STATUS_97NK3 = 0;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK2 = 1;
21807     +   end;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK3 = 0;
21808     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
21809     +      FREQUENCY_STATUS_97NK1 = 0;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
21810     +      FREQUENCY_STATUS_97NK2 = 1;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK1 = 0;
21811     +      FREQUENCY_STATUS_97NK3 = 0;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK2 = 0;
21812     +   end;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK3 = 1;
21813     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   end;
21814     +      FREQUENCY_STATUS_97NK1 = 0;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
21815     +      FREQUENCY_STATUS_97NK2 = 0;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK1 = -1;
21816     +      FREQUENCY_STATUS_97NK3 = 1;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK2 = -1;
21817     +   end;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK3 = -1;
21818     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   end;
21819     +      FREQUENCY_STATUS_97NK1 = -1;
MPRINT(EM_DIAGRAM):   else do;
21820     +      FREQUENCY_STATUS_97NK2 = -1;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK1 = .;
21821     +      FREQUENCY_STATUS_97NK3 = -1;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK2 = .;
21822     +   end;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK3 = .;
21823     +   else do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21824     +      FREQUENCY_STATUS_97NK1 = .;
MPRINT(EM_DIAGRAM):   end;
21825     +      FREQUENCY_STATUS_97NK2 = .;
MPRINT(EM_DIAGRAM):   end;
21826     +      FREQUENCY_STATUS_97NK3 = .;
21827     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_CARD_PROM_12 ;
21828     +      _DM_BAD = 1;
21829     +   end;
MPRINT(EM_DIAGRAM):   drop G_CARD_PROM_120 G_CARD_PROM_121 G_CARD_PROM_122 G_CARD_PROM_123 G_CARD_PROM_124 G_CARD_PROM_125 ;
21830     +end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
21831     +
MPRINT(EM_DIAGRAM):   G_CARD_PROM_120 = 0;
21832     +*** Generate dummy variables for G_CARD_PROM_12 ;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_121 = 0;
21833     +drop G_CARD_PROM_120 G_CARD_PROM_121 G_CARD_PROM_122 G_CARD_PROM_123
MPRINT(EM_DIAGRAM):   G_CARD_PROM_122 = 0;
21834     +        G_CARD_PROM_124 G_CARD_PROM_125 ;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_123 = 0;
21835     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_124 = 0;
21836     +G_CARD_PROM_120 = 0;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_125 = 0;
21837     +G_CARD_PROM_121 = 0;
MPRINT(EM_DIAGRAM):   if missing( G_CARD_PROM_12 ) then do;
21838     +G_CARD_PROM_122 = 0;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_120 = .;
21839     +G_CARD_PROM_123 = 0;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_121 = .;
21840     +G_CARD_PROM_124 = 0;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_122 = .;
21841     +G_CARD_PROM_125 = 0;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_123 = .;
21842     +if missing( G_CARD_PROM_12 ) then do;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_124 = .;
21843     +   G_CARD_PROM_120 = .;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_125 = .;
21844     +   G_CARD_PROM_121 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21845     +   G_CARD_PROM_122 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21846     +   G_CARD_PROM_123 = .;
MPRINT(EM_DIAGRAM):   end;
21847     +   G_CARD_PROM_124 = .;
21848     +   G_CARD_PROM_125 = .;
MPRINT(EM_DIAGRAM):   else do;
21849     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
21850     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
21851     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( G_CARD_PROM_12 , BEST12. );
21852     +else do;
21853     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
21854     +   _dm12 = put( G_CARD_PROM_12 , BEST12. );
21855     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_125 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
21856     +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_120 = -1;
21857     +      G_CARD_PROM_125 = 1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_121 = -1;
21858     +   end;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_122 = -1;
21859     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_123 = -1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_124 = -1;
21860     +      G_CARD_PROM_120 = -1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_125 = -1;
21861     +      G_CARD_PROM_121 = -1;
MPRINT(EM_DIAGRAM):   end;
21862     +      G_CARD_PROM_122 = -1;
21863     +      G_CARD_PROM_123 = -1;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
21864     +      G_CARD_PROM_124 = -1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_123 = 1;
21865     +      G_CARD_PROM_125 = -1;
MPRINT(EM_DIAGRAM):   end;
21866     +   end;
21867     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_124 = 1;
21868     +      G_CARD_PROM_123 = 1;
MPRINT(EM_DIAGRAM):   end;
21869     +   end;
21870     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_122 = 1;
21871     +      G_CARD_PROM_124 = 1;
MPRINT(EM_DIAGRAM):   end;
21872     +   end;
21873     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_121 = 1;
21874     +      G_CARD_PROM_122 = 1;
MPRINT(EM_DIAGRAM):   end;
21875     +   end;
21876     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_120 = 1;
21877     +      G_CARD_PROM_121 = 1;
MPRINT(EM_DIAGRAM):   end;
21878     +   end;
21879     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_120 = .;
21880     +      G_CARD_PROM_120 = 1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_121 = .;
21881     +   end;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_122 = .;
21882     +   else do;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_123 = .;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_124 = .;
21883     +      G_CARD_PROM_120 = .;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_125 = .;
21884     +      G_CARD_PROM_121 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
21885     +      G_CARD_PROM_122 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21886     +      G_CARD_PROM_123 = .;
MPRINT(EM_DIAGRAM):   end;
21887     +      G_CARD_PROM_124 = .;
MPRINT(EM_DIAGRAM):   end;
21888     +      G_CARD_PROM_125 = .;
21889     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_CLUSTER_CODE ;
21890     +      _DM_BAD = 1;
21891     +   end;
MPRINT(EM_DIAGRAM):   drop G_CLUSTER_CODE0 G_CLUSTER_CODE1 G_CLUSTER_CODE2 G_CLUSTER_CODE3 G_CLUSTER_CODE4 G_CLUSTER_CODE5 G_CLUSTER_CODE6 G_CLUSTER_CODE7 ;
21892     +end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
21893     +
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE0 = 0;
21894     +*** Generate dummy variables for G_CLUSTER_CODE ;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE1 = 0;
21895     +drop G_CLUSTER_CODE0 G_CLUSTER_CODE1 G_CLUSTER_CODE2 G_CLUSTER_CODE3
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE2 = 0;
21896     +        G_CLUSTER_CODE4 G_CLUSTER_CODE5 G_CLUSTER_CODE6 G_CLUSTER_CODE7 ;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE3 = 0;
21897     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE4 = 0;
21898     +G_CLUSTER_CODE0 = 0;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE5 = 0;
21899     +G_CLUSTER_CODE1 = 0;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE6 = 0;
21900     +G_CLUSTER_CODE2 = 0;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE7 = 0;
21901     +G_CLUSTER_CODE3 = 0;
MPRINT(EM_DIAGRAM):   if missing( G_CLUSTER_CODE ) then do;
21902     +G_CLUSTER_CODE4 = 0;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE0 = .;
21903     +G_CLUSTER_CODE5 = 0;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE1 = .;
21904     +G_CLUSTER_CODE6 = 0;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE2 = .;
21905     +G_CLUSTER_CODE7 = 0;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE3 = .;
21906     +if missing( G_CLUSTER_CODE ) then do;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE4 = .;
21907     +   G_CLUSTER_CODE0 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE5 = .;
21908     +   G_CLUSTER_CODE1 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE6 = .;
21909     +   G_CLUSTER_CODE2 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE7 = .;
21910     +   G_CLUSTER_CODE3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21911     +   G_CLUSTER_CODE4 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21912     +   G_CLUSTER_CODE5 = .;
MPRINT(EM_DIAGRAM):   end;
21913     +   G_CLUSTER_CODE6 = .;
21914     +   G_CLUSTER_CODE7 = .;
MPRINT(EM_DIAGRAM):   else do;
21915     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
21916     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
21917     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( G_CLUSTER_CODE , BEST12. );
21918     +else do;
21919     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
21920     +   _dm12 = put( G_CLUSTER_CODE , BEST12. );
21921     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
21922     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE0 = 1;
21923     +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
21924     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   end;
21925     +         if _dm12 <= '1'  then do;
21926     +            if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else do;
21927     +               G_CLUSTER_CODE0 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
21928     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE1 = 1;
21929     +            end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
21930     +            else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
21931     +               if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   end;
21932     +                  G_CLUSTER_CODE1 = 1;
21933     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
21934     +               end;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
21935     +            end;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE2 = 1;
21936     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
21937     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
21938     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
21939     +               G_CLUSTER_CODE2 = 1;
21940     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
21941     +            end;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
21942     +         end;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE3 = 1;
21943     +      end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
21944     +      else do;
MPRINT(EM_DIAGRAM):   end;
21945     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else do;
21946     +            G_CLUSTER_CODE3 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
21947     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE4 = 1;
21948     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
21949     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
21950     +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   end;
21951     +               G_CLUSTER_CODE4 = 1;
MPRINT(EM_DIAGRAM):   end;
21952     +               _dm_find = 1;
21953     +            end;
MPRINT(EM_DIAGRAM):   else do;
21954     +         end;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
21955     +      end;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
21956     +   end;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE5 = 1;
21957     +   else do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
21958     +      if _dm12 <= '6'  then do;
21959     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else do;
21960     +            G_CLUSTER_CODE5 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
21961     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE6 = 1;
21962     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
21963     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
21964     +            if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   end;
21965     +               G_CLUSTER_CODE6 = 1;
21966     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
21967     +            end;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
21968     +         end;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE7 = 1;
21969     +      end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
21970     +      else do;
MPRINT(EM_DIAGRAM):   end;
21971     +         if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   else do;
21972     +            G_CLUSTER_CODE7 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
21973     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE0 = -1;
21974     +         end;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE1 = -1;
21975     +         else do;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE2 = -1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE3 = -1;
21976     +            if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE4 = -1;
21977     +               G_CLUSTER_CODE0 = -1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE5 = -1;
21978     +               G_CLUSTER_CODE1 = -1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE6 = -1;
21979     +               G_CLUSTER_CODE2 = -1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE7 = -1;
21980     +               G_CLUSTER_CODE3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
21981     +               G_CLUSTER_CODE4 = -1;
MPRINT(EM_DIAGRAM):   end;
21982     +               G_CLUSTER_CODE5 = -1;
MPRINT(EM_DIAGRAM):   end;
21983     +               G_CLUSTER_CODE6 = -1;
MPRINT(EM_DIAGRAM):   end;
21984     +               G_CLUSTER_CODE7 = -1;
MPRINT(EM_DIAGRAM):   end;
21985     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
21986     +            end;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE0 = .;
21987     +         end;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE1 = .;
21988     +      end;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE2 = .;
21989     +   end;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE3 = .;
21990     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE4 = .;
21991     +      G_CLUSTER_CODE0 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE5 = .;
21992     +      G_CLUSTER_CODE1 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE6 = .;
21993     +      G_CLUSTER_CODE2 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE7 = .;
21994     +      G_CLUSTER_CODE3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
21995     +      G_CLUSTER_CODE4 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21996     +      G_CLUSTER_CODE5 = .;
MPRINT(EM_DIAGRAM):   end;
21997     +      G_CLUSTER_CODE6 = .;
MPRINT(EM_DIAGRAM):   end;
21998     +      G_CLUSTER_CODE7 = .;
21999     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_RECENT_CARD_RESPONSE_COUNT ;
22000     +      _DM_BAD = 1;
22001     +   end;
MPRINT(EM_DIAGRAM):   drop G_RECENT_CARD_RESPONSE_COUNT0 G_RECENT_CARD_RESPONSE_COUNT1 G_RECENT_CARD_RESPONSE_COUNT2 G_RECENT_CARD_RESPONSE_COUNT3 ;
22002     +end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
22003     +
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT0 = 0;
22004     +*** Generate dummy variables for G_RECENT_CARD_RESPONSE_COUNT ;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT1 = 0;
22005     +drop G_RECENT_CARD_RESPONSE_COUNT0 G_RECENT_CARD_RESPONSE_COUNT1
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT2 = 0;
22006     +        G_RECENT_CARD_RESPONSE_COUNT2 G_RECENT_CARD_RESPONSE_COUNT3 ;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT3 = 0;
22007     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   if missing( G_RECENT_CARD_RESPONSE_COUNT ) then do;
22008     +G_RECENT_CARD_RESPONSE_COUNT0 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT0 = .;
22009     +G_RECENT_CARD_RESPONSE_COUNT1 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT1 = .;
22010     +G_RECENT_CARD_RESPONSE_COUNT2 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT2 = .;
22011     +G_RECENT_CARD_RESPONSE_COUNT3 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT3 = .;
22012     +if missing( G_RECENT_CARD_RESPONSE_COUNT ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22013     +   G_RECENT_CARD_RESPONSE_COUNT0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22014     +   G_RECENT_CARD_RESPONSE_COUNT1 = .;
MPRINT(EM_DIAGRAM):   end;
22015     +   G_RECENT_CARD_RESPONSE_COUNT2 = .;
22016     +   G_RECENT_CARD_RESPONSE_COUNT3 = .;
MPRINT(EM_DIAGRAM):   else do;
22017     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
22018     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22019     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( G_RECENT_CARD_RESPONSE_COUNT , BEST12. );
22020     +else do;
22021     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
22022     +   _dm12 = put( G_RECENT_CARD_RESPONSE_COUNT , BEST12. );
22023     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT0 = 1;
22024     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22025     +   if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   end;
22026     +      if _dm12 <= '1'  then do;
22027     +         if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else do;
22028     +            G_RECENT_CARD_RESPONSE_COUNT0 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22029     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT1 = 1;
22030     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22031     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
22032     +            if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   end;
22033     +               G_RECENT_CARD_RESPONSE_COUNT1 = 1;
22034     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
22035     +            end;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
22036     +         end;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT2 = 1;
22037     +      end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22038     +      else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
22039     +         if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
22040     +            G_RECENT_CARD_RESPONSE_COUNT2 = 1;
22041     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
22042     +         end;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
22043     +      end;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT3 = 1;
22044     +   end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22045     +   else do;
MPRINT(EM_DIAGRAM):   end;
22046     +      if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else do;
22047     +         G_RECENT_CARD_RESPONSE_COUNT3 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
22048     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT0 = -1;
22049     +      end;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT1 = -1;
22050     +      else do;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT2 = -1;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT3 = -1;
22051     +         if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22052     +            G_RECENT_CARD_RESPONSE_COUNT0 = -1;
MPRINT(EM_DIAGRAM):   end;
22053     +            G_RECENT_CARD_RESPONSE_COUNT1 = -1;
MPRINT(EM_DIAGRAM):   end;
22054     +            G_RECENT_CARD_RESPONSE_COUNT2 = -1;
MPRINT(EM_DIAGRAM):   end;
22055     +            G_RECENT_CARD_RESPONSE_COUNT3 = -1;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
22056     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT0 = .;
22057     +         end;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT1 = .;
22058     +      end;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT2 = .;
22059     +   end;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT3 = .;
22060     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22061     +      G_RECENT_CARD_RESPONSE_COUNT0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22062     +      G_RECENT_CARD_RESPONSE_COUNT1 = .;
MPRINT(EM_DIAGRAM):   end;
22063     +      G_RECENT_CARD_RESPONSE_COUNT2 = .;
MPRINT(EM_DIAGRAM):   end;
22064     +      G_RECENT_CARD_RESPONSE_COUNT3 = .;
22065     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_RECENT_RESPONSE_COUNT ;
22066     +      _DM_BAD = 1;
22067     +   end;
MPRINT(EM_DIAGRAM):   drop G_RECENT_RESPONSE_COUNT0 G_RECENT_RESPONSE_COUNT1 G_RECENT_RESPONSE_COUNT2 ;
22068     +end;
MPRINT(EM_DIAGRAM):   if missing( G_RECENT_RESPONSE_COUNT ) then do;
22069     +
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT0 = .;
22070     +*** Generate dummy variables for G_RECENT_RESPONSE_COUNT ;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT1 = .;
22071     +drop G_RECENT_RESPONSE_COUNT0 G_RECENT_RESPONSE_COUNT1
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT2 = .;
22072     +        G_RECENT_RESPONSE_COUNT2 ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22073     +if missing( G_RECENT_RESPONSE_COUNT ) then do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22074     +   G_RECENT_RESPONSE_COUNT0 = .;
MPRINT(EM_DIAGRAM):   end;
22075     +   G_RECENT_RESPONSE_COUNT1 = .;
22076     +   G_RECENT_RESPONSE_COUNT2 = .;
MPRINT(EM_DIAGRAM):   else do;
22077     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
22078     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22079     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( G_RECENT_RESPONSE_COUNT , BEST12. );
22080     +else do;
22081     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
22082     +   _dm12 = put( G_RECENT_RESPONSE_COUNT , BEST12. );
22083     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT0 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT1 = 1;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT2 = 0;
MPRINT(EM_DIAGRAM):   end;
22084     +   if _dm12 = '1'  then do;
22085     +      G_RECENT_RESPONSE_COUNT0 = 0;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
22086     +      G_RECENT_RESPONSE_COUNT1 = 1;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT0 = 0;
22087     +      G_RECENT_RESPONSE_COUNT2 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT1 = 0;
22088     +   end;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT2 = 1;
22089     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
22090     +      G_RECENT_RESPONSE_COUNT0 = 0;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22091     +      G_RECENT_RESPONSE_COUNT1 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT0 = -1;
22092     +      G_RECENT_RESPONSE_COUNT2 = 1;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT1 = -1;
22093     +   end;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT2 = -1;
22094     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   end;
22095     +      G_RECENT_RESPONSE_COUNT0 = -1;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
22096     +      G_RECENT_RESPONSE_COUNT1 = -1;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT0 = 1;
22097     +      G_RECENT_RESPONSE_COUNT2 = -1;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT1 = 0;
22098     +   end;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT2 = 0;
22099     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   end;
22100     +      G_RECENT_RESPONSE_COUNT0 = 1;
MPRINT(EM_DIAGRAM):   else do;
22101     +      G_RECENT_RESPONSE_COUNT1 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT0 = .;
22102     +      G_RECENT_RESPONSE_COUNT2 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT1 = .;
22103     +   end;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT2 = .;
22104     +   else do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22105     +      G_RECENT_RESPONSE_COUNT0 = .;
MPRINT(EM_DIAGRAM):   end;
22106     +      G_RECENT_RESPONSE_COUNT1 = .;
MPRINT(EM_DIAGRAM):   end;
22107     +      G_RECENT_RESPONSE_COUNT2 = .;
22108     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for OPT_LIFETIME_CARD_PROM ;
22109     +      _DM_BAD = 1;
22110     +   end;
MPRINT(EM_DIAGRAM):   drop OPT_LIFETIME_CA01_low_7_5 OPT_LIFETIME_CA02_7_5_12_5 OPT_LIFETIME_CA03_12_5_39_5__M ;
22111     +end;
MPRINT(EM_DIAGRAM):   if missing( OPT_LIFETIME_CARD_PROM ) then do;
22112     +
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA01_low_7_5 = .;
22113     +*** Generate dummy variables for OPT_LIFETIME_CARD_PROM ;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA02_7_5_12_5 = .;
22114     +drop OPT_LIFETIME_CA01_low_7_5 OPT_LIFETIME_CA02_7_5_12_5
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA03_12_5_39_5__M = .;
22115     +        OPT_LIFETIME_CA03_12_5_39_5__M ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22116     +if missing( OPT_LIFETIME_CARD_PROM ) then do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22117     +   OPT_LIFETIME_CA01_low_7_5 = .;
MPRINT(EM_DIAGRAM):   end;
22118     +   OPT_LIFETIME_CA02_7_5_12_5 = .;
22119     +   OPT_LIFETIME_CA03_12_5_39_5__M = .;
MPRINT(EM_DIAGRAM):   else do;
22120     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
22121     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
22122     +end;
22123     +else do;
22124     +   length _dm32 $ 32; drop _dm32 ;
22125     +   %DMNORMCP( OPT_LIFETIME_CARD_PROM , _dm32 )
MPRINT(DMNORMCP):   _dm32=dmnorm(OPT_LIFETIME_CARD_PROM,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm32 = '03:12.5-39.5, MISSING' then do;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA01_low_7_5 = 0;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA02_7_5_12_5 = 0;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA03_12_5_39_5__M = 1;
MPRINT(EM_DIAGRAM):   end;
22126     +   if _dm32 = '03:12.5-39.5, MISSING'  then do;
22127     +      OPT_LIFETIME_CA01_low_7_5 = 0;
MPRINT(EM_DIAGRAM):   else if _dm32 = '02:7.5-12.5' then do;
22128     +      OPT_LIFETIME_CA02_7_5_12_5 = 0;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA01_low_7_5 = 0;
22129     +      OPT_LIFETIME_CA03_12_5_39_5__M = 1;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA02_7_5_12_5 = 1;
22130     +   end;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA03_12_5_39_5__M = 0;
22131     +   else if _dm32 = '02:7.5-12.5'  then do;
MPRINT(EM_DIAGRAM):   end;
22132     +      OPT_LIFETIME_CA01_low_7_5 = 0;
MPRINT(EM_DIAGRAM):   else if _dm32 = '01:LOW-7.5' then do;
22133     +      OPT_LIFETIME_CA02_7_5_12_5 = 1;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA01_low_7_5 = 1;
22134     +      OPT_LIFETIME_CA03_12_5_39_5__M = 0;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA02_7_5_12_5 = 0;
22135     +   end;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA03_12_5_39_5__M = 0;
22136     +   else if _dm32 = '01:LOW-7.5'  then do;
MPRINT(EM_DIAGRAM):   end;
22137     +      OPT_LIFETIME_CA01_low_7_5 = 1;
MPRINT(EM_DIAGRAM):   else if _dm32 = '04:39.5-HIGH' then do;
22138     +      OPT_LIFETIME_CA02_7_5_12_5 = 0;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA01_low_7_5 = -1;
22139     +      OPT_LIFETIME_CA03_12_5_39_5__M = 0;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA02_7_5_12_5 = -1;
22140     +   end;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA03_12_5_39_5__M = -1;
22141     +   else if _dm32 = '04:39.5-HIGH'  then do;
MPRINT(EM_DIAGRAM):   end;
22142     +      OPT_LIFETIME_CA01_low_7_5 = -1;
MPRINT(EM_DIAGRAM):   else do;
22143     +      OPT_LIFETIME_CA02_7_5_12_5 = -1;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA01_low_7_5 = .;
22144     +      OPT_LIFETIME_CA03_12_5_39_5__M = -1;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA02_7_5_12_5 = .;
22145     +   end;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA03_12_5_39_5__M = .;
22146     +   else do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22147     +      OPT_LIFETIME_CA01_low_7_5 = .;
MPRINT(EM_DIAGRAM):   end;
22148     +      OPT_LIFETIME_CA02_7_5_12_5 = .;
MPRINT(EM_DIAGRAM):   end;
22149     +      OPT_LIFETIME_CA03_12_5_39_5__M = .;
22150     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** *************************;
22151     +      _DM_BAD = 1;
22152     +   end;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
22153     +end;
22154     +
22155     +*** *************************;
22156     +*** Checking missing input Interval
MPRINT(EM_DIAGRAM):   IF NMISS( LG10_LAST_GIFT_AMT , MONTHS_SINCE_LAST_GIFT ) THEN DO;
22157     +*** *************************;
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
22158     +
22159     +IF NMISS(
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22160     +   LG10_LAST_GIFT_AMT ,
MPRINT(EM_DIAGRAM):   END;
22161     +   MONTHS_SINCE_LAST_GIFT   ) THEN DO;
MPRINT(EM_DIAGRAM):   *** *************************;
22162     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
22163     +
MPRINT(EM_DIAGRAM):   *** *************************;
22164     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
22165     +END;
22166     +*** *************************;
MPRINT(EM_DIAGRAM):   S_LG10_LAST_GIFT_AMT = -5.04963340818956 + 4.26588117171544 * LG10_LAST_GIFT_AMT ;
22167     +*** Writing the Node intvl ;
22168     +*** *************************;
MPRINT(EM_DIAGRAM):   S_MONTHS_SINCE_LAST_GIFT = -4.51352840067237 + 0.24813657655727 * MONTHS_SINCE_LAST_GIFT ;
22169     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   END;
22170     +   S_LG10_LAST_GIFT_AMT  =    -5.04963340818956 +     4.26588117171544 *
22171     +        LG10_LAST_GIFT_AMT ;
MPRINT(EM_DIAGRAM):   ELSE DO;
22172     +   S_MONTHS_SINCE_LAST_GIFT  =    -4.51352840067237 +     0.24813657655727 *
MPRINT(EM_DIAGRAM):   IF MISSING( LG10_LAST_GIFT_AMT ) THEN S_LG10_LAST_GIFT_AMT = . ;
22173     +        MONTHS_SINCE_LAST_GIFT ;
22174     +END;
22175     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE S_LG10_LAST_GIFT_AMT = -5.04963340818956 + 4.26588117171544 * LG10_LAST_GIFT_AMT ;
MPRINT(EM_DIAGRAM):   IF MISSING( MONTHS_SINCE_LAST_GIFT ) THEN S_MONTHS_SINCE_LAST_GIFT = . ;
22176     +   IF MISSING( LG10_LAST_GIFT_AMT ) THEN S_LG10_LAST_GIFT_AMT  = . ;
22177     +   ELSE S_LG10_LAST_GIFT_AMT  =    -5.04963340818956 +     4.26588117171544 *
22178     +        LG10_LAST_GIFT_AMT ;
MPRINT(EM_DIAGRAM):   ELSE S_MONTHS_SINCE_LAST_GIFT = -4.51352840067237 + 0.24813657655727 * MONTHS_SINCE_LAST_GIFT ;
22179     +   IF MISSING( MONTHS_SINCE_LAST_GIFT ) THEN S_MONTHS_SINCE_LAST_GIFT  = . ;
MPRINT(EM_DIAGRAM):   END;
22180     +   ELSE S_MONTHS_SINCE_LAST_GIFT
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
22181     +          =    -4.51352840067237 +     0.24813657655727 *
MPRINT(EM_DIAGRAM):   *** *************************;
22182     +        MONTHS_SINCE_LAST_GIFT ;
MPRINT(EM_DIAGRAM):   *** *************************;
22183     +END;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
22184     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22185     +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** *************************;
22186     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
22187     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
22188     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
22189     +*** *************************;
22190     +*** *************************;
MPRINT(EM_DIAGRAM):   H11 = 0.25007471264748 * S_LG10_LAST_GIFT_AMT + 0.10498832743618 * S_MONTHS_SINCE_LAST_GIFT ;
22191     +*** Writing the Node H1 ;
22192     +*** *************************;
MPRINT(EM_DIAGRAM):   H12 = -0.39538724747515 * S_LG10_LAST_GIFT_AMT + 0.21734155947532 * S_MONTHS_SINCE_LAST_GIFT ;
22193     +IF _DM_BAD EQ 0 THEN DO;
22194     +   H11  =     0.25007471264748 * S_LG10_LAST_GIFT_AMT
MPRINT(EM_DIAGRAM):   H13 = 0.03651134728903 * S_LG10_LAST_GIFT_AMT + -0.09664002352067 * S_MONTHS_SINCE_LAST_GIFT ;
22195     +          +     0.10498832743618 * S_MONTHS_SINCE_LAST_GIFT ;
22196     +   H12  =    -0.39538724747515 * S_LG10_LAST_GIFT_AMT
MPRINT(EM_DIAGRAM):   H14 = -0.17363634739902 * S_LG10_LAST_GIFT_AMT + -0.11281438991641 * S_MONTHS_SINCE_LAST_GIFT ;
22197     +          +     0.21734155947532 * S_MONTHS_SINCE_LAST_GIFT ;
22198     +   H13  =     0.03651134728903 * S_LG10_LAST_GIFT_AMT
MPRINT(EM_DIAGRAM):   H15 = -0.14254997101594 * S_LG10_LAST_GIFT_AMT + -0.15655966113876 * S_MONTHS_SINCE_LAST_GIFT ;
22199     +          +    -0.09664002352067 * S_MONTHS_SINCE_LAST_GIFT ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.03005913876546 * PEP_STAR0 ;
22200     +   H14  =    -0.17363634739902 * S_LG10_LAST_GIFT_AMT
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.20300181645568 * PEP_STAR0 ;
22201     +          +    -0.11281438991641 * S_MONTHS_SINCE_LAST_GIFT ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.0702326980168 * PEP_STAR0 ;
22202     +   H15  =    -0.14254997101594 * S_LG10_LAST_GIFT_AMT
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.11231253274944 * PEP_STAR0 ;
22203     +          +    -0.15655966113876 * S_MONTHS_SINCE_LAST_GIFT ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.12761725344185 * PEP_STAR0 ;
22204     +   H11  = H11  +     0.03005913876546 * PEP_STAR0 ;
22205     +   H12  = H12  +    -0.20300181645568 * PEP_STAR0 ;
22206     +   H13  = H13  +     -0.0702326980168 * PEP_STAR0 ;
22207     +   H14  = H14  +     0.11231253274944 * PEP_STAR0 ;
22208     +   H15  = H15  +     0.12761725344185 * PEP_STAR0 ;
22209     +   H11  = H11  +    -0.14563113114845 * FREQUENCY_STATUS_97NK1
22210     +          +     0.20212594449096 * FREQUENCY_STATUS_97NK2
22211     +          +      0.0014929554507 * FREQUENCY_STATUS_97NK3
22212     +          +     -0.3940730057307 * G_CARD_PROM_120  +     0.23611176024002 *
22213     +        G_CARD_PROM_121  +    -0.04191022783843 * G_CARD_PROM_122
22214     +          +    -0.15096620679125 * G_CARD_PROM_123  +     0.05924770061396 *
22215     +        G_CARD_PROM_124  +    -0.01543688591302 * G_CARD_PROM_125
22216     +          +     0.26860316904537 * G_CLUSTER_CODE0  +    -0.14130396415989 *
22217     +        G_CLUSTER_CODE1  +    -0.01140664525568 * G_CLUSTER_CODE2
22218     +          +     0.02006369183742 * G_CLUSTER_CODE3  +    -0.17418810574957 *
22219     +        G_CLUSTER_CODE4  +     0.19361103269638 * G_CLUSTER_CODE5
22220     +          +     0.11922218519382 * G_CLUSTER_CODE6  +    -0.21686647521989 *
22221     +        G_CLUSTER_CODE7  +    -0.06010688189404 *
22222     +        G_RECENT_CARD_RESPONSE_COUNT0  +      0.1913505144762 *
22223     +        G_RECENT_CARD_RESPONSE_COUNT1  +    -0.06710273665895 *
22224     +        G_RECENT_CARD_RESPONSE_COUNT2  +     0.24474589642934 *
22225     +        G_RECENT_CARD_RESPONSE_COUNT3  +     -0.2677452207491 *
22226     +        G_RECENT_RESPONSE_COUNT0  +    -0.01933616335513 *
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.14563113114845 * FREQUENCY_STATUS_97NK1 + 0.20212594449096 * FREQUENCY_STATUS_97NK2 + 0.0014929554507 * FREQUENCY_STATUS_97NK3 + -0.3940730057307 * G_CARD_PROM_120 + 0.23611176024002 * G_CARD_PROM_121 + 
-0.04191022783843 * G_CARD_PROM_122 + -0.15096620679125 * G_CARD_PROM_123 + 0.05924770061396 * G_CARD_PROM_124 + -0.01543688591302 * G_CARD_PROM_125 + 0.26860316904537 * G_CLUSTER_CODE0 + -0.14130396415989 * G_CLUSTER_CODE1 + -0.01140664525568 * 
G_CLUSTER_CODE2 + 0.02006369183742 * G_CLUSTER_CODE3 + -0.17418810574957 * G_CLUSTER_CODE4 + 0.19361103269638 * G_CLUSTER_CODE5 + 0.11922218519382 * G_CLUSTER_CODE6 + -0.21686647521989 * G_CLUSTER_CODE7 + -0.06010688189404 * G_RECENT_CARD_RESPONSE_COUNT0 
+ 0.1913505144762 * G_RECENT_CARD_RESPONSE_COUNT1 + -0.06710273665895 * G_RECENT_CARD_RESPONSE_COUNT2 + 0.24474589642934 * G_RECENT_CARD_RESPONSE_COUNT3 + -0.2677452207491 * G_RECENT_RESPONSE_COUNT0 + -0.01933616335513 * G_RECENT_RESPONSE_COUNT1 + 
-0.09968572062077 * G_RECENT_RESPONSE_COUNT2 + 0.25212507530897 * OPT_LIFETIME_CA01_low_7_5 + -0.01069103886115 * OPT_LIFETIME_CA02_7_5_12_5 + -0.05078242863735 * OPT_LIFETIME_CA03_12_5_39_5__M ;
22227     +        G_RECENT_RESPONSE_COUNT1  +    -0.09968572062077 *
22228     +        G_RECENT_RESPONSE_COUNT2  +     0.25212507530897 *
22229     +        OPT_LIFETIME_CA01_low_7_5  +    -0.01069103886115 *
22230     +        OPT_LIFETIME_CA02_7_5_12_5  +    -0.05078242863735 *
22231     +        OPT_LIFETIME_CA03_12_5_39_5__M ;
22232     +   H12  = H12  +    -0.15922294620858 * FREQUENCY_STATUS_97NK1
22233     +          +    -0.07230440371065 * FREQUENCY_STATUS_97NK2
22234     +          +     0.19651639022078 * FREQUENCY_STATUS_97NK3
22235     +          +     0.03450407854231 * G_CARD_PROM_120  +     0.54519622345246 *
22236     +        G_CARD_PROM_121  +     0.00590725896404 * G_CARD_PROM_122
22237     +          +    -0.00190622772802 * G_CARD_PROM_123  +     0.03704515845455 *
22238     +        G_CARD_PROM_124  +     0.04494738024974 * G_CARD_PROM_125
22239     +          +     0.02509541631996 * G_CLUSTER_CODE0  +     0.28228578843993 *
22240     +        G_CLUSTER_CODE1  +    -0.03490481006781 * G_CLUSTER_CODE2
22241     +          +     0.24458007180613 * G_CLUSTER_CODE3  +    -0.11377030781566 *
22242     +        G_CLUSTER_CODE4  +       0.070813064555 * G_CLUSTER_CODE5
22243     +          +     0.04243998767648 * G_CLUSTER_CODE6  +    -0.13575994294521 *
22244     +        G_CLUSTER_CODE7  +     0.16034581822961 *
22245     +        G_RECENT_CARD_RESPONSE_COUNT0  +     0.13143121791703 *
22246     +        G_RECENT_CARD_RESPONSE_COUNT1  +     0.01595129526801 *
22247     +        G_RECENT_CARD_RESPONSE_COUNT2  +     -0.2446477302246 *
22248     +        G_RECENT_CARD_RESPONSE_COUNT3  +    -0.33705333365062 *
22249     +        G_RECENT_RESPONSE_COUNT0  +     0.13157294335724 *
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.15922294620858 * FREQUENCY_STATUS_97NK1 + -0.07230440371065 * FREQUENCY_STATUS_97NK2 + 0.19651639022078 * FREQUENCY_STATUS_97NK3 + 0.03450407854231 * G_CARD_PROM_120 + 0.54519622345246 * G_CARD_PROM_121 + 
0.00590725896404 * G_CARD_PROM_122 + -0.00190622772802 * G_CARD_PROM_123 + 0.03704515845455 * G_CARD_PROM_124 + 0.04494738024974 * G_CARD_PROM_125 + 0.02509541631996 * G_CLUSTER_CODE0 + 0.28228578843993 * G_CLUSTER_CODE1 + -0.03490481006781 * 
G_CLUSTER_CODE2 + 0.24458007180613 * G_CLUSTER_CODE3 + -0.11377030781566 * G_CLUSTER_CODE4 + 0.070813064555 * G_CLUSTER_CODE5 + 0.04243998767648 * G_CLUSTER_CODE6 + -0.13575994294521 * G_CLUSTER_CODE7 + 0.16034581822961 * G_RECENT_CARD_RESPONSE_COUNT0 + 
0.13143121791703 * G_RECENT_CARD_RESPONSE_COUNT1 + 0.01595129526801 * G_RECENT_CARD_RESPONSE_COUNT2 + -0.2446477302246 * G_RECENT_CARD_RESPONSE_COUNT3 + -0.33705333365062 * G_RECENT_RESPONSE_COUNT0 + 0.13157294335724 * G_RECENT_RESPONSE_COUNT1 + 
-0.18135166952765 * G_RECENT_RESPONSE_COUNT2 + 0.00473806905498 * OPT_LIFETIME_CA01_low_7_5 + 0.0385899725921 * OPT_LIFETIME_CA02_7_5_12_5 + 0.24306387190096 * OPT_LIFETIME_CA03_12_5_39_5__M ;
22250     +        G_RECENT_RESPONSE_COUNT1  +    -0.18135166952765 *
22251     +        G_RECENT_RESPONSE_COUNT2  +     0.00473806905498 *
22252     +        OPT_LIFETIME_CA01_low_7_5  +      0.0385899725921 *
22253     +        OPT_LIFETIME_CA02_7_5_12_5  +     0.24306387190096 *
22254     +        OPT_LIFETIME_CA03_12_5_39_5__M ;
22255     +   H13  = H13  +     -0.1696906013875 * FREQUENCY_STATUS_97NK1
22256     +          +     0.40692947294537 * FREQUENCY_STATUS_97NK2
22257     +          +    -0.05734106633692 * FREQUENCY_STATUS_97NK3
22258     +          +     0.00484710407197 * G_CARD_PROM_120  +    -0.22900315315716 *
22259     +        G_CARD_PROM_121  +     -0.1654198369454 * G_CARD_PROM_122
22260     +          +    -0.06663310381687 * G_CARD_PROM_123  +    -0.05896495648004 *
22261     +        G_CARD_PROM_124  +    -0.26859656461372 * G_CARD_PROM_125
22262     +          +    -0.00784646645783 * G_CLUSTER_CODE0  +     0.11431550816909 *
22263     +        G_CLUSTER_CODE1  +    -0.11983779104434 * G_CLUSTER_CODE2
22264     +          +    -0.02173959144578 * G_CLUSTER_CODE3  +    -0.06575806168267 *
22265     +        G_CLUSTER_CODE4  +     0.22091202516084 * G_CLUSTER_CODE5
22266     +          +    -0.27731416675693 * G_CLUSTER_CODE6  +     0.05420932906241 *
22267     +        G_CLUSTER_CODE7  +    -0.13408597060288 *
22268     +        G_RECENT_CARD_RESPONSE_COUNT0  +     0.17972293211417 *
22269     +        G_RECENT_CARD_RESPONSE_COUNT1  +     0.20599895754343 *
22270     +        G_RECENT_CARD_RESPONSE_COUNT2  +    -0.01071237536063 *
22271     +        G_RECENT_CARD_RESPONSE_COUNT3  +     0.02554398537131 *
22272     +        G_RECENT_RESPONSE_COUNT0  +     0.16098973900149 *
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.1696906013875 * FREQUENCY_STATUS_97NK1 + 0.40692947294537 * FREQUENCY_STATUS_97NK2 + -0.05734106633692 * FREQUENCY_STATUS_97NK3 + 0.00484710407197 * G_CARD_PROM_120 + -0.22900315315716 * G_CARD_PROM_121 + 
-0.1654198369454 * G_CARD_PROM_122 + -0.06663310381687 * G_CARD_PROM_123 + -0.05896495648004 * G_CARD_PROM_124 + -0.26859656461372 * G_CARD_PROM_125 + -0.00784646645783 * G_CLUSTER_CODE0 + 0.11431550816909 * G_CLUSTER_CODE1 + -0.11983779104434 * 
G_CLUSTER_CODE2 + -0.02173959144578 * G_CLUSTER_CODE3 + -0.06575806168267 * G_CLUSTER_CODE4 + 0.22091202516084 * G_CLUSTER_CODE5 + -0.27731416675693 * G_CLUSTER_CODE6 + 0.05420932906241 * G_CLUSTER_CODE7 + -0.13408597060288 * G_RECENT_CARD_RESPONSE_COUNT0 
+ 0.17972293211417 * G_RECENT_CARD_RESPONSE_COUNT1 + 0.20599895754343 * G_RECENT_CARD_RESPONSE_COUNT2 + -0.01071237536063 * G_RECENT_CARD_RESPONSE_COUNT3 + 0.02554398537131 * G_RECENT_RESPONSE_COUNT0 + 0.16098973900149 * G_RECENT_RESPONSE_COUNT1 + 
-0.16666227055982 * G_RECENT_RESPONSE_COUNT2 + -0.27758801103872 * OPT_LIFETIME_CA01_low_7_5 + 0.25757463583859 * OPT_LIFETIME_CA02_7_5_12_5 + 0.25237716930391 * OPT_LIFETIME_CA03_12_5_39_5__M ;
22273     +        G_RECENT_RESPONSE_COUNT1  +    -0.16666227055982 *
22274     +        G_RECENT_RESPONSE_COUNT2  +    -0.27758801103872 *
22275     +        OPT_LIFETIME_CA01_low_7_5  +     0.25757463583859 *
22276     +        OPT_LIFETIME_CA02_7_5_12_5  +     0.25237716930391 *
22277     +        OPT_LIFETIME_CA03_12_5_39_5__M ;
22278     +   H14  = H14  +    -0.03443861703329 * FREQUENCY_STATUS_97NK1
22279     +          +     0.25396033344922 * FREQUENCY_STATUS_97NK2
22280     +          +     0.26162238812084 * FREQUENCY_STATUS_97NK3
22281     +          +    -0.01577837970421 * G_CARD_PROM_120  +    -0.04100216988281 *
22282     +        G_CARD_PROM_121  +     0.00567927330601 * G_CARD_PROM_122
22283     +          +    -0.13184132585823 * G_CARD_PROM_123  +    -0.02412146842202 *
22284     +        G_CARD_PROM_124  +    -0.02942687972544 * G_CARD_PROM_125
22285     +          +     0.02755483757796 * G_CLUSTER_CODE0  +    -0.14031288884306 *
22286     +        G_CLUSTER_CODE1  +    -0.17104676518115 * G_CLUSTER_CODE2
22287     +          +      0.0714048658162 * G_CLUSTER_CODE3  +    -0.19368179923697 *
22288     +        G_CLUSTER_CODE4  +     0.04423930483681 * G_CLUSTER_CODE5
22289     +          +    -0.12878883597515 * G_CLUSTER_CODE6  +     0.15510351027961 *
22290     +        G_CLUSTER_CODE7  +      0.1860788202747 *
22291     +        G_RECENT_CARD_RESPONSE_COUNT0  +    -0.34769629166766 *
22292     +        G_RECENT_CARD_RESPONSE_COUNT1  +     -0.3487122552139 *
22293     +        G_RECENT_CARD_RESPONSE_COUNT2  +    -0.00671606308498 *
22294     +        G_RECENT_CARD_RESPONSE_COUNT3  +    -0.17813215537047 *
22295     +        G_RECENT_RESPONSE_COUNT0  +     0.18702606774865 *
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.03443861703329 * FREQUENCY_STATUS_97NK1 + 0.25396033344922 * FREQUENCY_STATUS_97NK2 + 0.26162238812084 * FREQUENCY_STATUS_97NK3 + -0.01577837970421 * G_CARD_PROM_120 + -0.04100216988281 * G_CARD_PROM_121 + 
0.00567927330601 * G_CARD_PROM_122 + -0.13184132585823 * G_CARD_PROM_123 + -0.02412146842202 * G_CARD_PROM_124 + -0.02942687972544 * G_CARD_PROM_125 + 0.02755483757796 * G_CLUSTER_CODE0 + -0.14031288884306 * G_CLUSTER_CODE1 + -0.17104676518115 * 
G_CLUSTER_CODE2 + 0.0714048658162 * G_CLUSTER_CODE3 + -0.19368179923697 * G_CLUSTER_CODE4 + 0.04423930483681 * G_CLUSTER_CODE5 + -0.12878883597515 * G_CLUSTER_CODE6 + 0.15510351027961 * G_CLUSTER_CODE7 + 0.1860788202747 * G_RECENT_CARD_RESPONSE_COUNT0 + 
-0.34769629166766 * G_RECENT_CARD_RESPONSE_COUNT1 + -0.3487122552139 * G_RECENT_CARD_RESPONSE_COUNT2 + -0.00671606308498 * G_RECENT_CARD_RESPONSE_COUNT3 + -0.17813215537047 * G_RECENT_RESPONSE_COUNT0 + 0.18702606774865 * G_RECENT_RESPONSE_COUNT1 + 
-0.03579815700308 * G_RECENT_RESPONSE_COUNT2 + 0.163759524503 * OPT_LIFETIME_CA01_low_7_5 + -0.06082717997309 * OPT_LIFETIME_CA02_7_5_12_5 + -0.11457813018401 * OPT_LIFETIME_CA03_12_5_39_5__M ;
22296     +        G_RECENT_RESPONSE_COUNT1  +    -0.03579815700308 *
22297     +        G_RECENT_RESPONSE_COUNT2  +       0.163759524503 *
22298     +        OPT_LIFETIME_CA01_low_7_5  +    -0.06082717997309 *
22299     +        OPT_LIFETIME_CA02_7_5_12_5  +    -0.11457813018401 *
22300     +        OPT_LIFETIME_CA03_12_5_39_5__M ;
22301     +   H15  = H15  +    -0.24636583525145 * FREQUENCY_STATUS_97NK1
22302     +          +    -0.13397467541673 * FREQUENCY_STATUS_97NK2
22303     +          +     0.03738446556582 * FREQUENCY_STATUS_97NK3
22304     +          +    -0.04028604364442 * G_CARD_PROM_120  +     0.25890223458841 *
22305     +        G_CARD_PROM_121  +    -0.32315566530631 * G_CARD_PROM_122
22306     +          +     0.24088252059109 * G_CARD_PROM_123  +    -0.12162837044901 *
22307     +        G_CARD_PROM_124  +     0.19399925575937 * G_CARD_PROM_125
22308     +          +     0.31384309760906 * G_CLUSTER_CODE0  +    -0.05837182941526 *
22309     +        G_CLUSTER_CODE1  +    -0.24457979427513 * G_CLUSTER_CODE2
22310     +          +    -0.38348549398829 * G_CLUSTER_CODE3  +     0.16093257412791 *
22311     +        G_CLUSTER_CODE4  +     0.19312287587839 * G_CLUSTER_CODE5
22312     +          +     0.05694856113051 * G_CLUSTER_CODE6  +    -0.14592394866605 *
22313     +        G_CLUSTER_CODE7  +     0.10136853908125 *
22314     +        G_RECENT_CARD_RESPONSE_COUNT0  +     0.09013931998392 *
22315     +        G_RECENT_CARD_RESPONSE_COUNT1  +    -0.17333289980295 *
22316     +        G_RECENT_CARD_RESPONSE_COUNT2  +    -0.13541861153861 *
22317     +        G_RECENT_CARD_RESPONSE_COUNT3  +    -0.17636606720962 *
22318     +        G_RECENT_RESPONSE_COUNT0  +    -0.33374677941973 *
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.24636583525145 * FREQUENCY_STATUS_97NK1 + -0.13397467541673 * FREQUENCY_STATUS_97NK2 + 0.03738446556582 * FREQUENCY_STATUS_97NK3 + -0.04028604364442 * G_CARD_PROM_120 + 0.25890223458841 * G_CARD_PROM_121 + 
-0.32315566530631 * G_CARD_PROM_122 + 0.24088252059109 * G_CARD_PROM_123 + -0.12162837044901 * G_CARD_PROM_124 + 0.19399925575937 * G_CARD_PROM_125 + 0.31384309760906 * G_CLUSTER_CODE0 + -0.05837182941526 * G_CLUSTER_CODE1 + -0.24457979427513 * 
G_CLUSTER_CODE2 + -0.38348549398829 * G_CLUSTER_CODE3 + 0.16093257412791 * G_CLUSTER_CODE4 + 0.19312287587839 * G_CLUSTER_CODE5 + 0.05694856113051 * G_CLUSTER_CODE6 + -0.14592394866605 * G_CLUSTER_CODE7 + 0.10136853908125 * G_RECENT_CARD_RESPONSE_COUNT0 + 
0.09013931998392 * G_RECENT_CARD_RESPONSE_COUNT1 + -0.17333289980295 * G_RECENT_CARD_RESPONSE_COUNT2 + -0.13541861153861 * G_RECENT_CARD_RESPONSE_COUNT3 + -0.17636606720962 * G_RECENT_RESPONSE_COUNT0 + -0.33374677941973 * G_RECENT_RESPONSE_COUNT1 + 
0.13347672256229 * G_RECENT_RESPONSE_COUNT2 + 0.0081287800932 * OPT_LIFETIME_CA01_low_7_5 + 0.04271317088041 * OPT_LIFETIME_CA02_7_5_12_5 + 0.28825592588835 * OPT_LIFETIME_CA03_12_5_39_5__M ;
22319     +        G_RECENT_RESPONSE_COUNT1  +     0.13347672256229 *
MPRINT(EM_DIAGRAM):   H11 = -0.12061348926487 + H11 ;
22320     +        G_RECENT_RESPONSE_COUNT2  +      0.0081287800932 *
MPRINT(EM_DIAGRAM):   H12 = 1.44828367707358 + H12 ;
22321     +        OPT_LIFETIME_CA01_low_7_5  +     0.04271317088041 *
MPRINT(EM_DIAGRAM):   H13 = 0.66939934654328 + H13 ;
22322     +        OPT_LIFETIME_CA02_7_5_12_5  +     0.28825592588835 *
MPRINT(EM_DIAGRAM):   H14 = -1.05032736753047 + H14 ;
22323     +        OPT_LIFETIME_CA03_12_5_39_5__M ;
MPRINT(EM_DIAGRAM):   H15 = 0.63427443678027 + H15 ;
22324     +   H11  =    -0.12061348926487 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
22325     +   H12  =     1.44828367707358 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
22326     +   H13  =     0.66939934654328 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
22327     +   H14  =    -1.05032736753047 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
22328     +   H15  =     0.63427443678027 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
22329     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   END;
22330     +   H12  = TANH(H12 );
22331     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   ELSE DO;
22332     +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H11 = .;
22333     +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H12 = .;
22334     +END;
MPRINT(EM_DIAGRAM):   H13 = .;
22335     +ELSE DO;
MPRINT(EM_DIAGRAM):   H14 = .;
MPRINT(EM_DIAGRAM):   H15 = .;
22336     +   H11  = .;
MPRINT(EM_DIAGRAM):   END;
22337     +   H12  = .;
MPRINT(EM_DIAGRAM):   *** *************************;
22338     +   H13  = .;
MPRINT(EM_DIAGRAM):   *** Writing the Node TARGET_B ;
22339     +   H14  = .;
MPRINT(EM_DIAGRAM):   *** *************************;
22340     +   H15  = .;
22341     +END;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for TARGET_B ;
22342     +*** *************************;
MPRINT(EM_DIAGRAM):   drop TARGET_B1 TARGET_B0 ;
22343     +*** Writing the Node TARGET_B ;
MPRINT(EM_DIAGRAM):   label F_TARGET_B = 'From: TARGET_B' ;
22344     +*** *************************;
22345     +
MPRINT(EM_DIAGRAM):   length F_TARGET_B $ 12;
22346     +*** Generate dummy variables for TARGET_B ;
22347     +drop TARGET_B1 TARGET_B0 ;
MPRINT(EM_DIAGRAM):   F_TARGET_B = put( TARGET_B , BEST12. );
22348     +label F_TARGET_B = 'From: TARGET_B' ;
22349     +length F_TARGET_B $ 12;
MPRINT(DMNORMIP):   call dmnorm(F_TARGET_B,
22350     +F_TARGET_B = put( TARGET_B , BEST12. );
22351     +%DMNORMIP( F_TARGET_B )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( TARGET_B ) then do;
MPRINT(EM_DIAGRAM):   TARGET_B1 = .;
MPRINT(EM_DIAGRAM):   TARGET_B0 = .;
MPRINT(EM_DIAGRAM):   end;
22352     +if missing( TARGET_B ) then do;
MPRINT(EM_DIAGRAM):   else do;
22353     +   TARGET_B1 = .;
MPRINT(EM_DIAGRAM):   if F_TARGET_B = '0' then do;
22354     +   TARGET_B0 = .;
MPRINT(EM_DIAGRAM):   TARGET_B1 = 0;
22355     +end;
MPRINT(EM_DIAGRAM):   TARGET_B0 = 1;
22356     +else do;
MPRINT(EM_DIAGRAM):   end;
22357     +   if F_TARGET_B = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_TARGET_B = '1' then do;
22358     +      TARGET_B1 = 0;
MPRINT(EM_DIAGRAM):   TARGET_B1 = 1;
22359     +      TARGET_B0 = 1;
MPRINT(EM_DIAGRAM):   TARGET_B0 = 0;
22360     +   end;
MPRINT(EM_DIAGRAM):   end;
22361     +   else if F_TARGET_B = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
22362     +      TARGET_B1 = 1;
MPRINT(EM_DIAGRAM):   TARGET_B1 = .;
22363     +      TARGET_B0 = 0;
MPRINT(EM_DIAGRAM):   TARGET_B0 = .;
22364     +   end;
MPRINT(EM_DIAGRAM):   end;
22365     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
22366     +      TARGET_B1 = .;
22367     +      TARGET_B0 = .;
22368     +   end;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.02195352842033 * H11 + 0.21907912260295 * H12 + -0.00602000947085 * H13 + -0.16721387837298 * H14 + 0.00921300971748 * H15 ;
22369     +end;
22370     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = P_TARGET_B1 + -0.07788676399924 * S_LG10_LAST_GIFT_AMT + -0.1126115350924 * S_MONTHS_SINCE_LAST_GIFT ;
22371     +   P_TARGET_B1  =     0.02195352842033 * H11  +     0.21907912260295 * H12
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = P_TARGET_B1 + -0.06296582382211 * PEP_STAR0 ;
22372     +          +    -0.00602000947085 * H13  +    -0.16721387837298 * H14
22373     +          +     0.00921300971748 * H15 ;
22374     +   P_TARGET_B1  = P_TARGET_B1  +    -0.07788676399924 * S_LG10_LAST_GIFT_AMT
22375     +          +     -0.1126115350924 * S_MONTHS_SINCE_LAST_GIFT ;
22376     +   P_TARGET_B1  = P_TARGET_B1  +    -0.06296582382211 * PEP_STAR0 ;
22377     +   P_TARGET_B1  = P_TARGET_B1  +    -0.18493968438091 * FREQUENCY_STATUS_97NK1
22378     +          +     -0.0649803954514 * FREQUENCY_STATUS_97NK2
22379     +          +     0.08894436136873 * FREQUENCY_STATUS_97NK3
22380     +          +     0.05460935752949 * G_CARD_PROM_120  +     0.14425413681475 *
22381     +        G_CARD_PROM_121  +     0.05916771935944 * G_CARD_PROM_122
22382     +          +    -0.02256668123949 * G_CARD_PROM_123  +     0.17355405358596 *
22383     +        G_CARD_PROM_124  +    -0.33281630485931 * G_CARD_PROM_125
22384     +          +     0.26831752125435 * G_CLUSTER_CODE0  +     0.31093381696928 *
22385     +        G_CLUSTER_CODE1  +       0.162142533014 * G_CLUSTER_CODE2
22386     +          +     0.12085717714535 * G_CLUSTER_CODE3  +     0.02721673499213 *
22387     +        G_CLUSTER_CODE4  +    -0.05819891225349 * G_CLUSTER_CODE5
22388     +          +    -0.10468782734892 * G_CLUSTER_CODE6  +    -0.31378426726894 *
22389     +        G_CLUSTER_CODE7  +     0.31663647867234 *
22390     +        G_RECENT_CARD_RESPONSE_COUNT0  +    -0.00979202314261 *
22391     +        G_RECENT_CARD_RESPONSE_COUNT1  +    -0.06666722392774 *
22392     +        G_RECENT_CARD_RESPONSE_COUNT2  +     -0.0496077950265 *
22393     +        G_RECENT_CARD_RESPONSE_COUNT3  +      0.0792950327838 *
22394     +        G_RECENT_RESPONSE_COUNT0  +     0.01232282922993 *
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = P_TARGET_B1 + -0.18493968438091 * FREQUENCY_STATUS_97NK1 + -0.0649803954514 * FREQUENCY_STATUS_97NK2 + 0.08894436136873 * FREQUENCY_STATUS_97NK3 + 0.05460935752949 * G_CARD_PROM_120 + 0.14425413681475 * G_CARD_PROM_121 
+ 0.05916771935944 * G_CARD_PROM_122 + -0.02256668123949 * G_CARD_PROM_123 + 0.17355405358596 * G_CARD_PROM_124 + -0.33281630485931 * G_CARD_PROM_125 + 0.26831752125435 * G_CLUSTER_CODE0 + 0.31093381696928 * G_CLUSTER_CODE1 + 0.162142533014 * 
G_CLUSTER_CODE2 + 0.12085717714535 * G_CLUSTER_CODE3 + 0.02721673499213 * G_CLUSTER_CODE4 + -0.05819891225349 * G_CLUSTER_CODE5 + -0.10468782734892 * G_CLUSTER_CODE6 + -0.31378426726894 * G_CLUSTER_CODE7 + 0.31663647867234 * G_RECENT_CARD_RESPONSE_COUNT0 
+ -0.00979202314261 * G_RECENT_CARD_RESPONSE_COUNT1 + -0.06666722392774 * G_RECENT_CARD_RESPONSE_COUNT2 + -0.0496077950265 * G_RECENT_CARD_RESPONSE_COUNT3 + 0.0792950327838 * G_RECENT_RESPONSE_COUNT0 + 0.01232282922993 * G_RECENT_RESPONSE_COUNT1 + 
-0.03593917372911 * G_RECENT_RESPONSE_COUNT2 + -0.31035309637507 * OPT_LIFETIME_CA01_low_7_5 + -0.02898637915334 * OPT_LIFETIME_CA02_7_5_12_5 + 0.03588269807094 * OPT_LIFETIME_CA03_12_5_39_5__M ;
22395     +        G_RECENT_RESPONSE_COUNT1  +    -0.03593917372911 *
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = -1.09866682917952 + P_TARGET_B1 ;
22396     +        G_RECENT_RESPONSE_COUNT2  +    -0.31035309637507 *
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0;
22397     +        OPT_LIFETIME_CA01_low_7_5  +    -0.02898637915334 *
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_TARGET_B1 , P_TARGET_B0 );
22398     +        OPT_LIFETIME_CA02_7_5_12_5  +     0.03588269807094 *
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
22399     +        OPT_LIFETIME_CA03_12_5_39_5__M ;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = EXP(P_TARGET_B1 - _MAX_);
22400     +   P_TARGET_B1  =    -1.09866682917952 + P_TARGET_B1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_TARGET_B1 ;
22401     +   P_TARGET_B0  = 0;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = EXP(P_TARGET_B0 - _MAX_);
22402     +   _MAX_ = MAX (P_TARGET_B1 , P_TARGET_B0 );
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_TARGET_B0 ;
22403     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = P_TARGET_B1 / _SUM_;
22404     +   P_TARGET_B1  = EXP(P_TARGET_B1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = P_TARGET_B0 / _SUM_;
22405     +   _SUM_ = _SUM_ + P_TARGET_B1 ;
MPRINT(EM_DIAGRAM):   END;
22406     +   P_TARGET_B0  = EXP(P_TARGET_B0  - _MAX_);
22407     +   _SUM_ = _SUM_ + P_TARGET_B0 ;
MPRINT(EM_DIAGRAM):   ELSE DO;
22408     +   P_TARGET_B1  = P_TARGET_B1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = .;
22409     +   P_TARGET_B0  = P_TARGET_B0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = .;
22410     +END;
MPRINT(EM_DIAGRAM):   END;
22411     +ELSE DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.25004693073024;
22412     +   P_TARGET_B1  = .;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.74995306926975;
22413     +   P_TARGET_B0  = .;
MPRINT(EM_DIAGRAM):   END;
22414     +END;
MPRINT(EM_DIAGRAM):   *** *****************************;
22415     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node TARGET_B ;
22416     +   P_TARGET_B1  =     0.25004693073024;
MPRINT(EM_DIAGRAM):   *** ******************************;
22417     +   P_TARGET_B0  =     0.74995306926975;
MPRINT(EM_DIAGRAM):   IF MISSING( TARGET_B1 ) THEN R_TARGET_B1 = . ;
22418     +END;
22419     +*** *****************************;
MPRINT(EM_DIAGRAM):   ELSE R_TARGET_B1 = TARGET_B1 - P_TARGET_B1 ;
22420     +*** Writing the Residuals  of the Node TARGET_B ;
MPRINT(EM_DIAGRAM):   IF MISSING( TARGET_B0 ) THEN R_TARGET_B0 = . ;
22421     +*** ******************************;
22422     +IF MISSING( TARGET_B1 ) THEN R_TARGET_B1  = . ;
MPRINT(EM_DIAGRAM):   ELSE R_TARGET_B0 = TARGET_B0 - P_TARGET_B0 ;
22423     +ELSE R_TARGET_B1  = TARGET_B1  - P_TARGET_B1 ;
22424     +IF MISSING( TARGET_B0 ) THEN R_TARGET_B0  = . ;
MPRINT(EM_DIAGRAM):   *** Update Posterior Probabilities;
22425     +ELSE R_TARGET_B0  = TARGET_B0  - P_TARGET_B0 ;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = P_TARGET_B1 * 0.05 / 0.25004693073024;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = P_TARGET_B0 * 0.95 / 0.74995306926975;
22426     +
MPRINT(EM_DIAGRAM):   drop _sum;
MPRINT(EM_DIAGRAM):   _sum = P_TARGET_B1 + P_TARGET_B0 ;
22427     +
MPRINT(EM_DIAGRAM):   if _sum > 4.135903E-25 then do;
22428     +*** Update Posterior Probabilities;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = P_TARGET_B1 / _sum;
22429     +P_TARGET_B1 = P_TARGET_B1 * 0.05 / 0.25004693073024;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = P_TARGET_B0 / _sum;
22430     +P_TARGET_B0 = P_TARGET_B0 * 0.95 / 0.74995306926975;
MPRINT(EM_DIAGRAM):   end;
22431     +drop _sum; _sum = P_TARGET_B1 + P_TARGET_B0 ;
22432     +if _sum > 4.135903E-25 then do;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
22433     +   P_TARGET_B1 = P_TARGET_B1 / _sum;
MPRINT(EM_DIAGRAM):   label D_TARGET_B = 'Decision: TARGET_B' ;
22434     +   P_TARGET_B0 = P_TARGET_B0 / _sum;
22435     +end;
MPRINT(EM_DIAGRAM):   label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
22436     +
22437     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   label BP_TARGET_B = 'Best Profit: TARGET_B' ;
22438     +label D_TARGET_B = 'Decision: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
22439     +label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
22440     +label BP_TARGET_B = 'Best Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   length D_TARGET_B $ 9;
22441     +label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   D_TARGET_B = ' ';
22442     +
MPRINT(EM_DIAGRAM):   EP_TARGET_B = .;
22443     +length D_TARGET_B $ 9;
MPRINT(EM_DIAGRAM):   BP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   CP_TARGET_B = .;
22444     +
22445     +D_TARGET_B = ' ';
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
22446     +EP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
22447     +BP_TARGET_B = .;
22448     +CP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '1' ;
22449     +
MPRINT(EM_DIAGRAM):   EP_TARGET_B = P_TARGET_B1 * 14.5 + P_TARGET_B0 * -0.5;
22450     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   drop _sum;
22451     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _sum = P_TARGET_B1 * 0 + P_TARGET_B0 * 0;
22452     +
MPRINT(EM_DIAGRAM):   if _sum > EP_TARGET_B + 6.593837E-12 then do;
22453     +D_TARGET_B = '1' ;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
22454     +EP_TARGET_B = P_TARGET_B1 * 14.5 + P_TARGET_B0 * -0.5;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '0' ;
22455     +drop _sum;
MPRINT(EM_DIAGRAM):   end;
22456     +_sum = P_TARGET_B1 * 0 + P_TARGET_B0 * 0;
22457     +if _sum > EP_TARGET_B + 6.593837E-12 then do;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
22458     +   EP_TARGET_B = _sum; _decnum = 2;
22459     +   D_TARGET_B = '0' ;
22460     +end;
22461     +
MPRINT(EM_DIAGRAM):   array NEURALdema [2,2] _temporary_ ( 14.5 0 -0.5 0 );
22462     +*** Decision Matrix;
22463     +array NEURALdema [2,2] _temporary_ (
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
22464     +/* row 1 */  14.5 0
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_TARGET_B );
22465     +/* row 2 */  -0.5 0
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
22466     +);
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
22467     +
22468     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
22469     +drop _tarnum; select( F_TARGET_B );
MPRINT(EM_DIAGRAM):   end;
22470     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto NEURALdeex;
22471     +   when('0' ) _tarnum = 2;
22472     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   CP_TARGET_B = NEURALdema [_tarnum,_decnum];
22473     +end;
22474     +if _tarnum <= 0 then goto NEURALdeex;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
22475     +
MPRINT(EM_DIAGRAM):   array NEURALdebe [2] _temporary_ ( 14.5 0);
22476     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   BP_TARGET_B = NEURALdebe [_tarnum];
22477     +CP_TARGET_B = NEURALdema [_tarnum,_decnum];
22478     +
22479     +*** Best Possible Consequence of Any Decision without Cost;
22480     +array NEURALdebe [2] _temporary_ ( 14.5 0);
MPRINT(EM_DIAGRAM):   NEURALdeex:;
22481     +BP_TARGET_B = NEURALdebe [_tarnum];
22482     +
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
22483     +
MPRINT(EM_DIAGRAM):   *** *************************;
22484     +NEURALdeex:;
MPRINT(EM_DIAGRAM):   *** Writing the I_TARGET_B AND U_TARGET_B ;
MPRINT(EM_DIAGRAM):   *** *************************;
22485     +
MPRINT(EM_DIAGRAM):   _MAXP_ = P_TARGET_B1 ;
22486     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = "1           " ;
22487     +*** *************************;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 1;
22488     +*** Writing the I_TARGET_B  AND U_TARGET_B ;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_TARGET_B0 ) THEN DO;
22489     +*** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_TARGET_B0 ;
22490     +_MAXP_ = P_TARGET_B1 ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = "0           " ;
22491     +I_TARGET_B  = "1           " ;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
22492     +U_TARGET_B  =                    1;
MPRINT(EM_DIAGRAM):   END;
22493     +IF( _MAXP_ LT P_TARGET_B0  ) THEN DO;
MPRINT(EM_DIAGRAM):   ********************************;
22494     +   _MAXP_ = P_TARGET_B0 ;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
22495     +   I_TARGET_B  = "0           " ;
MPRINT(EM_DIAGRAM):   ********************************;
22496     +   U_TARGET_B  =                    0;
22497     +END;
22498     +********************************;
22499     +*** End Scoring Code for Neural;
22500     +********************************;
22501     +drop
22502     +H11
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
22503     +H12
MPRINT(EM_DIAGRAM):   drop S_:;
22504     +H13
22505     +H14
22506     +H15
22507     +;
22508     +drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
22509      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.32 seconds
      cpu time            0.31 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.35 seconds
      cpu time            0.34 seconds
      

MPRINT(EM_DIAGRAM):   quit;
22510      quit;
22511      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22512      filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22513      *------------------------------------------------------------*;
22514      * Neural: Scoring VALIDATE data;
22515      *------------------------------------------------------------*;
22516      data EMWS1.Neural_VALIDATE
22517      / view=EMWS1.Neural_VALIDATE
22518      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_VALIDATE / view=EMWS1.Neural_VALIDATE ;
22519      set EMWS1.Varsel_VALIDATE
22520      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_VALIDATE ;
22521      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
22522     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
22523     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
22524     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
22525     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
22526     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
22527     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
22528     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
22529     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
22530     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
22531     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
22532     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
22533     +LENGTH _WARN_ $4
22534     +      F_TARGET_B  $ 12
22535     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_TARGET_B $ 12 ;
22536     +      label S_LG10_LAST_GIFT_AMT = 'Standard: LG10_LAST_GIFT_AMT' ;
MPRINT(EM_DIAGRAM):   label S_LG10_LAST_GIFT_AMT = 'Standard: LG10_LAST_GIFT_AMT' ;
22537     +
22538     +      label S_MONTHS_SINCE_LAST_GIFT = 'Standard: MONTHS_SINCE_LAST_GIFT' ;
MPRINT(EM_DIAGRAM):   label S_MONTHS_SINCE_LAST_GIFT = 'Standard: MONTHS_SINCE_LAST_GIFT' ;
22539     +
22540     +      label PEP_STAR0 = 'Dummy: PEP_STAR=0' ;
MPRINT(EM_DIAGRAM):   label PEP_STAR0 = 'Dummy: PEP_STAR=0' ;
22541     +
22542     +      label FREQUENCY_STATUS_97NK1 = 'Dummy: FREQUENCY_STATUS_97NK=1' ;
MPRINT(EM_DIAGRAM):   label FREQUENCY_STATUS_97NK1 = 'Dummy: FREQUENCY_STATUS_97NK=1' ;
22543     +
22544     +      label FREQUENCY_STATUS_97NK2 = 'Dummy: FREQUENCY_STATUS_97NK=2' ;
MPRINT(EM_DIAGRAM):   label FREQUENCY_STATUS_97NK2 = 'Dummy: FREQUENCY_STATUS_97NK=2' ;
22545     +
22546     +      label FREQUENCY_STATUS_97NK3 = 'Dummy: FREQUENCY_STATUS_97NK=3' ;
MPRINT(EM_DIAGRAM):   label FREQUENCY_STATUS_97NK3 = 'Dummy: FREQUENCY_STATUS_97NK=3' ;
22547     +
22548     +      label G_CARD_PROM_120 = 'Dummy: G_CARD_PROM_12=0' ;
MPRINT(EM_DIAGRAM):   label G_CARD_PROM_120 = 'Dummy: G_CARD_PROM_12=0' ;
22549     +
22550     +      label G_CARD_PROM_121 = 'Dummy: G_CARD_PROM_12=1' ;
MPRINT(EM_DIAGRAM):   label G_CARD_PROM_121 = 'Dummy: G_CARD_PROM_12=1' ;
22551     +
22552     +      label G_CARD_PROM_122 = 'Dummy: G_CARD_PROM_12=2' ;
MPRINT(EM_DIAGRAM):   label G_CARD_PROM_122 = 'Dummy: G_CARD_PROM_12=2' ;
22553     +
22554     +      label G_CARD_PROM_123 = 'Dummy: G_CARD_PROM_12=3' ;
MPRINT(EM_DIAGRAM):   label G_CARD_PROM_123 = 'Dummy: G_CARD_PROM_12=3' ;
22555     +
22556     +      label G_CARD_PROM_124 = 'Dummy: G_CARD_PROM_12=4' ;
MPRINT(EM_DIAGRAM):   label G_CARD_PROM_124 = 'Dummy: G_CARD_PROM_12=4' ;
22557     +
22558     +      label G_CARD_PROM_125 = 'Dummy: G_CARD_PROM_12=5' ;
MPRINT(EM_DIAGRAM):   label G_CARD_PROM_125 = 'Dummy: G_CARD_PROM_12=5' ;
22559     +
22560     +      label G_CLUSTER_CODE0 = 'Dummy: G_CLUSTER_CODE=0' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE0 = 'Dummy: G_CLUSTER_CODE=0' ;
22561     +
22562     +      label G_CLUSTER_CODE1 = 'Dummy: G_CLUSTER_CODE=1' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE1 = 'Dummy: G_CLUSTER_CODE=1' ;
22563     +
22564     +      label G_CLUSTER_CODE2 = 'Dummy: G_CLUSTER_CODE=2' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE2 = 'Dummy: G_CLUSTER_CODE=2' ;
22565     +
22566     +      label G_CLUSTER_CODE3 = 'Dummy: G_CLUSTER_CODE=3' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE3 = 'Dummy: G_CLUSTER_CODE=3' ;
22567     +
22568     +      label G_CLUSTER_CODE4 = 'Dummy: G_CLUSTER_CODE=4' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE4 = 'Dummy: G_CLUSTER_CODE=4' ;
22569     +
22570     +      label G_CLUSTER_CODE5 = 'Dummy: G_CLUSTER_CODE=5' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE5 = 'Dummy: G_CLUSTER_CODE=5' ;
22571     +
22572     +      label G_CLUSTER_CODE6 = 'Dummy: G_CLUSTER_CODE=6' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE6 = 'Dummy: G_CLUSTER_CODE=6' ;
22573     +
22574     +      label G_CLUSTER_CODE7 = 'Dummy: G_CLUSTER_CODE=7' ;
MPRINT(EM_DIAGRAM):   label G_CLUSTER_CODE7 = 'Dummy: G_CLUSTER_CODE=7' ;
22575     +
22576     +      label G_RECENT_CARD_RESPONSE_COUNT0 =
22577     +'Dummy: G_RECENT_CARD_RESPONSE_COUNT=0' ;
MPRINT(EM_DIAGRAM):   label G_RECENT_CARD_RESPONSE_COUNT0 = 'Dummy: G_RECENT_CARD_RESPONSE_COUNT=0' ;
22578     +
22579     +      label G_RECENT_CARD_RESPONSE_COUNT1 =
22580     +'Dummy: G_RECENT_CARD_RESPONSE_COUNT=1' ;
MPRINT(EM_DIAGRAM):   label G_RECENT_CARD_RESPONSE_COUNT1 = 'Dummy: G_RECENT_CARD_RESPONSE_COUNT=1' ;
22581     +
22582     +      label G_RECENT_CARD_RESPONSE_COUNT2 =
22583     +'Dummy: G_RECENT_CARD_RESPONSE_COUNT=2' ;
MPRINT(EM_DIAGRAM):   label G_RECENT_CARD_RESPONSE_COUNT2 = 'Dummy: G_RECENT_CARD_RESPONSE_COUNT=2' ;
22584     +
22585     +      label G_RECENT_CARD_RESPONSE_COUNT3 =
22586     +'Dummy: G_RECENT_CARD_RESPONSE_COUNT=3' ;
MPRINT(EM_DIAGRAM):   label G_RECENT_CARD_RESPONSE_COUNT3 = 'Dummy: G_RECENT_CARD_RESPONSE_COUNT=3' ;
22587     +
22588     +      label G_RECENT_RESPONSE_COUNT0 = 'Dummy: G_RECENT_RESPONSE_COUNT=0' ;
MPRINT(EM_DIAGRAM):   label G_RECENT_RESPONSE_COUNT0 = 'Dummy: G_RECENT_RESPONSE_COUNT=0' ;
22589     +
22590     +      label G_RECENT_RESPONSE_COUNT1 = 'Dummy: G_RECENT_RESPONSE_COUNT=1' ;
MPRINT(EM_DIAGRAM):   label G_RECENT_RESPONSE_COUNT1 = 'Dummy: G_RECENT_RESPONSE_COUNT=1' ;
22591     +
22592     +      label G_RECENT_RESPONSE_COUNT2 = 'Dummy: G_RECENT_RESPONSE_COUNT=2' ;
MPRINT(EM_DIAGRAM):   label G_RECENT_RESPONSE_COUNT2 = 'Dummy: G_RECENT_RESPONSE_COUNT=2' ;
22593     +
22594     +      label OPT_LIFETIME_CA01_low_7_5 =
22595     +'Dummy: OPT_LIFETIME_CARD_PROM=01:low-7.5' ;
MPRINT(EM_DIAGRAM):   label OPT_LIFETIME_CA01_low_7_5 = 'Dummy: OPT_LIFETIME_CARD_PROM=01:low-7.5' ;
22596     +
22597     +      label OPT_LIFETIME_CA02_7_5_12_5 =
22598     +'Dummy: OPT_LIFETIME_CARD_PROM=02:7.5-12.5' ;
MPRINT(EM_DIAGRAM):   label OPT_LIFETIME_CA02_7_5_12_5 = 'Dummy: OPT_LIFETIME_CARD_PROM=02:7.5-12.5' ;
22599     +
22600     +      label OPT_LIFETIME_CA03_12_5_39_5__M =
22601     +'Dummy: OPT_LIFETIME_CARD_PROM=03:12.5-39.5, MISSING' ;
MPRINT(EM_DIAGRAM):   label OPT_LIFETIME_CA03_12_5_39_5__M = 'Dummy: OPT_LIFETIME_CARD_PROM=03:12.5-39.5, MISSING' ;
22602     +
22603     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
22604     +
22605     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
22606     +
22607     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
22608     +
22609     +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
22610     +
22611     +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
22612     +
22613     +      label I_TARGET_B = 'Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label I_TARGET_B = 'Into: TARGET_B' ;
22614     +
22615     +      label F_TARGET_B = 'From: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label F_TARGET_B = 'From: TARGET_B' ;
22616     +
22617     +      label U_TARGET_B = 'Unnormalized Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label U_TARGET_B = 'Unnormalized Into: TARGET_B' ;
22618     +
22619     +      label P_TARGET_B1 = 'Predicted: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   label P_TARGET_B1 = 'Predicted: TARGET_B=1' ;
22620     +
22621     +      label R_TARGET_B1 = 'Residual: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   label R_TARGET_B1 = 'Residual: TARGET_B=1' ;
22622     +
22623     +      label P_TARGET_B0 = 'Predicted: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   label P_TARGET_B0 = 'Predicted: TARGET_B=0' ;
22624     +
22625     +      label R_TARGET_B0 = 'Residual: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   label R_TARGET_B0 = 'Residual: TARGET_B=0' ;
22626     +
22627     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
22628     +
22629     +*** Generate dummy variables for PEP_STAR ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for PEP_STAR ;
22630     +drop PEP_STAR0 ;
MPRINT(EM_DIAGRAM):   drop PEP_STAR0 ;
22631     +if missing( PEP_STAR ) then do;
MPRINT(EM_DIAGRAM):   if missing( PEP_STAR ) then do;
22632     +   PEP_STAR0 = .;
MPRINT(EM_DIAGRAM):   PEP_STAR0 = .;
22633     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22634     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22635     +end;
MPRINT(EM_DIAGRAM):   end;
22636     +else do;
MPRINT(EM_DIAGRAM):   else do;
22637     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22638     +   _dm12 = put( PEP_STAR , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( PEP_STAR , BEST12. );
22639     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22640     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22641     +      PEP_STAR0 = -1;
MPRINT(EM_DIAGRAM):   PEP_STAR0 = -1;
22642     +   end;
MPRINT(EM_DIAGRAM):   end;
22643     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
22644     +      PEP_STAR0 = 1;
MPRINT(EM_DIAGRAM):   PEP_STAR0 = 1;
22645     +   end;
MPRINT(EM_DIAGRAM):   end;
22646     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22647     +      PEP_STAR0 = .;
MPRINT(EM_DIAGRAM):   PEP_STAR0 = .;
22648     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22649     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22650     +   end;
MPRINT(EM_DIAGRAM):   end;
22651     +end;
MPRINT(EM_DIAGRAM):   end;
22652     +
22653     +*** Generate dummy variables for FREQUENCY_STATUS_97NK ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for FREQUENCY_STATUS_97NK ;
22654     +drop FREQUENCY_STATUS_97NK1 FREQUENCY_STATUS_97NK2 FREQUENCY_STATUS_97NK3 ;
MPRINT(EM_DIAGRAM):   drop FREQUENCY_STATUS_97NK1 FREQUENCY_STATUS_97NK2 FREQUENCY_STATUS_97NK3 ;
22655     +if missing( FREQUENCY_STATUS_97NK ) then do;
MPRINT(EM_DIAGRAM):   if missing( FREQUENCY_STATUS_97NK ) then do;
22656     +   FREQUENCY_STATUS_97NK1 = .;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK1 = .;
22657     +   FREQUENCY_STATUS_97NK2 = .;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK2 = .;
22658     +   FREQUENCY_STATUS_97NK3 = .;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK3 = .;
22659     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22660     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22661     +end;
MPRINT(EM_DIAGRAM):   end;
22662     +else do;
MPRINT(EM_DIAGRAM):   else do;
22663     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22664     +   _dm12 = put( FREQUENCY_STATUS_97NK , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( FREQUENCY_STATUS_97NK , BEST12. );
22665     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22666     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22667     +      FREQUENCY_STATUS_97NK1 = 1;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK1 = 1;
22668     +      FREQUENCY_STATUS_97NK2 = 0;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK2 = 0;
22669     +      FREQUENCY_STATUS_97NK3 = 0;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK3 = 0;
22670     +   end;
MPRINT(EM_DIAGRAM):   end;
22671     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
22672     +      FREQUENCY_STATUS_97NK1 = 0;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK1 = 0;
22673     +      FREQUENCY_STATUS_97NK2 = 1;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK2 = 1;
22674     +      FREQUENCY_STATUS_97NK3 = 0;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK3 = 0;
22675     +   end;
MPRINT(EM_DIAGRAM):   end;
22676     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22677     +      FREQUENCY_STATUS_97NK1 = 0;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK1 = 0;
22678     +      FREQUENCY_STATUS_97NK2 = 0;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK2 = 0;
22679     +      FREQUENCY_STATUS_97NK3 = 1;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK3 = 1;
22680     +   end;
MPRINT(EM_DIAGRAM):   end;
22681     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
22682     +      FREQUENCY_STATUS_97NK1 = -1;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK1 = -1;
22683     +      FREQUENCY_STATUS_97NK2 = -1;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK2 = -1;
22684     +      FREQUENCY_STATUS_97NK3 = -1;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK3 = -1;
22685     +   end;
MPRINT(EM_DIAGRAM):   end;
22686     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22687     +      FREQUENCY_STATUS_97NK1 = .;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK1 = .;
22688     +      FREQUENCY_STATUS_97NK2 = .;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK2 = .;
22689     +      FREQUENCY_STATUS_97NK3 = .;
MPRINT(EM_DIAGRAM):   FREQUENCY_STATUS_97NK3 = .;
22690     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22691     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22692     +   end;
MPRINT(EM_DIAGRAM):   end;
22693     +end;
MPRINT(EM_DIAGRAM):   end;
22694     +
22695     +*** Generate dummy variables for G_CARD_PROM_12 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_CARD_PROM_12 ;
22696     +drop G_CARD_PROM_120 G_CARD_PROM_121 G_CARD_PROM_122 G_CARD_PROM_123
22697     +        G_CARD_PROM_124 G_CARD_PROM_125 ;
MPRINT(EM_DIAGRAM):   drop G_CARD_PROM_120 G_CARD_PROM_121 G_CARD_PROM_122 G_CARD_PROM_123 G_CARD_PROM_124 G_CARD_PROM_125 ;
22698     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
22699     +G_CARD_PROM_120 = 0;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_120 = 0;
22700     +G_CARD_PROM_121 = 0;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_121 = 0;
22701     +G_CARD_PROM_122 = 0;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_122 = 0;
22702     +G_CARD_PROM_123 = 0;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_123 = 0;
22703     +G_CARD_PROM_124 = 0;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_124 = 0;
22704     +G_CARD_PROM_125 = 0;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_125 = 0;
22705     +if missing( G_CARD_PROM_12 ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_CARD_PROM_12 ) then do;
22706     +   G_CARD_PROM_120 = .;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_120 = .;
22707     +   G_CARD_PROM_121 = .;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_121 = .;
22708     +   G_CARD_PROM_122 = .;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_122 = .;
22709     +   G_CARD_PROM_123 = .;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_123 = .;
22710     +   G_CARD_PROM_124 = .;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_124 = .;
22711     +   G_CARD_PROM_125 = .;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_125 = .;
22712     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22713     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22714     +end;
MPRINT(EM_DIAGRAM):   end;
22715     +else do;
MPRINT(EM_DIAGRAM):   else do;
22716     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22717     +   _dm12 = put( G_CARD_PROM_12 , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_CARD_PROM_12 , BEST12. );
22718     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22719     +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
22720     +      G_CARD_PROM_125 = 1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_125 = 1;
22721     +   end;
MPRINT(EM_DIAGRAM):   end;
22722     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
22723     +      G_CARD_PROM_120 = -1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_120 = -1;
22724     +      G_CARD_PROM_121 = -1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_121 = -1;
22725     +      G_CARD_PROM_122 = -1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_122 = -1;
22726     +      G_CARD_PROM_123 = -1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_123 = -1;
22727     +      G_CARD_PROM_124 = -1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_124 = -1;
22728     +      G_CARD_PROM_125 = -1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_125 = -1;
22729     +   end;
MPRINT(EM_DIAGRAM):   end;
22730     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22731     +      G_CARD_PROM_123 = 1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_123 = 1;
22732     +   end;
MPRINT(EM_DIAGRAM):   end;
22733     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
22734     +      G_CARD_PROM_124 = 1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_124 = 1;
22735     +   end;
MPRINT(EM_DIAGRAM):   end;
22736     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
22737     +      G_CARD_PROM_122 = 1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_122 = 1;
22738     +   end;
MPRINT(EM_DIAGRAM):   end;
22739     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
22740     +      G_CARD_PROM_121 = 1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_121 = 1;
22741     +   end;
MPRINT(EM_DIAGRAM):   end;
22742     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
22743     +      G_CARD_PROM_120 = 1;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_120 = 1;
22744     +   end;
MPRINT(EM_DIAGRAM):   end;
22745     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22746     +      G_CARD_PROM_120 = .;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_120 = .;
22747     +      G_CARD_PROM_121 = .;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_121 = .;
22748     +      G_CARD_PROM_122 = .;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_122 = .;
22749     +      G_CARD_PROM_123 = .;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_123 = .;
22750     +      G_CARD_PROM_124 = .;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_124 = .;
22751     +      G_CARD_PROM_125 = .;
MPRINT(EM_DIAGRAM):   G_CARD_PROM_125 = .;
22752     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22753     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22754     +   end;
MPRINT(EM_DIAGRAM):   end;
22755     +end;
MPRINT(EM_DIAGRAM):   end;
22756     +
22757     +*** Generate dummy variables for G_CLUSTER_CODE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_CLUSTER_CODE ;
22758     +drop G_CLUSTER_CODE0 G_CLUSTER_CODE1 G_CLUSTER_CODE2 G_CLUSTER_CODE3
22759     +        G_CLUSTER_CODE4 G_CLUSTER_CODE5 G_CLUSTER_CODE6 G_CLUSTER_CODE7 ;
MPRINT(EM_DIAGRAM):   drop G_CLUSTER_CODE0 G_CLUSTER_CODE1 G_CLUSTER_CODE2 G_CLUSTER_CODE3 G_CLUSTER_CODE4 G_CLUSTER_CODE5 G_CLUSTER_CODE6 G_CLUSTER_CODE7 ;
22760     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
22761     +G_CLUSTER_CODE0 = 0;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE0 = 0;
22762     +G_CLUSTER_CODE1 = 0;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE1 = 0;
22763     +G_CLUSTER_CODE2 = 0;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE2 = 0;
22764     +G_CLUSTER_CODE3 = 0;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE3 = 0;
22765     +G_CLUSTER_CODE4 = 0;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE4 = 0;
22766     +G_CLUSTER_CODE5 = 0;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE5 = 0;
22767     +G_CLUSTER_CODE6 = 0;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE6 = 0;
22768     +G_CLUSTER_CODE7 = 0;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE7 = 0;
22769     +if missing( G_CLUSTER_CODE ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_CLUSTER_CODE ) then do;
22770     +   G_CLUSTER_CODE0 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE0 = .;
22771     +   G_CLUSTER_CODE1 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE1 = .;
22772     +   G_CLUSTER_CODE2 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE2 = .;
22773     +   G_CLUSTER_CODE3 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE3 = .;
22774     +   G_CLUSTER_CODE4 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE4 = .;
22775     +   G_CLUSTER_CODE5 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE5 = .;
22776     +   G_CLUSTER_CODE6 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE6 = .;
22777     +   G_CLUSTER_CODE7 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE7 = .;
22778     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22779     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22780     +end;
MPRINT(EM_DIAGRAM):   end;
22781     +else do;
MPRINT(EM_DIAGRAM):   else do;
22782     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22783     +   _dm12 = put( G_CLUSTER_CODE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_CLUSTER_CODE , BEST12. );
22784     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22785     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
22786     +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
22787     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
22788     +         if _dm12 <= '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
22789     +            if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
22790     +               G_CLUSTER_CODE0 = 1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE0 = 1;
22791     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22792     +            end;
MPRINT(EM_DIAGRAM):   end;
22793     +            else do;
MPRINT(EM_DIAGRAM):   else do;
22794     +               if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22795     +                  G_CLUSTER_CODE1 = 1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE1 = 1;
22796     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22797     +               end;
MPRINT(EM_DIAGRAM):   end;
22798     +            end;
MPRINT(EM_DIAGRAM):   end;
22799     +         end;
MPRINT(EM_DIAGRAM):   end;
22800     +         else do;
MPRINT(EM_DIAGRAM):   else do;
22801     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
22802     +               G_CLUSTER_CODE2 = 1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE2 = 1;
22803     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22804     +            end;
MPRINT(EM_DIAGRAM):   end;
22805     +         end;
MPRINT(EM_DIAGRAM):   end;
22806     +      end;
MPRINT(EM_DIAGRAM):   end;
22807     +      else do;
MPRINT(EM_DIAGRAM):   else do;
22808     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
22809     +            G_CLUSTER_CODE3 = 1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE3 = 1;
22810     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22811     +         end;
MPRINT(EM_DIAGRAM):   end;
22812     +         else do;
MPRINT(EM_DIAGRAM):   else do;
22813     +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
22814     +               G_CLUSTER_CODE4 = 1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE4 = 1;
22815     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22816     +            end;
MPRINT(EM_DIAGRAM):   end;
22817     +         end;
MPRINT(EM_DIAGRAM):   end;
22818     +      end;
MPRINT(EM_DIAGRAM):   end;
22819     +   end;
MPRINT(EM_DIAGRAM):   end;
22820     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22821     +      if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
22822     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
22823     +            G_CLUSTER_CODE5 = 1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE5 = 1;
22824     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22825     +         end;
MPRINT(EM_DIAGRAM):   end;
22826     +         else do;
MPRINT(EM_DIAGRAM):   else do;
22827     +            if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
22828     +               G_CLUSTER_CODE6 = 1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE6 = 1;
22829     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22830     +            end;
MPRINT(EM_DIAGRAM):   end;
22831     +         end;
MPRINT(EM_DIAGRAM):   end;
22832     +      end;
MPRINT(EM_DIAGRAM):   end;
22833     +      else do;
MPRINT(EM_DIAGRAM):   else do;
22834     +         if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
22835     +            G_CLUSTER_CODE7 = 1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE7 = 1;
22836     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22837     +         end;
MPRINT(EM_DIAGRAM):   end;
22838     +         else do;
MPRINT(EM_DIAGRAM):   else do;
22839     +            if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
22840     +               G_CLUSTER_CODE0 = -1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE0 = -1;
22841     +               G_CLUSTER_CODE1 = -1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE1 = -1;
22842     +               G_CLUSTER_CODE2 = -1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE2 = -1;
22843     +               G_CLUSTER_CODE3 = -1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE3 = -1;
22844     +               G_CLUSTER_CODE4 = -1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE4 = -1;
22845     +               G_CLUSTER_CODE5 = -1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE5 = -1;
22846     +               G_CLUSTER_CODE6 = -1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE6 = -1;
22847     +               G_CLUSTER_CODE7 = -1;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE7 = -1;
22848     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22849     +            end;
MPRINT(EM_DIAGRAM):   end;
22850     +         end;
MPRINT(EM_DIAGRAM):   end;
22851     +      end;
MPRINT(EM_DIAGRAM):   end;
22852     +   end;
MPRINT(EM_DIAGRAM):   end;
22853     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
22854     +      G_CLUSTER_CODE0 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE0 = .;
22855     +      G_CLUSTER_CODE1 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE1 = .;
22856     +      G_CLUSTER_CODE2 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE2 = .;
22857     +      G_CLUSTER_CODE3 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE3 = .;
22858     +      G_CLUSTER_CODE4 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE4 = .;
22859     +      G_CLUSTER_CODE5 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE5 = .;
22860     +      G_CLUSTER_CODE6 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE6 = .;
22861     +      G_CLUSTER_CODE7 = .;
MPRINT(EM_DIAGRAM):   G_CLUSTER_CODE7 = .;
22862     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22863     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22864     +   end;
MPRINT(EM_DIAGRAM):   end;
22865     +end;
MPRINT(EM_DIAGRAM):   end;
22866     +
22867     +*** Generate dummy variables for G_RECENT_CARD_RESPONSE_COUNT ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_RECENT_CARD_RESPONSE_COUNT ;
22868     +drop G_RECENT_CARD_RESPONSE_COUNT0 G_RECENT_CARD_RESPONSE_COUNT1
22869     +        G_RECENT_CARD_RESPONSE_COUNT2 G_RECENT_CARD_RESPONSE_COUNT3 ;
MPRINT(EM_DIAGRAM):   drop G_RECENT_CARD_RESPONSE_COUNT0 G_RECENT_CARD_RESPONSE_COUNT1 G_RECENT_CARD_RESPONSE_COUNT2 G_RECENT_CARD_RESPONSE_COUNT3 ;
22870     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
22871     +G_RECENT_CARD_RESPONSE_COUNT0 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT0 = 0;
22872     +G_RECENT_CARD_RESPONSE_COUNT1 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT1 = 0;
22873     +G_RECENT_CARD_RESPONSE_COUNT2 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT2 = 0;
22874     +G_RECENT_CARD_RESPONSE_COUNT3 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT3 = 0;
22875     +if missing( G_RECENT_CARD_RESPONSE_COUNT ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_RECENT_CARD_RESPONSE_COUNT ) then do;
22876     +   G_RECENT_CARD_RESPONSE_COUNT0 = .;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT0 = .;
22877     +   G_RECENT_CARD_RESPONSE_COUNT1 = .;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT1 = .;
22878     +   G_RECENT_CARD_RESPONSE_COUNT2 = .;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT2 = .;
22879     +   G_RECENT_CARD_RESPONSE_COUNT3 = .;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT3 = .;
22880     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22881     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22882     +end;
MPRINT(EM_DIAGRAM):   end;
22883     +else do;
MPRINT(EM_DIAGRAM):   else do;
22884     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22885     +   _dm12 = put( G_RECENT_CARD_RESPONSE_COUNT , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_RECENT_CARD_RESPONSE_COUNT , BEST12. );
22886     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22887     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
22888     +   if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
22889     +      if _dm12 <= '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
22890     +         if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
22891     +            G_RECENT_CARD_RESPONSE_COUNT0 = 1;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT0 = 1;
22892     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22893     +         end;
MPRINT(EM_DIAGRAM):   end;
22894     +         else do;
MPRINT(EM_DIAGRAM):   else do;
22895     +            if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22896     +               G_RECENT_CARD_RESPONSE_COUNT1 = 1;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT1 = 1;
22897     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22898     +            end;
MPRINT(EM_DIAGRAM):   end;
22899     +         end;
MPRINT(EM_DIAGRAM):   end;
22900     +      end;
MPRINT(EM_DIAGRAM):   end;
22901     +      else do;
MPRINT(EM_DIAGRAM):   else do;
22902     +         if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
22903     +            G_RECENT_CARD_RESPONSE_COUNT2 = 1;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT2 = 1;
22904     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22905     +         end;
MPRINT(EM_DIAGRAM):   end;
22906     +      end;
MPRINT(EM_DIAGRAM):   end;
22907     +   end;
MPRINT(EM_DIAGRAM):   end;
22908     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22909     +      if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
22910     +         G_RECENT_CARD_RESPONSE_COUNT3 = 1;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT3 = 1;
22911     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22912     +      end;
MPRINT(EM_DIAGRAM):   end;
22913     +      else do;
MPRINT(EM_DIAGRAM):   else do;
22914     +         if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
22915     +            G_RECENT_CARD_RESPONSE_COUNT0 = -1;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT0 = -1;
22916     +            G_RECENT_CARD_RESPONSE_COUNT1 = -1;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT1 = -1;
22917     +            G_RECENT_CARD_RESPONSE_COUNT2 = -1;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT2 = -1;
22918     +            G_RECENT_CARD_RESPONSE_COUNT3 = -1;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT3 = -1;
22919     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
22920     +         end;
MPRINT(EM_DIAGRAM):   end;
22921     +      end;
MPRINT(EM_DIAGRAM):   end;
22922     +   end;
MPRINT(EM_DIAGRAM):   end;
22923     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
22924     +      G_RECENT_CARD_RESPONSE_COUNT0 = .;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT0 = .;
22925     +      G_RECENT_CARD_RESPONSE_COUNT1 = .;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT1 = .;
22926     +      G_RECENT_CARD_RESPONSE_COUNT2 = .;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT2 = .;
22927     +      G_RECENT_CARD_RESPONSE_COUNT3 = .;
MPRINT(EM_DIAGRAM):   G_RECENT_CARD_RESPONSE_COUNT3 = .;
22928     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22929     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22930     +   end;
MPRINT(EM_DIAGRAM):   end;
22931     +end;
MPRINT(EM_DIAGRAM):   end;
22932     +
22933     +*** Generate dummy variables for G_RECENT_RESPONSE_COUNT ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_RECENT_RESPONSE_COUNT ;
22934     +drop G_RECENT_RESPONSE_COUNT0 G_RECENT_RESPONSE_COUNT1
22935     +        G_RECENT_RESPONSE_COUNT2 ;
MPRINT(EM_DIAGRAM):   drop G_RECENT_RESPONSE_COUNT0 G_RECENT_RESPONSE_COUNT1 G_RECENT_RESPONSE_COUNT2 ;
22936     +if missing( G_RECENT_RESPONSE_COUNT ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_RECENT_RESPONSE_COUNT ) then do;
22937     +   G_RECENT_RESPONSE_COUNT0 = .;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT0 = .;
22938     +   G_RECENT_RESPONSE_COUNT1 = .;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT1 = .;
22939     +   G_RECENT_RESPONSE_COUNT2 = .;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT2 = .;
22940     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22941     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22942     +end;
MPRINT(EM_DIAGRAM):   end;
22943     +else do;
MPRINT(EM_DIAGRAM):   else do;
22944     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22945     +   _dm12 = put( G_RECENT_RESPONSE_COUNT , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_RECENT_RESPONSE_COUNT , BEST12. );
22946     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22947     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22948     +      G_RECENT_RESPONSE_COUNT0 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT0 = 0;
22949     +      G_RECENT_RESPONSE_COUNT1 = 1;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT1 = 1;
22950     +      G_RECENT_RESPONSE_COUNT2 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT2 = 0;
22951     +   end;
MPRINT(EM_DIAGRAM):   end;
22952     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
22953     +      G_RECENT_RESPONSE_COUNT0 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT0 = 0;
22954     +      G_RECENT_RESPONSE_COUNT1 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT1 = 0;
22955     +      G_RECENT_RESPONSE_COUNT2 = 1;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT2 = 1;
22956     +   end;
MPRINT(EM_DIAGRAM):   end;
22957     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22958     +      G_RECENT_RESPONSE_COUNT0 = -1;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT0 = -1;
22959     +      G_RECENT_RESPONSE_COUNT1 = -1;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT1 = -1;
22960     +      G_RECENT_RESPONSE_COUNT2 = -1;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT2 = -1;
22961     +   end;
MPRINT(EM_DIAGRAM):   end;
22962     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
22963     +      G_RECENT_RESPONSE_COUNT0 = 1;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT0 = 1;
22964     +      G_RECENT_RESPONSE_COUNT1 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT1 = 0;
22965     +      G_RECENT_RESPONSE_COUNT2 = 0;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT2 = 0;
22966     +   end;
MPRINT(EM_DIAGRAM):   end;
22967     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22968     +      G_RECENT_RESPONSE_COUNT0 = .;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT0 = .;
22969     +      G_RECENT_RESPONSE_COUNT1 = .;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT1 = .;
22970     +      G_RECENT_RESPONSE_COUNT2 = .;
MPRINT(EM_DIAGRAM):   G_RECENT_RESPONSE_COUNT2 = .;
22971     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22972     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22973     +   end;
MPRINT(EM_DIAGRAM):   end;
22974     +end;
MPRINT(EM_DIAGRAM):   end;
22975     +
22976     +*** Generate dummy variables for OPT_LIFETIME_CARD_PROM ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for OPT_LIFETIME_CARD_PROM ;
22977     +drop OPT_LIFETIME_CA01_low_7_5 OPT_LIFETIME_CA02_7_5_12_5
22978     +        OPT_LIFETIME_CA03_12_5_39_5__M ;
MPRINT(EM_DIAGRAM):   drop OPT_LIFETIME_CA01_low_7_5 OPT_LIFETIME_CA02_7_5_12_5 OPT_LIFETIME_CA03_12_5_39_5__M ;
22979     +if missing( OPT_LIFETIME_CARD_PROM ) then do;
MPRINT(EM_DIAGRAM):   if missing( OPT_LIFETIME_CARD_PROM ) then do;
22980     +   OPT_LIFETIME_CA01_low_7_5 = .;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA01_low_7_5 = .;
22981     +   OPT_LIFETIME_CA02_7_5_12_5 = .;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA02_7_5_12_5 = .;
22982     +   OPT_LIFETIME_CA03_12_5_39_5__M = .;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA03_12_5_39_5__M = .;
22983     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22984     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22985     +end;
MPRINT(EM_DIAGRAM):   end;
22986     +else do;
MPRINT(EM_DIAGRAM):   else do;
22987     +   length _dm32 $ 32; drop _dm32 ;
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
22988     +   %DMNORMCP( OPT_LIFETIME_CARD_PROM , _dm32 )
MPRINT(DMNORMCP):   _dm32=dmnorm(OPT_LIFETIME_CARD_PROM,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
22989     +   if _dm32 = '03:12.5-39.5, MISSING'  then do;
MPRINT(EM_DIAGRAM):   if _dm32 = '03:12.5-39.5, MISSING' then do;
22990     +      OPT_LIFETIME_CA01_low_7_5 = 0;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA01_low_7_5 = 0;
22991     +      OPT_LIFETIME_CA02_7_5_12_5 = 0;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA02_7_5_12_5 = 0;
22992     +      OPT_LIFETIME_CA03_12_5_39_5__M = 1;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA03_12_5_39_5__M = 1;
22993     +   end;
MPRINT(EM_DIAGRAM):   end;
22994     +   else if _dm32 = '02:7.5-12.5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = '02:7.5-12.5' then do;
22995     +      OPT_LIFETIME_CA01_low_7_5 = 0;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA01_low_7_5 = 0;
22996     +      OPT_LIFETIME_CA02_7_5_12_5 = 1;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA02_7_5_12_5 = 1;
22997     +      OPT_LIFETIME_CA03_12_5_39_5__M = 0;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA03_12_5_39_5__M = 0;
22998     +   end;
MPRINT(EM_DIAGRAM):   end;
22999     +   else if _dm32 = '01:LOW-7.5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = '01:LOW-7.5' then do;
23000     +      OPT_LIFETIME_CA01_low_7_5 = 1;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA01_low_7_5 = 1;
23001     +      OPT_LIFETIME_CA02_7_5_12_5 = 0;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA02_7_5_12_5 = 0;
23002     +      OPT_LIFETIME_CA03_12_5_39_5__M = 0;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA03_12_5_39_5__M = 0;
23003     +   end;
MPRINT(EM_DIAGRAM):   end;
23004     +   else if _dm32 = '04:39.5-HIGH'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = '04:39.5-HIGH' then do;
23005     +      OPT_LIFETIME_CA01_low_7_5 = -1;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA01_low_7_5 = -1;
23006     +      OPT_LIFETIME_CA02_7_5_12_5 = -1;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA02_7_5_12_5 = -1;
23007     +      OPT_LIFETIME_CA03_12_5_39_5__M = -1;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA03_12_5_39_5__M = -1;
23008     +   end;
MPRINT(EM_DIAGRAM):   end;
23009     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23010     +      OPT_LIFETIME_CA01_low_7_5 = .;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA01_low_7_5 = .;
23011     +      OPT_LIFETIME_CA02_7_5_12_5 = .;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA02_7_5_12_5 = .;
23012     +      OPT_LIFETIME_CA03_12_5_39_5__M = .;
MPRINT(EM_DIAGRAM):   OPT_LIFETIME_CA03_12_5_39_5__M = .;
23013     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23014     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23015     +   end;
MPRINT(EM_DIAGRAM):   end;
23016     +end;
MPRINT(EM_DIAGRAM):   end;
23017     +
23018     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23019     +*** Checking missing input Interval
23020     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
23021     +
23022     +IF NMISS(
23023     +   LG10_LAST_GIFT_AMT ,
23024     +   MONTHS_SINCE_LAST_GIFT   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( LG10_LAST_GIFT_AMT , MONTHS_SINCE_LAST_GIFT ) THEN DO;
23025     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
23026     +
23027     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23028     +END;
MPRINT(EM_DIAGRAM):   END;
23029     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23030     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
23031     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23032     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
23033     +   S_LG10_LAST_GIFT_AMT  =    -5.04963340818956 +     4.26588117171544 *
23034     +        LG10_LAST_GIFT_AMT ;
MPRINT(EM_DIAGRAM):   S_LG10_LAST_GIFT_AMT = -5.04963340818956 + 4.26588117171544 * LG10_LAST_GIFT_AMT ;
23035     +   S_MONTHS_SINCE_LAST_GIFT  =    -4.51352840067237 +     0.24813657655727 *
23036     +        MONTHS_SINCE_LAST_GIFT ;
MPRINT(EM_DIAGRAM):   S_MONTHS_SINCE_LAST_GIFT = -4.51352840067237 + 0.24813657655727 * MONTHS_SINCE_LAST_GIFT ;
23037     +END;
MPRINT(EM_DIAGRAM):   END;
23038     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
23039     +   IF MISSING( LG10_LAST_GIFT_AMT ) THEN S_LG10_LAST_GIFT_AMT  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( LG10_LAST_GIFT_AMT ) THEN S_LG10_LAST_GIFT_AMT = . ;
23040     +   ELSE S_LG10_LAST_GIFT_AMT  =    -5.04963340818956 +     4.26588117171544 *
23041     +        LG10_LAST_GIFT_AMT ;
MPRINT(EM_DIAGRAM):   ELSE S_LG10_LAST_GIFT_AMT = -5.04963340818956 + 4.26588117171544 * LG10_LAST_GIFT_AMT ;
23042     +   IF MISSING( MONTHS_SINCE_LAST_GIFT ) THEN S_MONTHS_SINCE_LAST_GIFT  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( MONTHS_SINCE_LAST_GIFT ) THEN S_MONTHS_SINCE_LAST_GIFT = . ;
23043     +   ELSE S_MONTHS_SINCE_LAST_GIFT
23044     +          =    -4.51352840067237 +     0.24813657655727 *
23045     +        MONTHS_SINCE_LAST_GIFT ;
MPRINT(EM_DIAGRAM):   ELSE S_MONTHS_SINCE_LAST_GIFT = -4.51352840067237 + 0.24813657655727 * MONTHS_SINCE_LAST_GIFT ;
23046     +END;
MPRINT(EM_DIAGRAM):   END;
23047     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23048     +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
23049     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23050     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23051     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
23052     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23053     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23054     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
23055     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23056     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
23057     +   H11  =     0.25007471264748 * S_LG10_LAST_GIFT_AMT
23058     +          +     0.10498832743618 * S_MONTHS_SINCE_LAST_GIFT ;
MPRINT(EM_DIAGRAM):   H11 = 0.25007471264748 * S_LG10_LAST_GIFT_AMT + 0.10498832743618 * S_MONTHS_SINCE_LAST_GIFT ;
23059     +   H12  =    -0.39538724747515 * S_LG10_LAST_GIFT_AMT
23060     +          +     0.21734155947532 * S_MONTHS_SINCE_LAST_GIFT ;
MPRINT(EM_DIAGRAM):   H12 = -0.39538724747515 * S_LG10_LAST_GIFT_AMT + 0.21734155947532 * S_MONTHS_SINCE_LAST_GIFT ;
23061     +   H13  =     0.03651134728903 * S_LG10_LAST_GIFT_AMT
23062     +          +    -0.09664002352067 * S_MONTHS_SINCE_LAST_GIFT ;
MPRINT(EM_DIAGRAM):   H13 = 0.03651134728903 * S_LG10_LAST_GIFT_AMT + -0.09664002352067 * S_MONTHS_SINCE_LAST_GIFT ;
23063     +   H14  =    -0.17363634739902 * S_LG10_LAST_GIFT_AMT
23064     +          +    -0.11281438991641 * S_MONTHS_SINCE_LAST_GIFT ;
MPRINT(EM_DIAGRAM):   H14 = -0.17363634739902 * S_LG10_LAST_GIFT_AMT + -0.11281438991641 * S_MONTHS_SINCE_LAST_GIFT ;
23065     +   H15  =    -0.14254997101594 * S_LG10_LAST_GIFT_AMT
23066     +          +    -0.15655966113876 * S_MONTHS_SINCE_LAST_GIFT ;
MPRINT(EM_DIAGRAM):   H15 = -0.14254997101594 * S_LG10_LAST_GIFT_AMT + -0.15655966113876 * S_MONTHS_SINCE_LAST_GIFT ;
23067     +   H11  = H11  +     0.03005913876546 * PEP_STAR0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.03005913876546 * PEP_STAR0 ;
23068     +   H12  = H12  +    -0.20300181645568 * PEP_STAR0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.20300181645568 * PEP_STAR0 ;
23069     +   H13  = H13  +     -0.0702326980168 * PEP_STAR0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.0702326980168 * PEP_STAR0 ;
23070     +   H14  = H14  +     0.11231253274944 * PEP_STAR0 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.11231253274944 * PEP_STAR0 ;
23071     +   H15  = H15  +     0.12761725344185 * PEP_STAR0 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + 0.12761725344185 * PEP_STAR0 ;
23072     +   H11  = H11  +    -0.14563113114845 * FREQUENCY_STATUS_97NK1
23073     +          +     0.20212594449096 * FREQUENCY_STATUS_97NK2
23074     +          +      0.0014929554507 * FREQUENCY_STATUS_97NK3
23075     +          +     -0.3940730057307 * G_CARD_PROM_120  +     0.23611176024002 *
23076     +        G_CARD_PROM_121  +    -0.04191022783843 * G_CARD_PROM_122
23077     +          +    -0.15096620679125 * G_CARD_PROM_123  +     0.05924770061396 *
23078     +        G_CARD_PROM_124  +    -0.01543688591302 * G_CARD_PROM_125
23079     +          +     0.26860316904537 * G_CLUSTER_CODE0  +    -0.14130396415989 *
23080     +        G_CLUSTER_CODE1  +    -0.01140664525568 * G_CLUSTER_CODE2
23081     +          +     0.02006369183742 * G_CLUSTER_CODE3  +    -0.17418810574957 *
23082     +        G_CLUSTER_CODE4  +     0.19361103269638 * G_CLUSTER_CODE5
23083     +          +     0.11922218519382 * G_CLUSTER_CODE6  +    -0.21686647521989 *
23084     +        G_CLUSTER_CODE7  +    -0.06010688189404 *
23085     +        G_RECENT_CARD_RESPONSE_COUNT0  +      0.1913505144762 *
23086     +        G_RECENT_CARD_RESPONSE_COUNT1  +    -0.06710273665895 *
23087     +        G_RECENT_CARD_RESPONSE_COUNT2  +     0.24474589642934 *
23088     +        G_RECENT_CARD_RESPONSE_COUNT3  +     -0.2677452207491 *
23089     +        G_RECENT_RESPONSE_COUNT0  +    -0.01933616335513 *
23090     +        G_RECENT_RESPONSE_COUNT1  +    -0.09968572062077 *
23091     +        G_RECENT_RESPONSE_COUNT2  +     0.25212507530897 *
23092     +        OPT_LIFETIME_CA01_low_7_5  +    -0.01069103886115 *
23093     +        OPT_LIFETIME_CA02_7_5_12_5  +    -0.05078242863735 *
23094     +        OPT_LIFETIME_CA03_12_5_39_5__M ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.14563113114845 * FREQUENCY_STATUS_97NK1 + 0.20212594449096 * FREQUENCY_STATUS_97NK2 + 0.0014929554507 * FREQUENCY_STATUS_97NK3 + -0.3940730057307 * G_CARD_PROM_120 + 0.23611176024002 * G_CARD_PROM_121 + 
-0.04191022783843 * G_CARD_PROM_122 + -0.15096620679125 * G_CARD_PROM_123 + 0.05924770061396 * G_CARD_PROM_124 + -0.01543688591302 * G_CARD_PROM_125 + 0.26860316904537 * G_CLUSTER_CODE0 + -0.14130396415989 * G_CLUSTER_CODE1 + -0.01140664525568 * 
G_CLUSTER_CODE2 + 0.02006369183742 * G_CLUSTER_CODE3 + -0.17418810574957 * G_CLUSTER_CODE4 + 0.19361103269638 * G_CLUSTER_CODE5 + 0.11922218519382 * G_CLUSTER_CODE6 + -0.21686647521989 * G_CLUSTER_CODE7 + -0.06010688189404 * G_RECENT_CARD_RESPONSE_COUNT0 
+ 0.1913505144762 * G_RECENT_CARD_RESPONSE_COUNT1 + -0.06710273665895 * G_RECENT_CARD_RESPONSE_COUNT2 + 0.24474589642934 * G_RECENT_CARD_RESPONSE_COUNT3 + -0.2677452207491 * G_RECENT_RESPONSE_COUNT0 + -0.01933616335513 * G_RECENT_RESPONSE_COUNT1 + 
-0.09968572062077 * G_RECENT_RESPONSE_COUNT2 + 0.25212507530897 * OPT_LIFETIME_CA01_low_7_5 + -0.01069103886115 * OPT_LIFETIME_CA02_7_5_12_5 + -0.05078242863735 * OPT_LIFETIME_CA03_12_5_39_5__M ;
23095     +   H12  = H12  +    -0.15922294620858 * FREQUENCY_STATUS_97NK1
23096     +          +    -0.07230440371065 * FREQUENCY_STATUS_97NK2
23097     +          +     0.19651639022078 * FREQUENCY_STATUS_97NK3
23098     +          +     0.03450407854231 * G_CARD_PROM_120  +     0.54519622345246 *
23099     +        G_CARD_PROM_121  +     0.00590725896404 * G_CARD_PROM_122
23100     +          +    -0.00190622772802 * G_CARD_PROM_123  +     0.03704515845455 *
23101     +        G_CARD_PROM_124  +     0.04494738024974 * G_CARD_PROM_125
23102     +          +     0.02509541631996 * G_CLUSTER_CODE0  +     0.28228578843993 *
23103     +        G_CLUSTER_CODE1  +    -0.03490481006781 * G_CLUSTER_CODE2
23104     +          +     0.24458007180613 * G_CLUSTER_CODE3  +    -0.11377030781566 *
23105     +        G_CLUSTER_CODE4  +       0.070813064555 * G_CLUSTER_CODE5
23106     +          +     0.04243998767648 * G_CLUSTER_CODE6  +    -0.13575994294521 *
23107     +        G_CLUSTER_CODE7  +     0.16034581822961 *
23108     +        G_RECENT_CARD_RESPONSE_COUNT0  +     0.13143121791703 *
23109     +        G_RECENT_CARD_RESPONSE_COUNT1  +     0.01595129526801 *
23110     +        G_RECENT_CARD_RESPONSE_COUNT2  +     -0.2446477302246 *
23111     +        G_RECENT_CARD_RESPONSE_COUNT3  +    -0.33705333365062 *
23112     +        G_RECENT_RESPONSE_COUNT0  +     0.13157294335724 *
23113     +        G_RECENT_RESPONSE_COUNT1  +    -0.18135166952765 *
23114     +        G_RECENT_RESPONSE_COUNT2  +     0.00473806905498 *
23115     +        OPT_LIFETIME_CA01_low_7_5  +      0.0385899725921 *
23116     +        OPT_LIFETIME_CA02_7_5_12_5  +     0.24306387190096 *
23117     +        OPT_LIFETIME_CA03_12_5_39_5__M ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.15922294620858 * FREQUENCY_STATUS_97NK1 + -0.07230440371065 * FREQUENCY_STATUS_97NK2 + 0.19651639022078 * FREQUENCY_STATUS_97NK3 + 0.03450407854231 * G_CARD_PROM_120 + 0.54519622345246 * G_CARD_PROM_121 + 
0.00590725896404 * G_CARD_PROM_122 + -0.00190622772802 * G_CARD_PROM_123 + 0.03704515845455 * G_CARD_PROM_124 + 0.04494738024974 * G_CARD_PROM_125 + 0.02509541631996 * G_CLUSTER_CODE0 + 0.28228578843993 * G_CLUSTER_CODE1 + -0.03490481006781 * 
G_CLUSTER_CODE2 + 0.24458007180613 * G_CLUSTER_CODE3 + -0.11377030781566 * G_CLUSTER_CODE4 + 0.070813064555 * G_CLUSTER_CODE5 + 0.04243998767648 * G_CLUSTER_CODE6 + -0.13575994294521 * G_CLUSTER_CODE7 + 0.16034581822961 * G_RECENT_CARD_RESPONSE_COUNT0 + 
0.13143121791703 * G_RECENT_CARD_RESPONSE_COUNT1 + 0.01595129526801 * G_RECENT_CARD_RESPONSE_COUNT2 + -0.2446477302246 * G_RECENT_CARD_RESPONSE_COUNT3 + -0.33705333365062 * G_RECENT_RESPONSE_COUNT0 + 0.13157294335724 * G_RECENT_RESPONSE_COUNT1 + 
-0.18135166952765 * G_RECENT_RESPONSE_COUNT2 + 0.00473806905498 * OPT_LIFETIME_CA01_low_7_5 + 0.0385899725921 * OPT_LIFETIME_CA02_7_5_12_5 + 0.24306387190096 * OPT_LIFETIME_CA03_12_5_39_5__M ;
23118     +   H13  = H13  +     -0.1696906013875 * FREQUENCY_STATUS_97NK1
23119     +          +     0.40692947294537 * FREQUENCY_STATUS_97NK2
23120     +          +    -0.05734106633692 * FREQUENCY_STATUS_97NK3
23121     +          +     0.00484710407197 * G_CARD_PROM_120  +    -0.22900315315716 *
23122     +        G_CARD_PROM_121  +     -0.1654198369454 * G_CARD_PROM_122
23123     +          +    -0.06663310381687 * G_CARD_PROM_123  +    -0.05896495648004 *
23124     +        G_CARD_PROM_124  +    -0.26859656461372 * G_CARD_PROM_125
23125     +          +    -0.00784646645783 * G_CLUSTER_CODE0  +     0.11431550816909 *
23126     +        G_CLUSTER_CODE1  +    -0.11983779104434 * G_CLUSTER_CODE2
23127     +          +    -0.02173959144578 * G_CLUSTER_CODE3  +    -0.06575806168267 *
23128     +        G_CLUSTER_CODE4  +     0.22091202516084 * G_CLUSTER_CODE5
23129     +          +    -0.27731416675693 * G_CLUSTER_CODE6  +     0.05420932906241 *
23130     +        G_CLUSTER_CODE7  +    -0.13408597060288 *
23131     +        G_RECENT_CARD_RESPONSE_COUNT0  +     0.17972293211417 *
23132     +        G_RECENT_CARD_RESPONSE_COUNT1  +     0.20599895754343 *
23133     +        G_RECENT_CARD_RESPONSE_COUNT2  +    -0.01071237536063 *
23134     +        G_RECENT_CARD_RESPONSE_COUNT3  +     0.02554398537131 *
23135     +        G_RECENT_RESPONSE_COUNT0  +     0.16098973900149 *
23136     +        G_RECENT_RESPONSE_COUNT1  +    -0.16666227055982 *
23137     +        G_RECENT_RESPONSE_COUNT2  +    -0.27758801103872 *
23138     +        OPT_LIFETIME_CA01_low_7_5  +     0.25757463583859 *
23139     +        OPT_LIFETIME_CA02_7_5_12_5  +     0.25237716930391 *
23140     +        OPT_LIFETIME_CA03_12_5_39_5__M ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.1696906013875 * FREQUENCY_STATUS_97NK1 + 0.40692947294537 * FREQUENCY_STATUS_97NK2 + -0.05734106633692 * FREQUENCY_STATUS_97NK3 + 0.00484710407197 * G_CARD_PROM_120 + -0.22900315315716 * G_CARD_PROM_121 + 
-0.1654198369454 * G_CARD_PROM_122 + -0.06663310381687 * G_CARD_PROM_123 + -0.05896495648004 * G_CARD_PROM_124 + -0.26859656461372 * G_CARD_PROM_125 + -0.00784646645783 * G_CLUSTER_CODE0 + 0.11431550816909 * G_CLUSTER_CODE1 + -0.11983779104434 * 
G_CLUSTER_CODE2 + -0.02173959144578 * G_CLUSTER_CODE3 + -0.06575806168267 * G_CLUSTER_CODE4 + 0.22091202516084 * G_CLUSTER_CODE5 + -0.27731416675693 * G_CLUSTER_CODE6 + 0.05420932906241 * G_CLUSTER_CODE7 + -0.13408597060288 * G_RECENT_CARD_RESPONSE_COUNT0 
+ 0.17972293211417 * G_RECENT_CARD_RESPONSE_COUNT1 + 0.20599895754343 * G_RECENT_CARD_RESPONSE_COUNT2 + -0.01071237536063 * G_RECENT_CARD_RESPONSE_COUNT3 + 0.02554398537131 * G_RECENT_RESPONSE_COUNT0 + 0.16098973900149 * G_RECENT_RESPONSE_COUNT1 + 
-0.16666227055982 * G_RECENT_RESPONSE_COUNT2 + -0.27758801103872 * OPT_LIFETIME_CA01_low_7_5 + 0.25757463583859 * OPT_LIFETIME_CA02_7_5_12_5 + 0.25237716930391 * OPT_LIFETIME_CA03_12_5_39_5__M ;
23141     +   H14  = H14  +    -0.03443861703329 * FREQUENCY_STATUS_97NK1
23142     +          +     0.25396033344922 * FREQUENCY_STATUS_97NK2
23143     +          +     0.26162238812084 * FREQUENCY_STATUS_97NK3
23144     +          +    -0.01577837970421 * G_CARD_PROM_120  +    -0.04100216988281 *
23145     +        G_CARD_PROM_121  +     0.00567927330601 * G_CARD_PROM_122
23146     +          +    -0.13184132585823 * G_CARD_PROM_123  +    -0.02412146842202 *
23147     +        G_CARD_PROM_124  +    -0.02942687972544 * G_CARD_PROM_125
23148     +          +     0.02755483757796 * G_CLUSTER_CODE0  +    -0.14031288884306 *
23149     +        G_CLUSTER_CODE1  +    -0.17104676518115 * G_CLUSTER_CODE2
23150     +          +      0.0714048658162 * G_CLUSTER_CODE3  +    -0.19368179923697 *
23151     +        G_CLUSTER_CODE4  +     0.04423930483681 * G_CLUSTER_CODE5
23152     +          +    -0.12878883597515 * G_CLUSTER_CODE6  +     0.15510351027961 *
23153     +        G_CLUSTER_CODE7  +      0.1860788202747 *
23154     +        G_RECENT_CARD_RESPONSE_COUNT0  +    -0.34769629166766 *
23155     +        G_RECENT_CARD_RESPONSE_COUNT1  +     -0.3487122552139 *
23156     +        G_RECENT_CARD_RESPONSE_COUNT2  +    -0.00671606308498 *
23157     +        G_RECENT_CARD_RESPONSE_COUNT3  +    -0.17813215537047 *
23158     +        G_RECENT_RESPONSE_COUNT0  +     0.18702606774865 *
23159     +        G_RECENT_RESPONSE_COUNT1  +    -0.03579815700308 *
23160     +        G_RECENT_RESPONSE_COUNT2  +       0.163759524503 *
23161     +        OPT_LIFETIME_CA01_low_7_5  +    -0.06082717997309 *
23162     +        OPT_LIFETIME_CA02_7_5_12_5  +    -0.11457813018401 *
23163     +        OPT_LIFETIME_CA03_12_5_39_5__M ;
MPRINT(EM_DIAGRAM):   H14 = H14 + -0.03443861703329 * FREQUENCY_STATUS_97NK1 + 0.25396033344922 * FREQUENCY_STATUS_97NK2 + 0.26162238812084 * FREQUENCY_STATUS_97NK3 + -0.01577837970421 * G_CARD_PROM_120 + -0.04100216988281 * G_CARD_PROM_121 + 
0.00567927330601 * G_CARD_PROM_122 + -0.13184132585823 * G_CARD_PROM_123 + -0.02412146842202 * G_CARD_PROM_124 + -0.02942687972544 * G_CARD_PROM_125 + 0.02755483757796 * G_CLUSTER_CODE0 + -0.14031288884306 * G_CLUSTER_CODE1 + -0.17104676518115 * 
G_CLUSTER_CODE2 + 0.0714048658162 * G_CLUSTER_CODE3 + -0.19368179923697 * G_CLUSTER_CODE4 + 0.04423930483681 * G_CLUSTER_CODE5 + -0.12878883597515 * G_CLUSTER_CODE6 + 0.15510351027961 * G_CLUSTER_CODE7 + 0.1860788202747 * G_RECENT_CARD_RESPONSE_COUNT0 + 
-0.34769629166766 * G_RECENT_CARD_RESPONSE_COUNT1 + -0.3487122552139 * G_RECENT_CARD_RESPONSE_COUNT2 + -0.00671606308498 * G_RECENT_CARD_RESPONSE_COUNT3 + -0.17813215537047 * G_RECENT_RESPONSE_COUNT0 + 0.18702606774865 * G_RECENT_RESPONSE_COUNT1 + 
-0.03579815700308 * G_RECENT_RESPONSE_COUNT2 + 0.163759524503 * OPT_LIFETIME_CA01_low_7_5 + -0.06082717997309 * OPT_LIFETIME_CA02_7_5_12_5 + -0.11457813018401 * OPT_LIFETIME_CA03_12_5_39_5__M ;
23164     +   H15  = H15  +    -0.24636583525145 * FREQUENCY_STATUS_97NK1
23165     +          +    -0.13397467541673 * FREQUENCY_STATUS_97NK2
23166     +          +     0.03738446556582 * FREQUENCY_STATUS_97NK3
23167     +          +    -0.04028604364442 * G_CARD_PROM_120  +     0.25890223458841 *
23168     +        G_CARD_PROM_121  +    -0.32315566530631 * G_CARD_PROM_122
23169     +          +     0.24088252059109 * G_CARD_PROM_123  +    -0.12162837044901 *
23170     +        G_CARD_PROM_124  +     0.19399925575937 * G_CARD_PROM_125
23171     +          +     0.31384309760906 * G_CLUSTER_CODE0  +    -0.05837182941526 *
23172     +        G_CLUSTER_CODE1  +    -0.24457979427513 * G_CLUSTER_CODE2
23173     +          +    -0.38348549398829 * G_CLUSTER_CODE3  +     0.16093257412791 *
23174     +        G_CLUSTER_CODE4  +     0.19312287587839 * G_CLUSTER_CODE5
23175     +          +     0.05694856113051 * G_CLUSTER_CODE6  +    -0.14592394866605 *
23176     +        G_CLUSTER_CODE7  +     0.10136853908125 *
23177     +        G_RECENT_CARD_RESPONSE_COUNT0  +     0.09013931998392 *
23178     +        G_RECENT_CARD_RESPONSE_COUNT1  +    -0.17333289980295 *
23179     +        G_RECENT_CARD_RESPONSE_COUNT2  +    -0.13541861153861 *
23180     +        G_RECENT_CARD_RESPONSE_COUNT3  +    -0.17636606720962 *
23181     +        G_RECENT_RESPONSE_COUNT0  +    -0.33374677941973 *
23182     +        G_RECENT_RESPONSE_COUNT1  +     0.13347672256229 *
23183     +        G_RECENT_RESPONSE_COUNT2  +      0.0081287800932 *
23184     +        OPT_LIFETIME_CA01_low_7_5  +     0.04271317088041 *
23185     +        OPT_LIFETIME_CA02_7_5_12_5  +     0.28825592588835 *
23186     +        OPT_LIFETIME_CA03_12_5_39_5__M ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.24636583525145 * FREQUENCY_STATUS_97NK1 + -0.13397467541673 * FREQUENCY_STATUS_97NK2 + 0.03738446556582 * FREQUENCY_STATUS_97NK3 + -0.04028604364442 * G_CARD_PROM_120 + 0.25890223458841 * G_CARD_PROM_121 + 
-0.32315566530631 * G_CARD_PROM_122 + 0.24088252059109 * G_CARD_PROM_123 + -0.12162837044901 * G_CARD_PROM_124 + 0.19399925575937 * G_CARD_PROM_125 + 0.31384309760906 * G_CLUSTER_CODE0 + -0.05837182941526 * G_CLUSTER_CODE1 + -0.24457979427513 * 
G_CLUSTER_CODE2 + -0.38348549398829 * G_CLUSTER_CODE3 + 0.16093257412791 * G_CLUSTER_CODE4 + 0.19312287587839 * G_CLUSTER_CODE5 + 0.05694856113051 * G_CLUSTER_CODE6 + -0.14592394866605 * G_CLUSTER_CODE7 + 0.10136853908125 * G_RECENT_CARD_RESPONSE_COUNT0 + 
0.09013931998392 * G_RECENT_CARD_RESPONSE_COUNT1 + -0.17333289980295 * G_RECENT_CARD_RESPONSE_COUNT2 + -0.13541861153861 * G_RECENT_CARD_RESPONSE_COUNT3 + -0.17636606720962 * G_RECENT_RESPONSE_COUNT0 + -0.33374677941973 * G_RECENT_RESPONSE_COUNT1 + 
0.13347672256229 * G_RECENT_RESPONSE_COUNT2 + 0.0081287800932 * OPT_LIFETIME_CA01_low_7_5 + 0.04271317088041 * OPT_LIFETIME_CA02_7_5_12_5 + 0.28825592588835 * OPT_LIFETIME_CA03_12_5_39_5__M ;
23187     +   H11  =    -0.12061348926487 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.12061348926487 + H11 ;
23188     +   H12  =     1.44828367707358 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 1.44828367707358 + H12 ;
23189     +   H13  =     0.66939934654328 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.66939934654328 + H13 ;
23190     +   H14  =    -1.05032736753047 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -1.05032736753047 + H14 ;
23191     +   H15  =     0.63427443678027 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 0.63427443678027 + H15 ;
23192     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
23193     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
23194     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
23195     +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
23196     +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
23197     +END;
MPRINT(EM_DIAGRAM):   END;
23198     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
23199     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
23200     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
23201     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
23202     +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
23203     +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
23204     +END;
MPRINT(EM_DIAGRAM):   END;
23205     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23206     +*** Writing the Node TARGET_B ;
MPRINT(EM_DIAGRAM):   *** Writing the Node TARGET_B ;
23207     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23208     +
23209     +*** Generate dummy variables for TARGET_B ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for TARGET_B ;
23210     +drop TARGET_B1 TARGET_B0 ;
MPRINT(EM_DIAGRAM):   drop TARGET_B1 TARGET_B0 ;
23211     +label F_TARGET_B = 'From: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label F_TARGET_B = 'From: TARGET_B' ;
23212     +length F_TARGET_B $ 12;
MPRINT(EM_DIAGRAM):   length F_TARGET_B $ 12;
23213     +F_TARGET_B = put( TARGET_B , BEST12. );
MPRINT(EM_DIAGRAM):   F_TARGET_B = put( TARGET_B , BEST12. );
23214     +%DMNORMIP( F_TARGET_B )
MPRINT(DMNORMIP):   call dmnorm(F_TARGET_B,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23215     +if missing( TARGET_B ) then do;
MPRINT(EM_DIAGRAM):   if missing( TARGET_B ) then do;
23216     +   TARGET_B1 = .;
MPRINT(EM_DIAGRAM):   TARGET_B1 = .;
23217     +   TARGET_B0 = .;
MPRINT(EM_DIAGRAM):   TARGET_B0 = .;
23218     +end;
MPRINT(EM_DIAGRAM):   end;
23219     +else do;
MPRINT(EM_DIAGRAM):   else do;
23220     +   if F_TARGET_B = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_TARGET_B = '0' then do;
23221     +      TARGET_B1 = 0;
MPRINT(EM_DIAGRAM):   TARGET_B1 = 0;
23222     +      TARGET_B0 = 1;
MPRINT(EM_DIAGRAM):   TARGET_B0 = 1;
23223     +   end;
MPRINT(EM_DIAGRAM):   end;
23224     +   else if F_TARGET_B = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_TARGET_B = '1' then do;
23225     +      TARGET_B1 = 1;
MPRINT(EM_DIAGRAM):   TARGET_B1 = 1;
23226     +      TARGET_B0 = 0;
MPRINT(EM_DIAGRAM):   TARGET_B0 = 0;
23227     +   end;
MPRINT(EM_DIAGRAM):   end;
23228     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23229     +      TARGET_B1 = .;
MPRINT(EM_DIAGRAM):   TARGET_B1 = .;
23230     +      TARGET_B0 = .;
MPRINT(EM_DIAGRAM):   TARGET_B0 = .;
23231     +   end;
MPRINT(EM_DIAGRAM):   end;
23232     +end;
MPRINT(EM_DIAGRAM):   end;
23233     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
23234     +   P_TARGET_B1  =     0.02195352842033 * H11  +     0.21907912260295 * H12
23235     +          +    -0.00602000947085 * H13  +    -0.16721387837298 * H14
23236     +          +     0.00921300971748 * H15 ;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.02195352842033 * H11 + 0.21907912260295 * H12 + -0.00602000947085 * H13 + -0.16721387837298 * H14 + 0.00921300971748 * H15 ;
23237     +   P_TARGET_B1  = P_TARGET_B1  +    -0.07788676399924 * S_LG10_LAST_GIFT_AMT
23238     +          +     -0.1126115350924 * S_MONTHS_SINCE_LAST_GIFT ;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = P_TARGET_B1 + -0.07788676399924 * S_LG10_LAST_GIFT_AMT + -0.1126115350924 * S_MONTHS_SINCE_LAST_GIFT ;
23239     +   P_TARGET_B1  = P_TARGET_B1  +    -0.06296582382211 * PEP_STAR0 ;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = P_TARGET_B1 + -0.06296582382211 * PEP_STAR0 ;
23240     +   P_TARGET_B1  = P_TARGET_B1  +    -0.18493968438091 * FREQUENCY_STATUS_97NK1
23241     +          +     -0.0649803954514 * FREQUENCY_STATUS_97NK2
23242     +          +     0.08894436136873 * FREQUENCY_STATUS_97NK3
23243     +          +     0.05460935752949 * G_CARD_PROM_120  +     0.14425413681475 *
23244     +        G_CARD_PROM_121  +     0.05916771935944 * G_CARD_PROM_122
23245     +          +    -0.02256668123949 * G_CARD_PROM_123  +     0.17355405358596 *
23246     +        G_CARD_PROM_124  +    -0.33281630485931 * G_CARD_PROM_125
23247     +          +     0.26831752125435 * G_CLUSTER_CODE0  +     0.31093381696928 *
23248     +        G_CLUSTER_CODE1  +       0.162142533014 * G_CLUSTER_CODE2
23249     +          +     0.12085717714535 * G_CLUSTER_CODE3  +     0.02721673499213 *
23250     +        G_CLUSTER_CODE4  +    -0.05819891225349 * G_CLUSTER_CODE5
23251     +          +    -0.10468782734892 * G_CLUSTER_CODE6  +    -0.31378426726894 *
23252     +        G_CLUSTER_CODE7  +     0.31663647867234 *
23253     +        G_RECENT_CARD_RESPONSE_COUNT0  +    -0.00979202314261 *
23254     +        G_RECENT_CARD_RESPONSE_COUNT1  +    -0.06666722392774 *
23255     +        G_RECENT_CARD_RESPONSE_COUNT2  +     -0.0496077950265 *
23256     +        G_RECENT_CARD_RESPONSE_COUNT3  +      0.0792950327838 *
23257     +        G_RECENT_RESPONSE_COUNT0  +     0.01232282922993 *
23258     +        G_RECENT_RESPONSE_COUNT1  +    -0.03593917372911 *
23259     +        G_RECENT_RESPONSE_COUNT2  +    -0.31035309637507 *
23260     +        OPT_LIFETIME_CA01_low_7_5  +    -0.02898637915334 *
23261     +        OPT_LIFETIME_CA02_7_5_12_5  +     0.03588269807094 *
23262     +        OPT_LIFETIME_CA03_12_5_39_5__M ;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = P_TARGET_B1 + -0.18493968438091 * FREQUENCY_STATUS_97NK1 + -0.0649803954514 * FREQUENCY_STATUS_97NK2 + 0.08894436136873 * FREQUENCY_STATUS_97NK3 + 0.05460935752949 * G_CARD_PROM_120 + 0.14425413681475 * G_CARD_PROM_121 
+ 0.05916771935944 * G_CARD_PROM_122 + -0.02256668123949 * G_CARD_PROM_123 + 0.17355405358596 * G_CARD_PROM_124 + -0.33281630485931 * G_CARD_PROM_125 + 0.26831752125435 * G_CLUSTER_CODE0 + 0.31093381696928 * G_CLUSTER_CODE1 + 0.162142533014 * 
G_CLUSTER_CODE2 + 0.12085717714535 * G_CLUSTER_CODE3 + 0.02721673499213 * G_CLUSTER_CODE4 + -0.05819891225349 * G_CLUSTER_CODE5 + -0.10468782734892 * G_CLUSTER_CODE6 + -0.31378426726894 * G_CLUSTER_CODE7 + 0.31663647867234 * G_RECENT_CARD_RESPONSE_COUNT0 
+ -0.00979202314261 * G_RECENT_CARD_RESPONSE_COUNT1 + -0.06666722392774 * G_RECENT_CARD_RESPONSE_COUNT2 + -0.0496077950265 * G_RECENT_CARD_RESPONSE_COUNT3 + 0.0792950327838 * G_RECENT_RESPONSE_COUNT0 + 0.01232282922993 * G_RECENT_RESPONSE_COUNT1 + 
-0.03593917372911 * G_RECENT_RESPONSE_COUNT2 + -0.31035309637507 * OPT_LIFETIME_CA01_low_7_5 + -0.02898637915334 * OPT_LIFETIME_CA02_7_5_12_5 + 0.03588269807094 * OPT_LIFETIME_CA03_12_5_39_5__M ;
23263     +   P_TARGET_B1  =    -1.09866682917952 + P_TARGET_B1 ;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = -1.09866682917952 + P_TARGET_B1 ;
23264     +   P_TARGET_B0  = 0;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0;
23265     +   _MAX_ = MAX (P_TARGET_B1 , P_TARGET_B0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_TARGET_B1 , P_TARGET_B0 );
23266     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
23267     +   P_TARGET_B1  = EXP(P_TARGET_B1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = EXP(P_TARGET_B1 - _MAX_);
23268     +   _SUM_ = _SUM_ + P_TARGET_B1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_TARGET_B1 ;
23269     +   P_TARGET_B0  = EXP(P_TARGET_B0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = EXP(P_TARGET_B0 - _MAX_);
23270     +   _SUM_ = _SUM_ + P_TARGET_B0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_TARGET_B0 ;
23271     +   P_TARGET_B1  = P_TARGET_B1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = P_TARGET_B1 / _SUM_;
23272     +   P_TARGET_B0  = P_TARGET_B0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = P_TARGET_B0 / _SUM_;
23273     +END;
MPRINT(EM_DIAGRAM):   END;
23274     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
23275     +   P_TARGET_B1  = .;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = .;
23276     +   P_TARGET_B0  = .;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = .;
23277     +END;
MPRINT(EM_DIAGRAM):   END;
23278     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
23279     +   P_TARGET_B1  =     0.25004693073024;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = 0.25004693073024;
23280     +   P_TARGET_B0  =     0.74995306926975;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = 0.74995306926975;
23281     +END;
MPRINT(EM_DIAGRAM):   END;
23282     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
23283     +*** Writing the Residuals  of the Node TARGET_B ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node TARGET_B ;
23284     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
23285     +IF MISSING( TARGET_B1 ) THEN R_TARGET_B1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( TARGET_B1 ) THEN R_TARGET_B1 = . ;
23286     +ELSE R_TARGET_B1  = TARGET_B1  - P_TARGET_B1 ;
MPRINT(EM_DIAGRAM):   ELSE R_TARGET_B1 = TARGET_B1 - P_TARGET_B1 ;
23287     +IF MISSING( TARGET_B0 ) THEN R_TARGET_B0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( TARGET_B0 ) THEN R_TARGET_B0 = . ;
23288     +ELSE R_TARGET_B0  = TARGET_B0  - P_TARGET_B0 ;
MPRINT(EM_DIAGRAM):   ELSE R_TARGET_B0 = TARGET_B0 - P_TARGET_B0 ;
23289     +
23290     +
23291     +*** Update Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Update Posterior Probabilities;
23292     +P_TARGET_B1 = P_TARGET_B1 * 0.05 / 0.25004693073024;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = P_TARGET_B1 * 0.05 / 0.25004693073024;
23293     +P_TARGET_B0 = P_TARGET_B0 * 0.95 / 0.74995306926975;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = P_TARGET_B0 * 0.95 / 0.74995306926975;
23294     +drop _sum; _sum = P_TARGET_B1 + P_TARGET_B0 ;
MPRINT(EM_DIAGRAM):   drop _sum;
MPRINT(EM_DIAGRAM):   _sum = P_TARGET_B1 + P_TARGET_B0 ;
23295     +if _sum > 4.135903E-25 then do;
MPRINT(EM_DIAGRAM):   if _sum > 4.135903E-25 then do;
23296     +   P_TARGET_B1 = P_TARGET_B1 / _sum;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = P_TARGET_B1 / _sum;
23297     +   P_TARGET_B0 = P_TARGET_B0 / _sum;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = P_TARGET_B0 / _sum;
23298     +end;
MPRINT(EM_DIAGRAM):   end;
23299     +
23300     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
23301     +label D_TARGET_B = 'Decision: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label D_TARGET_B = 'Decision: TARGET_B' ;
23302     +label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
23303     +label BP_TARGET_B = 'Best Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label BP_TARGET_B = 'Best Profit: TARGET_B' ;
23304     +label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
23305     +
23306     +length D_TARGET_B $ 9;
MPRINT(EM_DIAGRAM):   length D_TARGET_B $ 9;
23307     +
23308     +D_TARGET_B = ' ';
MPRINT(EM_DIAGRAM):   D_TARGET_B = ' ';
23309     +EP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = .;
23310     +BP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   BP_TARGET_B = .;
23311     +CP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   CP_TARGET_B = .;
23312     +
23313     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
23314     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
23315     +
23316     +D_TARGET_B = '1' ;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '1' ;
23317     +EP_TARGET_B = P_TARGET_B1 * 14.5 + P_TARGET_B0 * -0.5;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = P_TARGET_B1 * 14.5 + P_TARGET_B0 * -0.5;
23318     +drop _sum;
MPRINT(EM_DIAGRAM):   drop _sum;
23319     +_sum = P_TARGET_B1 * 0 + P_TARGET_B0 * 0;
MPRINT(EM_DIAGRAM):   _sum = P_TARGET_B1 * 0 + P_TARGET_B0 * 0;
23320     +if _sum > EP_TARGET_B + 6.593837E-12 then do;
MPRINT(EM_DIAGRAM):   if _sum > EP_TARGET_B + 6.593837E-12 then do;
23321     +   EP_TARGET_B = _sum; _decnum = 2;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
23322     +   D_TARGET_B = '0' ;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '0' ;
23323     +end;
MPRINT(EM_DIAGRAM):   end;
23324     +
23325     +*** Decision Matrix;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
23326     +array NEURALdema [2,2] _temporary_ (
23327     +/* row 1 */  14.5 0
23328     +/* row 2 */  -0.5 0
23329     +);
MPRINT(EM_DIAGRAM):   array NEURALdema [2,2] _temporary_ ( 14.5 0 -0.5 0 );
23330     +
23331     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
23332     +drop _tarnum; select( F_TARGET_B );
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_TARGET_B );
23333     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
23334     +   when('0' ) _tarnum = 2;
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
23335     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
23336     +end;
MPRINT(EM_DIAGRAM):   end;
23337     +if _tarnum <= 0 then goto NEURALdeex;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto NEURALdeex;
23338     +
23339     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
23340     +CP_TARGET_B = NEURALdema [_tarnum,_decnum];
MPRINT(EM_DIAGRAM):   CP_TARGET_B = NEURALdema [_tarnum,_decnum];
23341     +
23342     +*** Best Possible Consequence of Any Decision without Cost;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
23343     +array NEURALdebe [2] _temporary_ ( 14.5 0);
MPRINT(EM_DIAGRAM):   array NEURALdebe [2] _temporary_ ( 14.5 0);
23344     +BP_TARGET_B = NEURALdebe [_tarnum];
MPRINT(EM_DIAGRAM):   BP_TARGET_B = NEURALdebe [_tarnum];
23345     +
23346     +
23347     +NEURALdeex:;
MPRINT(EM_DIAGRAM):   NEURALdeex:;
23348     +
23349     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
23350     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23351     +*** Writing the I_TARGET_B  AND U_TARGET_B ;
MPRINT(EM_DIAGRAM):   *** Writing the I_TARGET_B AND U_TARGET_B ;
23352     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23353     +_MAXP_ = P_TARGET_B1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_TARGET_B1 ;
23354     +I_TARGET_B  = "1           " ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = "1           " ;
23355     +U_TARGET_B  =                    1;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 1;
23356     +IF( _MAXP_ LT P_TARGET_B0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_TARGET_B0 ) THEN DO;
23357     +   _MAXP_ = P_TARGET_B0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_TARGET_B0 ;
23358     +   I_TARGET_B  = "0           " ;
MPRINT(EM_DIAGRAM):   I_TARGET_B = "0           " ;
23359     +   U_TARGET_B  =                    0;
MPRINT(EM_DIAGRAM):   U_TARGET_B = 0;
23360     +END;
MPRINT(EM_DIAGRAM):   END;
23361     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
23362     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
23363     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
23364     +drop
23365     +H11
23366     +H12
23367     +H13
23368     +H14
23369     +H15
23370     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
23371     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
23372      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.36 seconds
      cpu time            0.34 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.38 seconds
      cpu time            0.35 seconds
      

MPRINT(EM_DIAGRAM):   quit;
23373      quit;
23374      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
23375      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23376      * Neural: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural: Computing metadata for TRAIN data;
23377      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.32 seconds
      cpu time            0.32 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Neural\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural_TRAIN out=WORK.M3L6TL2I noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3L6TL2I;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3L6TL2I(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3L6TL2I;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3L6TL2I;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M33N72BN NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M33N72BN;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M33N72BN;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2V46MIQ(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M33N72BN;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M33N72BN;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M33N72BN;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M33N72BN;
MPRINT(EMADVISECOLUMNS):   set WORK.M33N72BN;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("TARGET_B") model = "Neural";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
23681      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMINFO;
23682      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
23683      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
23684      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
23688      run;
23689      proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
23690      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23691      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23692      proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
23693      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23694      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23695      proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
23696      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23697      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23698      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMINFO;
23699      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
23700      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23701      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

23702      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
23703      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
23704      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
23705      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.31 seconds
      cpu time            0.31 seconds
      
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.32 seconds
      cpu time            0.31 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
