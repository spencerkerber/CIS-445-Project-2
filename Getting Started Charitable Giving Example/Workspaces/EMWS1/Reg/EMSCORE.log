MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 11, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:47:28" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                October 11, 2015
Time:                14:47:28
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0VDA21S "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0VDA21S new;
MPRINT(EM_DIAGRAM):   run;
21649      proc transpose data=EMWS1.Reg_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Reg_EMESTIMATE out=WORK.TEMPREG;
21650      where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
21651      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.REG_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 203 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21652      proc transpose data=EMWS1.Reg_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Reg_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
21653      var "CARD_PROM_120"n--"REP_DONOR_GENDERU"n;
MPRINT(EM_DIAGRAM):   var "CARD_PROM_120"n--"REP_DONOR_GENDERU"n;
21654      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 2 observations read from the data set EMWS1.REG_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 165 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21655      proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
21656      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
21657      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 203 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 203 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21658      proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
21659      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
21660      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 165 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 165 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21661      data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
21662      merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
21663      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
21664      if (ina and inb) and TARGET_B ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and TARGET_B ne . then output;
21665      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 203 observations read from the data set WORK.TEMPREG.
NOTE: There were 165 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 5 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

21666      data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
21667      length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
21668      set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
21669      i=1;
MPRINT(EM_DIAGRAM):   i=1;
21670      do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
21671      term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
21672      i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
21673      output;
MPRINT(EM_DIAGRAM):   output;
21674      end;
MPRINT(EM_DIAGRAM):   end;
21675      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 5 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21676      proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
21677      by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
21678      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set WORK.TEMPREG3.
NOTE: 2 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 3 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21679      filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21680      *------------------------------------------------------------*;
21681      * Reg: Scoring DATA data;
21682      *------------------------------------------------------------*;
21683      data EMWS1.Reg_TRAIN
21684      / view=EMWS1.Reg_TRAIN
21685      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_TRAIN / view=EMWS1.Reg_TRAIN ;
21686      set EMWS1.Trans_TRAIN
21687      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_TRAIN ;
21688      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
21689     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
21690     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
21691     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
21692     +
21693     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
21694     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
21695     +
21696     +length I_TARGET_B $ 12;
MPRINT(EM_DIAGRAM):   length I_TARGET_B $ 12;
21697     +label I_TARGET_B = 'Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label I_TARGET_B = 'Into: TARGET_B' ;
21698     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
21699     +array REGDRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REGDRF [2] $12 _temporary_ ('1' '0' );
21700     +label U_TARGET_B = 'Unnormalized Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label U_TARGET_B = 'Unnormalized Into: TARGET_B' ;
21701     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
21702     +ARRAY REGDRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REGDRU[2] _TEMPORARY_ (1 0);
21703     +
21704     +*** Generate dummy variables for TARGET_B ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for TARGET_B ;
21705     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
21706     +label F_TARGET_B = 'From: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label F_TARGET_B = 'From: TARGET_B' ;
21707     +length F_TARGET_B $ 12;
MPRINT(EM_DIAGRAM):   length F_TARGET_B $ 12;
21708     +F_TARGET_B = put( TARGET_B , BEST12. );
MPRINT(EM_DIAGRAM):   F_TARGET_B = put( TARGET_B , BEST12. );
21709     +%DMNORMIP( F_TARGET_B )
MPRINT(DMNORMIP):   call dmnorm(F_TARGET_B,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( TARGET_B ) then do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
21710     +if missing( TARGET_B ) then do;
MPRINT(EM_DIAGRAM):   if F_TARGET_B = '0' then do;
21711     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = 1;
21712     +end;
MPRINT(EM_DIAGRAM):   end;
21713     +else do;
MPRINT(EM_DIAGRAM):   else if F_TARGET_B = '1' then do;
21714     +   if F_TARGET_B = '0'  then do;
MPRINT(EM_DIAGRAM):   _Y = 0;
21715     +      _Y = 1;
MPRINT(EM_DIAGRAM):   end;
21716     +   end;
21717     +   else if F_TARGET_B = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _Y = .;
21718     +      _Y = 0;
MPRINT(EM_DIAGRAM):   end;
21719     +   end;
MPRINT(EM_DIAGRAM):   end;
21720     +   else do;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
21721     +      _Y = .;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
21722     +   end;
21723     +end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for FREQUENCY_STATUS_97NK ;
21724     +
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 ;
21725     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   if missing( FREQUENCY_STATUS_97NK ) then do;
21726     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _3_0 = .;
21727     +
MPRINT(EM_DIAGRAM):   _3_1 = .;
21728     +*** Generate dummy variables for FREQUENCY_STATUS_97NK ;
MPRINT(EM_DIAGRAM):   _3_2 = .;
21729     +drop _3_0 _3_1 _3_2 ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21730     +if missing( FREQUENCY_STATUS_97NK ) then do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21731     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   end;
21732     +   _3_1 = .;
21733     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   else do;
21734     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
21735     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
21736     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( FREQUENCY_STATUS_97NK , BEST12. );
21737     +else do;
21738     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
21739     +   _dm12 = put( FREQUENCY_STATUS_97NK , BEST12. );
21740     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
MPRINT(EM_DIAGRAM):   end;
21741     +   if _dm12 = '1'  then do;
21742     +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
21743     +      _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
21744     +      _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
21745     +   end;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
21746     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
21747     +      _3_0 = 0;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
21748     +      _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
21749     +      _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
21750     +   end;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
21751     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   end;
21752     +      _3_0 = 0;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
21753     +      _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
21754     +      _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
21755     +   end;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
21756     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   end;
21757     +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   else do;
21758     +      _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = .;
21759     +      _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = .;
21760     +   end;
MPRINT(EM_DIAGRAM):   _3_2 = .;
21761     +   else do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21762     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   end;
21763     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   end;
21764     +      _3_2 = .;
21765     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for OPT_MEDIAN_HOME_VALUE ;
21766     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _12_0 ;
21767     +   end;
MPRINT(EM_DIAGRAM):   if missing( OPT_MEDIAN_HOME_VALUE ) then do;
21768     +end;
MPRINT(EM_DIAGRAM):   _12_0 = .;
21769     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21770     +*** Generate dummy variables for OPT_MEDIAN_HOME_VALUE ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21771     +drop _12_0 ;
MPRINT(EM_DIAGRAM):   end;
21772     +if missing( OPT_MEDIAN_HOME_VALUE ) then do;
21773     +   _12_0 = .;
MPRINT(EM_DIAGRAM):   else do;
21774     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
21775     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
21776     +end;
21777     +else do;
21778     +   length _dm32 $ 32; drop _dm32 ;
21779     +   %DMNORMCP( OPT_MEDIAN_HOME_VALUE , _dm32 )
MPRINT(DMNORMCP):   _dm32=dmnorm(OPT_MEDIAN_HOME_VALUE,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm32 = '02:676.5-HIGH, MISSING' then do;
MPRINT(EM_DIAGRAM):   _12_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = '01:LOW-676.5' then do;
21780     +   if _dm32 = '02:676.5-HIGH, MISSING'  then do;
MPRINT(EM_DIAGRAM):   _12_0 = 1;
21781     +      _12_0 = -1;
MPRINT(EM_DIAGRAM):   end;
21782     +   end;
21783     +   else if _dm32 = '01:LOW-676.5'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _12_0 = .;
21784     +      _12_0 = 1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
21785     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21786     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
21787     +      _12_0 = .;
21788     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for PEP_STAR ;
21789     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _18_0 ;
21790     +   end;
MPRINT(EM_DIAGRAM):   if missing( PEP_STAR ) then do;
21791     +end;
MPRINT(EM_DIAGRAM):   _18_0 = .;
21792     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21793     +*** Generate dummy variables for PEP_STAR ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21794     +drop _18_0 ;
MPRINT(EM_DIAGRAM):   end;
21795     +if missing( PEP_STAR ) then do;
21796     +   _18_0 = .;
MPRINT(EM_DIAGRAM):   else do;
21797     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
21798     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
21799     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( PEP_STAR , BEST12. );
21800     +else do;
21801     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
21802     +   _dm12 = put( PEP_STAR , BEST12. );
21803     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _18_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
21804     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   _18_0 = 1;
21805     +      _18_0 = -1;
MPRINT(EM_DIAGRAM):   end;
21806     +   end;
21807     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _18_0 = .;
21808     +      _18_0 = 1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
21809     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21810     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
21811     +      _18_0 = .;
21812     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
21813     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
21814     +   end;
MPRINT(EM_DIAGRAM):   _P0 = 0.2500469307;
21815     +end;
MPRINT(EM_DIAGRAM):   _P1 = 0.7499530693;
21816     +
MPRINT(EM_DIAGRAM):   goto REGDR1;
21817     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   end;
21818     +if _DM_BAD > 0 then do;
21819     +   _P0 = 0.2500469307;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
21820     +   _P1 = 0.7499530693;
MPRINT(EM_DIAGRAM):   drop _TEMP;
21821     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   drop _LP0;
21822     +end;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
21823     +
21824     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Effect: FREQUENCY_STATUS_97NK ;
21825     +drop _TEMP;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
21826     +drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.3556861257867) * _TEMP * _3_0;
21827     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.13171370881188) * _TEMP * _3_1;
21828     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16318592168351) * _TEMP * _3_2;
21829     +***  Effect: FREQUENCY_STATUS_97NK ;
21830     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   *** Effect: OPT_MEDIAN_HOME_VALUE ;
21831     +_LP0 = _LP0 + (    -0.3556861257867) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
21832     +_LP0 = _LP0 + (   -0.13171370881188) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14135126079011) * _TEMP * _12_0;
21833     +_LP0 = _LP0 + (    0.16318592168351) * _TEMP * _3_2;
21834     +
MPRINT(EM_DIAGRAM):   *** Effect: PEP_STAR ;
21835     +***  Effect: OPT_MEDIAN_HOME_VALUE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
21836     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.17905481873096) * _TEMP * _18_0;
21837     +_LP0 = _LP0 + (   -0.14135126079011) * _TEMP * _12_0;
21838     +
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
21839     +***  Effect: PEP_STAR ;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
21840     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = -1.03523114674562 + _LP0;
21841     +_LP0 = _LP0 + (   -0.17905481873096) * _TEMP * _18_0;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
21842     +
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
21843     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
21844     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   end;
21845     +_TEMP =    -1.03523114674562 + _LP0;
21846     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
21847     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
21848     +   _P0 = _TEMP / (1 + _TEMP);
21849     +end;
21850     +else _P0 = 1 / (1 + exp(-_TEMP));
21851     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
21852     +
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
21853     +REGDR1:
MPRINT(EM_DIAGRAM):   R_TARGET_B1 = .;
MPRINT(EM_DIAGRAM):   R_TARGET_B0 = .;
21854     +
MPRINT(EM_DIAGRAM):   end;
21855     +*** Residuals;
21856     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   else do;
21857     +   R_TARGET_B1 = .;
MPRINT(EM_DIAGRAM):   label R_TARGET_B1 = 'Residual: TARGET_B=1' ;
21858     +   R_TARGET_B0 = .;
21859     +end;
MPRINT(EM_DIAGRAM):   label R_TARGET_B0 = 'Residual: TARGET_B=0' ;
21860     +else do;
MPRINT(EM_DIAGRAM):   R_TARGET_B1 = - _P0;
21861     +    label R_TARGET_B1 = 'Residual: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   R_TARGET_B0 = - _P1;
MPRINT(EM_DIAGRAM):   select( _Y );
21862     +    label R_TARGET_B0 = 'Residual: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   when (0) R_TARGET_B1 = R_TARGET_B1 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_TARGET_B0 = R_TARGET_B0 + 1;
21863     +   R_TARGET_B1 = - _P0;
MPRINT(EM_DIAGRAM):   end;
21864     +   R_TARGET_B0 = - _P1;
MPRINT(EM_DIAGRAM):   end;
21865     +   select( _Y );
21866     +      when (0)  R_TARGET_B1 = R_TARGET_B1 + 1;
21867     +      when (1)  R_TARGET_B0 = R_TARGET_B0 + 1;
MPRINT(EM_DIAGRAM):   *** Update Posterior Probabilities;
21868     +   end;
MPRINT(EM_DIAGRAM):   _P0 = _P0 * 0.05 / 0.25004693073024;
21869     +end;
MPRINT(EM_DIAGRAM):   _P1 = _P1 * 0.95 / 0.74995306926975;
21870     +
MPRINT(EM_DIAGRAM):   drop _sum;
MPRINT(EM_DIAGRAM):   _sum = _P0 + _P1 ;
21871     +
MPRINT(EM_DIAGRAM):   if _sum > 4.135903E-25 then do;
21872     +*** Update Posterior Probabilities;
MPRINT(EM_DIAGRAM):   _P0 = _P0 / _sum;
21873     +_P0 = _P0 * 0.05 / 0.25004693073024;
MPRINT(EM_DIAGRAM):   _P1 = _P1 / _sum;
21874     +_P1 = _P1 * 0.95 / 0.74995306926975;
MPRINT(EM_DIAGRAM):   end;
21875     +drop _sum; _sum = _P0 + _P1 ;
21876     +if _sum > 4.135903E-25 then do;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
21877     +   _P0 = _P0 / _sum;
MPRINT(EM_DIAGRAM):   label D_TARGET_B = 'Decision: TARGET_B' ;
21878     +   _P1 = _P1 / _sum;
21879     +end;
MPRINT(EM_DIAGRAM):   label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
21880     +
21881     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   label BP_TARGET_B = 'Best Profit: TARGET_B' ;
21882     +label D_TARGET_B = 'Decision: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
21883     +label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
21884     +label BP_TARGET_B = 'Best Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   length D_TARGET_B $ 9;
21885     +label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   D_TARGET_B = ' ';
21886     +
MPRINT(EM_DIAGRAM):   EP_TARGET_B = .;
21887     +length D_TARGET_B $ 9;
MPRINT(EM_DIAGRAM):   BP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   CP_TARGET_B = .;
21888     +
21889     +D_TARGET_B = ' ';
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
21890     +EP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
21891     +BP_TARGET_B = .;
21892     +CP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '1' ;
21893     +
MPRINT(EM_DIAGRAM):   EP_TARGET_B = _P0 * 14.5 + _P1 * -0.5;
21894     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   drop _sum;
21895     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _sum = _P0 * 0 + _P1 * 0;
21896     +
MPRINT(EM_DIAGRAM):   if _sum > EP_TARGET_B + 6.593837E-12 then do;
21897     +D_TARGET_B = '1' ;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
21898     +EP_TARGET_B = _P0 * 14.5 + _P1 * -0.5;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '0' ;
21899     +drop _sum;
MPRINT(EM_DIAGRAM):   end;
21900     +_sum = _P0 * 0 + _P1 * 0;
21901     +if _sum > EP_TARGET_B + 6.593837E-12 then do;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
21902     +   EP_TARGET_B = _sum; _decnum = 2;
21903     +   D_TARGET_B = '0' ;
21904     +end;
21905     +
MPRINT(EM_DIAGRAM):   array REGdema [2,2] _temporary_ ( 14.5 0 -0.5 0 );
21906     +*** Decision Matrix;
21907     +array REGdema [2,2] _temporary_ (
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
21908     +/* row 1 */  14.5 0
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_TARGET_B );
21909     +/* row 2 */  -0.5 0
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
21910     +);
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
21911     +
21912     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
21913     +drop _tarnum; select( F_TARGET_B );
MPRINT(EM_DIAGRAM):   end;
21914     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto REGdeex;
21915     +   when('0' ) _tarnum = 2;
21916     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   CP_TARGET_B = REGdema [_tarnum,_decnum];
21917     +end;
21918     +if _tarnum <= 0 then goto REGdeex;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
21919     +
MPRINT(EM_DIAGRAM):   array REGdebe [2] _temporary_ ( 14.5 0);
21920     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   BP_TARGET_B = REGdebe [_tarnum];
21921     +CP_TARGET_B = REGdema [_tarnum,_decnum];
21922     +
21923     +*** Best Possible Consequence of Any Decision without Cost;
21924     +array REGdebe [2] _temporary_ ( 14.5 0);
MPRINT(EM_DIAGRAM):   REGdeex:;
21925     +BP_TARGET_B = REGdebe [_tarnum];
21926     +
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
21927     +
21928     +REGdeex:;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   label P_TARGET_B1 = 'Predicted: TARGET_B=1' ;
21929     +
21930     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   label P_TARGET_B0 = 'Predicted: TARGET_B=0' ;
21931     +
21932     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = _P0;
21933     +label P_TARGET_B1 = 'Predicted: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
21934     +label P_TARGET_B0 = 'Predicted: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
21935     +P_TARGET_B1 = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
21936     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 2;
21937     +_IY = 1;
MPRINT(EM_DIAGRAM):   end;
21938     +P_TARGET_B0 = _P1;
MPRINT(EM_DIAGRAM):   I_TARGET_B = REGDRF[_IY];
21939     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   U_TARGET_B = REGDRU[_IY];
21940     +   _MAXP = _P1;
21941     +   _IY = 2;
MPRINT(EM_DIAGRAM):   *************************************;
21942     +end;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
21943     +I_TARGET_B = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
21944     +U_TARGET_B = REGDRU[_IY];
21945     +
21946     +*************************************;
21947     +***** end scoring code for regression;
21948     +*************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
21949      run;

NOTE: DATA STEP view saved on file EMWS1.REG_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.29 seconds
      cpu time            0.28 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.32 seconds
      cpu time            0.31 seconds
      

MPRINT(EM_DIAGRAM):   quit;
21950      quit;
21951      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
21952      filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21953      *------------------------------------------------------------*;
21954      * Reg: Scoring VALIDATE data;
21955      *------------------------------------------------------------*;
21956      data EMWS1.Reg_VALIDATE
21957      / view=EMWS1.Reg_VALIDATE
21958      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_VALIDATE / view=EMWS1.Reg_VALIDATE ;
21959      set EMWS1.Trans_VALIDATE
21960      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_VALIDATE ;
21961      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
21962     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
21963     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
21964     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
21965     +
21966     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
21967     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
21968     +
21969     +length I_TARGET_B $ 12;
MPRINT(EM_DIAGRAM):   length I_TARGET_B $ 12;
21970     +label I_TARGET_B = 'Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label I_TARGET_B = 'Into: TARGET_B' ;
21971     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
21972     +array REGDRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REGDRF [2] $12 _temporary_ ('1' '0' );
21973     +label U_TARGET_B = 'Unnormalized Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label U_TARGET_B = 'Unnormalized Into: TARGET_B' ;
21974     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
21975     +ARRAY REGDRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REGDRU[2] _TEMPORARY_ (1 0);
21976     +
21977     +*** Generate dummy variables for TARGET_B ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for TARGET_B ;
21978     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
21979     +label F_TARGET_B = 'From: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label F_TARGET_B = 'From: TARGET_B' ;
21980     +length F_TARGET_B $ 12;
MPRINT(EM_DIAGRAM):   length F_TARGET_B $ 12;
21981     +F_TARGET_B = put( TARGET_B , BEST12. );
MPRINT(EM_DIAGRAM):   F_TARGET_B = put( TARGET_B , BEST12. );
21982     +%DMNORMIP( F_TARGET_B )
MPRINT(DMNORMIP):   call dmnorm(F_TARGET_B,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
21983     +if missing( TARGET_B ) then do;
MPRINT(EM_DIAGRAM):   if missing( TARGET_B ) then do;
21984     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
21985     +end;
MPRINT(EM_DIAGRAM):   end;
21986     +else do;
MPRINT(EM_DIAGRAM):   else do;
21987     +   if F_TARGET_B = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_TARGET_B = '0' then do;
21988     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
21989     +   end;
MPRINT(EM_DIAGRAM):   end;
21990     +   else if F_TARGET_B = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_TARGET_B = '1' then do;
21991     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
21992     +   end;
MPRINT(EM_DIAGRAM):   end;
21993     +   else do;
MPRINT(EM_DIAGRAM):   else do;
21994     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
21995     +   end;
MPRINT(EM_DIAGRAM):   end;
21996     +end;
MPRINT(EM_DIAGRAM):   end;
21997     +
21998     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
21999     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
22000     +
22001     +*** Generate dummy variables for FREQUENCY_STATUS_97NK ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for FREQUENCY_STATUS_97NK ;
22002     +drop _3_0 _3_1 _3_2 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 ;
22003     +if missing( FREQUENCY_STATUS_97NK ) then do;
MPRINT(EM_DIAGRAM):   if missing( FREQUENCY_STATUS_97NK ) then do;
22004     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
22005     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
22006     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
22007     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22008     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22009     +end;
MPRINT(EM_DIAGRAM):   end;
22010     +else do;
MPRINT(EM_DIAGRAM):   else do;
22011     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22012     +   _dm12 = put( FREQUENCY_STATUS_97NK , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( FREQUENCY_STATUS_97NK , BEST12. );
22013     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22014     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22015     +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
22016     +      _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
22017     +      _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
22018     +   end;
MPRINT(EM_DIAGRAM):   end;
22019     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
22020     +      _3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
22021     +      _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
22022     +      _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
22023     +   end;
MPRINT(EM_DIAGRAM):   end;
22024     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22025     +      _3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
22026     +      _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
22027     +      _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
22028     +   end;
MPRINT(EM_DIAGRAM):   end;
22029     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
22030     +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
22031     +      _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
22032     +      _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
22033     +   end;
MPRINT(EM_DIAGRAM):   end;
22034     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22035     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
22036     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
22037     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
22038     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22039     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22040     +   end;
MPRINT(EM_DIAGRAM):   end;
22041     +end;
MPRINT(EM_DIAGRAM):   end;
22042     +
22043     +*** Generate dummy variables for OPT_MEDIAN_HOME_VALUE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for OPT_MEDIAN_HOME_VALUE ;
22044     +drop _12_0 ;
MPRINT(EM_DIAGRAM):   drop _12_0 ;
22045     +if missing( OPT_MEDIAN_HOME_VALUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( OPT_MEDIAN_HOME_VALUE ) then do;
22046     +   _12_0 = .;
MPRINT(EM_DIAGRAM):   _12_0 = .;
22047     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22048     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22049     +end;
MPRINT(EM_DIAGRAM):   end;
22050     +else do;
MPRINT(EM_DIAGRAM):   else do;
22051     +   length _dm32 $ 32; drop _dm32 ;
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
22052     +   %DMNORMCP( OPT_MEDIAN_HOME_VALUE , _dm32 )
MPRINT(DMNORMCP):   _dm32=dmnorm(OPT_MEDIAN_HOME_VALUE,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
22053     +   if _dm32 = '02:676.5-HIGH, MISSING'  then do;
MPRINT(EM_DIAGRAM):   if _dm32 = '02:676.5-HIGH, MISSING' then do;
22054     +      _12_0 = -1;
MPRINT(EM_DIAGRAM):   _12_0 = -1;
22055     +   end;
MPRINT(EM_DIAGRAM):   end;
22056     +   else if _dm32 = '01:LOW-676.5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = '01:LOW-676.5' then do;
22057     +      _12_0 = 1;
MPRINT(EM_DIAGRAM):   _12_0 = 1;
22058     +   end;
MPRINT(EM_DIAGRAM):   end;
22059     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22060     +      _12_0 = .;
MPRINT(EM_DIAGRAM):   _12_0 = .;
22061     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22062     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22063     +   end;
MPRINT(EM_DIAGRAM):   end;
22064     +end;
MPRINT(EM_DIAGRAM):   end;
22065     +
22066     +*** Generate dummy variables for PEP_STAR ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for PEP_STAR ;
22067     +drop _18_0 ;
MPRINT(EM_DIAGRAM):   drop _18_0 ;
22068     +if missing( PEP_STAR ) then do;
MPRINT(EM_DIAGRAM):   if missing( PEP_STAR ) then do;
22069     +   _18_0 = .;
MPRINT(EM_DIAGRAM):   _18_0 = .;
22070     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22071     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22072     +end;
MPRINT(EM_DIAGRAM):   end;
22073     +else do;
MPRINT(EM_DIAGRAM):   else do;
22074     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22075     +   _dm12 = put( PEP_STAR , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( PEP_STAR , BEST12. );
22076     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22077     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22078     +      _18_0 = -1;
MPRINT(EM_DIAGRAM):   _18_0 = -1;
22079     +   end;
MPRINT(EM_DIAGRAM):   end;
22080     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
22081     +      _18_0 = 1;
MPRINT(EM_DIAGRAM):   _18_0 = 1;
22082     +   end;
MPRINT(EM_DIAGRAM):   end;
22083     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22084     +      _18_0 = .;
MPRINT(EM_DIAGRAM):   _18_0 = .;
22085     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22086     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22087     +   end;
MPRINT(EM_DIAGRAM):   end;
22088     +end;
MPRINT(EM_DIAGRAM):   end;
22089     +
22090     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
22091     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
22092     +   _P0 = 0.2500469307;
MPRINT(EM_DIAGRAM):   _P0 = 0.2500469307;
22093     +   _P1 = 0.7499530693;
MPRINT(EM_DIAGRAM):   _P1 = 0.7499530693;
22094     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   goto REGDR1;
22095     +end;
MPRINT(EM_DIAGRAM):   end;
22096     +
22097     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
22098     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
22099     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
22100     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
22101     +
22102     +***  Effect: FREQUENCY_STATUS_97NK ;
MPRINT(EM_DIAGRAM):   *** Effect: FREQUENCY_STATUS_97NK ;
22103     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
22104     +_LP0 = _LP0 + (    -0.3556861257867) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.3556861257867) * _TEMP * _3_0;
22105     +_LP0 = _LP0 + (   -0.13171370881188) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.13171370881188) * _TEMP * _3_1;
22106     +_LP0 = _LP0 + (    0.16318592168351) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16318592168351) * _TEMP * _3_2;
22107     +
22108     +***  Effect: OPT_MEDIAN_HOME_VALUE ;
MPRINT(EM_DIAGRAM):   *** Effect: OPT_MEDIAN_HOME_VALUE ;
22109     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
22110     +_LP0 = _LP0 + (   -0.14135126079011) * _TEMP * _12_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14135126079011) * _TEMP * _12_0;
22111     +
22112     +***  Effect: PEP_STAR ;
MPRINT(EM_DIAGRAM):   *** Effect: PEP_STAR ;
22113     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
22114     +_LP0 = _LP0 + (   -0.17905481873096) * _TEMP * _18_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.17905481873096) * _TEMP * _18_0;
22115     +
22116     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
22117     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
22118     +_TEMP =    -1.03523114674562 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -1.03523114674562 + _LP0;
22119     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
22120     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
22121     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
22122     +end;
MPRINT(EM_DIAGRAM):   end;
22123     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
22124     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
22125     +
22126     +REGDR1:
22127     +
22128     +*** Residuals;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
22129     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
22130     +   R_TARGET_B1 = .;
MPRINT(EM_DIAGRAM):   R_TARGET_B1 = .;
22131     +   R_TARGET_B0 = .;
MPRINT(EM_DIAGRAM):   R_TARGET_B0 = .;
22132     +end;
MPRINT(EM_DIAGRAM):   end;
22133     +else do;
MPRINT(EM_DIAGRAM):   else do;
22134     +    label R_TARGET_B1 = 'Residual: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   label R_TARGET_B1 = 'Residual: TARGET_B=1' ;
22135     +    label R_TARGET_B0 = 'Residual: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   label R_TARGET_B0 = 'Residual: TARGET_B=0' ;
22136     +   R_TARGET_B1 = - _P0;
MPRINT(EM_DIAGRAM):   R_TARGET_B1 = - _P0;
22137     +   R_TARGET_B0 = - _P1;
MPRINT(EM_DIAGRAM):   R_TARGET_B0 = - _P1;
22138     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
22139     +      when (0)  R_TARGET_B1 = R_TARGET_B1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_TARGET_B1 = R_TARGET_B1 + 1;
22140     +      when (1)  R_TARGET_B0 = R_TARGET_B0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_TARGET_B0 = R_TARGET_B0 + 1;
22141     +   end;
MPRINT(EM_DIAGRAM):   end;
22142     +end;
MPRINT(EM_DIAGRAM):   end;
22143     +
22144     +
22145     +*** Update Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Update Posterior Probabilities;
22146     +_P0 = _P0 * 0.05 / 0.25004693073024;
MPRINT(EM_DIAGRAM):   _P0 = _P0 * 0.05 / 0.25004693073024;
22147     +_P1 = _P1 * 0.95 / 0.74995306926975;
MPRINT(EM_DIAGRAM):   _P1 = _P1 * 0.95 / 0.74995306926975;
22148     +drop _sum; _sum = _P0 + _P1 ;
MPRINT(EM_DIAGRAM):   drop _sum;
MPRINT(EM_DIAGRAM):   _sum = _P0 + _P1 ;
22149     +if _sum > 4.135903E-25 then do;
MPRINT(EM_DIAGRAM):   if _sum > 4.135903E-25 then do;
22150     +   _P0 = _P0 / _sum;
MPRINT(EM_DIAGRAM):   _P0 = _P0 / _sum;
22151     +   _P1 = _P1 / _sum;
MPRINT(EM_DIAGRAM):   _P1 = _P1 / _sum;
22152     +end;
MPRINT(EM_DIAGRAM):   end;
22153     +
22154     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
22155     +label D_TARGET_B = 'Decision: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label D_TARGET_B = 'Decision: TARGET_B' ;
22156     +label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
22157     +label BP_TARGET_B = 'Best Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label BP_TARGET_B = 'Best Profit: TARGET_B' ;
22158     +label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
22159     +
22160     +length D_TARGET_B $ 9;
MPRINT(EM_DIAGRAM):   length D_TARGET_B $ 9;
22161     +
22162     +D_TARGET_B = ' ';
MPRINT(EM_DIAGRAM):   D_TARGET_B = ' ';
22163     +EP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = .;
22164     +BP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   BP_TARGET_B = .;
22165     +CP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   CP_TARGET_B = .;
22166     +
22167     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
22168     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
22169     +
22170     +D_TARGET_B = '1' ;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '1' ;
22171     +EP_TARGET_B = _P0 * 14.5 + _P1 * -0.5;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = _P0 * 14.5 + _P1 * -0.5;
22172     +drop _sum;
MPRINT(EM_DIAGRAM):   drop _sum;
22173     +_sum = _P0 * 0 + _P1 * 0;
MPRINT(EM_DIAGRAM):   _sum = _P0 * 0 + _P1 * 0;
22174     +if _sum > EP_TARGET_B + 6.593837E-12 then do;
MPRINT(EM_DIAGRAM):   if _sum > EP_TARGET_B + 6.593837E-12 then do;
22175     +   EP_TARGET_B = _sum; _decnum = 2;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
22176     +   D_TARGET_B = '0' ;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '0' ;
22177     +end;
MPRINT(EM_DIAGRAM):   end;
22178     +
22179     +*** Decision Matrix;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
22180     +array REGdema [2,2] _temporary_ (
22181     +/* row 1 */  14.5 0
22182     +/* row 2 */  -0.5 0
22183     +);
MPRINT(EM_DIAGRAM):   array REGdema [2,2] _temporary_ ( 14.5 0 -0.5 0 );
22184     +
22185     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
22186     +drop _tarnum; select( F_TARGET_B );
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_TARGET_B );
22187     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
22188     +   when('0' ) _tarnum = 2;
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
22189     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
22190     +end;
MPRINT(EM_DIAGRAM):   end;
22191     +if _tarnum <= 0 then goto REGdeex;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto REGdeex;
22192     +
22193     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
22194     +CP_TARGET_B = REGdema [_tarnum,_decnum];
MPRINT(EM_DIAGRAM):   CP_TARGET_B = REGdema [_tarnum,_decnum];
22195     +
22196     +*** Best Possible Consequence of Any Decision without Cost;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
22197     +array REGdebe [2] _temporary_ ( 14.5 0);
MPRINT(EM_DIAGRAM):   array REGdebe [2] _temporary_ ( 14.5 0);
22198     +BP_TARGET_B = REGdebe [_tarnum];
MPRINT(EM_DIAGRAM):   BP_TARGET_B = REGdebe [_tarnum];
22199     +
22200     +
22201     +REGdeex:;
MPRINT(EM_DIAGRAM):   REGdeex:;
22202     +
22203     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
22204     +
22205     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
22206     +label P_TARGET_B1 = 'Predicted: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   label P_TARGET_B1 = 'Predicted: TARGET_B=1' ;
22207     +label P_TARGET_B0 = 'Predicted: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   label P_TARGET_B0 = 'Predicted: TARGET_B=0' ;
22208     +P_TARGET_B1 = _P0;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = _P0;
22209     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
22210     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
22211     +P_TARGET_B0 = _P1;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = _P1;
22212     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
22213     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
22214     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
22215     +end;
MPRINT(EM_DIAGRAM):   end;
22216     +I_TARGET_B = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   I_TARGET_B = REGDRF[_IY];
22217     +U_TARGET_B = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   U_TARGET_B = REGDRU[_IY];
22218     +
22219     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
22220     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
22221     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
22222      run;

NOTE: DATA STEP view saved on file EMWS1.REG_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_VALIDATE.VIEW used (Total process time):
      real time           0.28 seconds
      cpu time            0.25 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.29 seconds
      cpu time            0.26 seconds
      

MPRINT(EM_DIAGRAM):   quit;
22223      quit;
22224      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22225      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22226      * Reg: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg: Computing metadata for TRAIN data;
22227      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.25 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Reg_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Reg_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Reg_TRAIN out=WORK.M3D3GVNZ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3D3GVNZ;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3D3GVNZ(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3D3GVNZ;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3D3GVNZ;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1B9SURH NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1B9SURH;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1B9SURH;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1FWRXM7(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1B9SURH;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1B9SURH;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1B9SURH;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1B9SURH;
MPRINT(EMADVISECOLUMNS):   set WORK.M1B9SURH;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_TARGET_B1") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("R_TARGET_B1") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("P_TARGET_B0") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("R_TARGET_B0") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("F_TARGET_B") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("I_TARGET_B") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("U_TARGET_B") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("D_TARGET_B") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("EP_TARGET_B") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("CP_TARGET_B") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("BP_TARGET_B") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("TARGET_B") model = "Reg";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'FREQUENCY_STATUS_97NK' 'OPT_MEDIAN_HOME_VALUE' 'PEP_STAR' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg: Rejected using stepwise selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
22554      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
22555      set EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMINFO;
22556      where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
22557      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.REG_EMINFO.
      WHERE (DATA='Reg') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

22558      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMINFO;
22559      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
22560      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
22561      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
22565      run;
22566      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMINFO;
22567      set EMWS1.Reg_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMINFO WORK.MODELTEMP_INFO;
22568      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

22569      proc sort data = EMWS1.Reg_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Reg_EMINFO NOTHREADS;
22570      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22571      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

22572      proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
22573      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22574      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

22575      proc sort data = EMWS1.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
22576      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22577      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

22578      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMINFO;
22579      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
22580      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22581      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.REG_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

22582      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
22583      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
22584      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
22585      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.26 seconds
      
NOTE: View EMWS1.REG_VALIDATE.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.25 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
