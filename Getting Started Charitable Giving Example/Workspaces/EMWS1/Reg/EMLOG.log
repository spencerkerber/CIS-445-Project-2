*------------------------------------------------------------*
User:                sakerb01
Date:                October 11, 2015
Time:                14:47:38
Site:                70080761
Platform:            X64_7PRO
Maintenance Release: 9.04.01M0P061913
EM Version:          12.3
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 11, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:47:14" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                October 11, 2015
Time:                14:47:14
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3J7EULB "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3J7EULB new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 11, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:47:14" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                sakerb01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080761";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M0P061913";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.3";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 11, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:47:14" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                sakerb01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
21157      proc freq data=EMWS1.Reg_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Reg_VariableSet noprint;
21158      table ROLE*LEVEL/out=WORK.RegMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.RegMETA;
21159      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 51 observations read from the data set EMWS1.REG_VARIABLESET.
NOTE: The data set WORK.REGMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
21160      proc print data=WORK.RegMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RegMETA label noobs;
21161      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
21162      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
21163      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21164      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
21165      run;
 
NOTE: There were 5 observations read from the data set WORK.REGMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21166      title10;
MPRINT(EM_DIAGRAM):   title10;
21167      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Trans_TRAIN EMWS1.Trans_TRAIN
EMWS1.Trans_TRAIN EMWS1.Trans_TRAIN EMWS1 Trans_TRAIN
EMWS1.Trans_TRAIN EMWS1.Trans_TRAIN
EMWS1.Trans_TRAIN EMWS1.Trans_TRAIN EMWS1 Trans_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Trans_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class TARGET_B(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="TARGET_B";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=TARGET_B));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="TARGET_B";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Ids_TARGET_B_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by TARGET_B;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by TARGET_B;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
21196      data WORK.Reg_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Reg_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
21197      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
21198      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
21199         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
21200      set EMWS1.IDS_TARGET_B_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.IDS_TARGET_B_DM( where=(_TYPE_="TARGET"));
21201      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
21202      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
21203      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
21204      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
21205      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
21206      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
21207      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
21208      end;
MPRINT(EM_DIAGRAM):   end;
21209      output;
MPRINT(EM_DIAGRAM):   output;
21210      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_TARGET_B_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.REG_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
21211      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21212      proc print data=WORK.Reg_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Reg_EVENT noobs label;
21213      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
21214      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21215      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
21216      run;
 
NOTE: There were 1 observations read from the data set WORK.REG_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21217      title10;
MPRINT(EM_DIAGRAM):   title10;
21218      proc print data = EMWS1.Ids_TARGET_B_DD noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_TARGET_B_DD noobs label;
21219      var TARGET_B
21220      TRAINPRIOR
21221      DECISION1
21222      DECISION2
21223      DECPRIOR
21224      ;
MPRINT(EM_DIAGRAM):   var TARGET_B TRAINPRIOR DECISION1 DECISION2 DECPRIOR ;
21225      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21226      title10 "Decision Matrix and Prior Vector";
MPRINT(EM_DIAGRAM):   title10 "Decision Matrix and Prior Vector";
MPRINT(EM_DIAGRAM):   run;
21227      run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_TARGET_B_DD.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21228      title10;
MPRINT(EM_DIAGRAM):   title10;
21229      proc print data = EMWS1.Ids_TARGET_B_DM noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS1.Ids_TARGET_B_DM noobs label;
21230      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
21231      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
21232      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
21233      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21234      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
21235      run;
 
NOTE: There were 11 observations read from the data set EMWS1.IDS_TARGET_B_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21236      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Preparing metadata for Training *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M0EZ69V1;
MPRINT(EM_DIAGRAM):   set WORK.M0EZ69V1;
MPRINT(EM_DIAGRAM):   where use = 'Y' or (role = 'INPUT' and use = 'D') ;
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if use = 'D' then use = 'Y';
MPRINT(EM_DIAGRAM):   run;
21246      data WORK.M0EZ69V1;
MPRINT(EM_DIAGRAM):    data WORK.M0EZ69V1;
21247      set WORK.M0EZ69V1 end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M0EZ69V1 end=eof;
21248      output;
MPRINT(EM_DIAGRAM):   output;
21249      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
21250      NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
21251      ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
21252      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
21253      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
21254      output;
MPRINT(EM_DIAGRAM):   output;
21255      end;
MPRINT(EM_DIAGRAM):   end;
21256      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 48 observations read from the data set WORK.M0EZ69V1.
NOTE: The data set WORK.M0EZ69V1 has 49 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_TARGET_B_DD.
NOTE: The data set WORK.TARGET_B has 2 observations and 7 variables.
21257      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21258      * Reg: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Reg: Create decision matrix;
21259      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21260      data WORK.TARGET_B;
MPRINT(EM_DIAGRAM):   data WORK.TARGET_B;
21261        length   TARGET_B                         $  32
21262                 COUNT                                8
21263                 DATAPRIOR                            8
21264                 TRAINPRIOR                           8
21265                 DECPRIOR                             8
21266                 DECISION1                            8
21267                 DECISION2                            8
21268                 ;
MPRINT(EM_DIAGRAM):   length TARGET_B $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
21269
21270        label    COUNT="Level Counts"
21271                 DATAPRIOR="Data Proportions"
21272                 TRAINPRIOR="Training Proportions"
21273                 DECPRIOR="Decision Priors"
21274                 DECISION1="1"
21275                 DECISION2="0"
21276                 ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
21277        format   COUNT 10.
21278                 ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
21279      TARGET_B="1"; COUNT=4843; DATAPRIOR=0.25; TRAINPRIOR=0.25; DECPRIOR=0.05; DECISION1=14.5; DECISION2=0;
MPRINT(EM_DIAGRAM):   TARGET_B="1";
MPRINT(EM_DIAGRAM):   COUNT=4843;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.25;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.25;
MPRINT(EM_DIAGRAM):   DECPRIOR=0.05;
MPRINT(EM_DIAGRAM):   DECISION1=14.5;
MPRINT(EM_DIAGRAM):   DECISION2=0;
21280      output;
MPRINT(EM_DIAGRAM):   output;
21281      TARGET_B="0"; COUNT=14529; DATAPRIOR=0.75; TRAINPRIOR=0.75; DECPRIOR=0.95; DECISION1=-0.5; DECISION2=0;
MPRINT(EM_DIAGRAM):   TARGET_B="0";
MPRINT(EM_DIAGRAM):   COUNT=14529;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.75;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.75;
MPRINT(EM_DIAGRAM):   DECPRIOR=0.95;
MPRINT(EM_DIAGRAM):   DECISION1=-0.5;
MPRINT(EM_DIAGRAM):   DECISION2=0;
21282      output;
MPRINT(EM_DIAGRAM):   output;
21283      ;
MPRINT(EM_DIAGRAM):   ;
21284      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.TARGET_B has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21285      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
21286      modify TARGET_B(type=PROFIT label=TARGET_B);
MPRINT(EM_DIAGRAM):   modify TARGET_B(type=PROFIT label= TARGET_B);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
21287      label DECISION1= '1';
21288      label DECISION2= '0';
21289      run;
 
NOTE: MODIFY was successful for WORK.TARGET_B.DATA.
21290      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21291      data EM_DMREG / view=EM_DMREG;
MPRINT(EM_DIAGRAM):   data EM_DMREG / view=EM_DMREG;
21292      set EMWS1.Trans_TRAIN(keep=
21293      CARD_PROM_12 CLUSTER_CODE FILE_CARD_GIFT FREQUENCY_STATUS_97NK HOME_OWNER
21294      IMP_DONOR_AGE IMP_INCOME_GROUP IMP_MONTHS_SINCE_LAST_PROM_RESP IMP_REP_SES
21295      IMP_REP_URBANICITY IMP_WEALTH_RATING IN_HOUSE LG10_FILE_AVG_GIFT
21296      LG10_LAST_GIFT_AMT LG10_LIFETIME_AVG_GIFT_AMT LG10_LIFETIME_GIFT_AMOUNT
21297      LIFETIME_GIFT_RANGE LIFETIME_MAX_GIFT_AMT LIFETIME_MIN_GIFT_AMT LIFETIME_PROM
21298      MONTHS_SINCE_FIRST_GIFT MONTHS_SINCE_LAST_GIFT MONTHS_SINCE_ORIGIN MOR_HIT_RATE
21299      NUMBER_PROM_12 OPT_LIFETIME_CARD_PROM OPT_LIFETIME_GIFT_COUNT
21300      OPT_MEDIAN_HOME_VALUE OPT_MEDIAN_HOUSEHOLD_INCOME OPT_PER_CAPITA_INCOME
21301      OPT_RECENT_RESPONSE_PROP OPT_RECENT_STAR_STATUS OVERLAY_SOURCE PCT_ATTRIBUTE1
21302      PCT_ATTRIBUTE2 PCT_ATTRIBUTE3 PCT_ATTRIBUTE4 PCT_OWNER_OCCUPIED PEP_STAR
21303      PUBLISHED_PHONE RECENCY_STATUS_96NK RECENT_AVG_CARD_GIFT_AMT
21304      RECENT_AVG_GIFT_AMT RECENT_CARD_RESPONSE_COUNT RECENT_CARD_RESPONSE_PROP
21305      RECENT_RESPONSE_COUNT REP_DONOR_GENDER TARGET_B );
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_TRAIN(keep= CARD_PROM_12 CLUSTER_CODE FILE_CARD_GIFT FREQUENCY_STATUS_97NK HOME_OWNER IMP_DONOR_AGE IMP_INCOME_GROUP IMP_MONTHS_SINCE_LAST_PROM_RESP IMP_REP_SES IMP_REP_URBANICITY IMP_WEALTH_RATING IN_HOUSE
LG10_FILE_AVG_GIFT LG10_LAST_GIFT_AMT LG10_LIFETIME_AVG_GIFT_AMT LG10_LIFETIME_GIFT_AMOUNT LIFETIME_GIFT_RANGE LIFETIME_MAX_GIFT_AMT LIFETIME_MIN_GIFT_AMT LIFETIME_PROM MONTHS_SINCE_FIRST_GIFT MONTHS_SINCE_LAST_GIFT MONTHS_SINCE_ORIGIN MOR_HIT_RATE
NUMBER_PROM_12 OPT_LIFETIME_CARD_PROM OPT_LIFETIME_GIFT_COUNT OPT_MEDIAN_HOME_VALUE OPT_MEDIAN_HOUSEHOLD_INCOME OPT_PER_CAPITA_INCOME OPT_RECENT_RESPONSE_PROP OPT_RECENT_STAR_STATUS OVERLAY_SOURCE PCT_ATTRIBUTE1 PCT_ATTRIBUTE2 PCT_ATTRIBUTE3
PCT_ATTRIBUTE4 PCT_OWNER_OCCUPIED PEP_STAR PUBLISHED_PHONE RECENCY_STATUS_96NK RECENT_AVG_CARD_GIFT_AMT RECENT_AVG_GIFT_AMT RECENT_CARD_RESPONSE_COUNT RECENT_CARD_RESPONSE_PROP RECENT_RESPONSE_COUNT REP_DONOR_GENDER TARGET_B );
21306      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_DMREG.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.18 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.25 seconds
      cpu time            0.23 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Reg: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21307      *------------------------------------------------------------* ;
21308      * Reg: DMDBClass Macro ;
21309      *------------------------------------------------------------* ;
21310      %macro DMDBClass;
21311          CARD_PROM_12(ASC) CLUSTER_CODE(ASC) FREQUENCY_STATUS_97NK(ASC) HOME_OWNER(ASC)
21312         IMP_INCOME_GROUP(ASC) IMP_REP_SES(ASC) IMP_REP_URBANICITY(ASC)
21313         IMP_WEALTH_RATING(ASC) IN_HOUSE(ASC) OPT_LIFETIME_CARD_PROM(ASC)
21314         OPT_LIFETIME_GIFT_COUNT(ASC) OPT_MEDIAN_HOME_VALUE(ASC)
21315         OPT_MEDIAN_HOUSEHOLD_INCOME(ASC) OPT_PER_CAPITA_INCOME(ASC)
21316         OPT_RECENT_RESPONSE_PROP(ASC) OPT_RECENT_STAR_STATUS(ASC) OVERLAY_SOURCE(ASC)
21317         PEP_STAR(ASC) PUBLISHED_PHONE(ASC) RECENCY_STATUS_96NK(ASC)
21318         RECENT_CARD_RESPONSE_COUNT(ASC) RECENT_RESPONSE_COUNT(ASC)
21319         REP_DONOR_GENDER(ASC) TARGET_B(DESC)
21320      %mend DMDBClass;
21321      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21322      * Reg: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Reg: DMDBVar Macro ;
21323      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
21324      %macro DMDBVar;
21325          FILE_CARD_GIFT IMP_DONOR_AGE IMP_MONTHS_SINCE_LAST_PROM_RESP
21326         LG10_FILE_AVG_GIFT LG10_LAST_GIFT_AMT LG10_LIFETIME_AVG_GIFT_AMT
21327         LG10_LIFETIME_GIFT_AMOUNT LIFETIME_GIFT_RANGE LIFETIME_MAX_GIFT_AMT
21328         LIFETIME_MIN_GIFT_AMT LIFETIME_PROM MONTHS_SINCE_FIRST_GIFT
21329         MONTHS_SINCE_LAST_GIFT MONTHS_SINCE_ORIGIN MOR_HIT_RATE NUMBER_PROM_12
21330         PCT_ATTRIBUTE1 PCT_ATTRIBUTE2 PCT_ATTRIBUTE3 PCT_ATTRIBUTE4 PCT_OWNER_OCCUPIED
21331         RECENT_AVG_CARD_GIFT_AMT RECENT_AVG_GIFT_AMT RECENT_CARD_RESPONSE_PROP
21332      %mend DMDBVar;
21333      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21334      * Reg: Create DMDB;
MPRINT(EM_DIAGRAM):   * Reg: Create DMDB;
21335      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21336      proc dmdb batch data=WORK.EM_DMREG
21337      dmdbcat=WORK.Reg_DMDB
21338      maxlevel = 513
21339      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_DMREG dmdbcat=WORK.Reg_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
21340      class %DMDBClass;
MPRINT(DMDBCLASS):   CARD_PROM_12(ASC) CLUSTER_CODE(ASC) FREQUENCY_STATUS_97NK(ASC) HOME_OWNER(ASC) IMP_INCOME_GROUP(ASC) IMP_REP_SES(ASC) IMP_REP_URBANICITY(ASC) IMP_WEALTH_RATING(ASC) IN_HOUSE(ASC) OPT_LIFETIME_CARD_PROM(ASC)
OPT_LIFETIME_GIFT_COUNT(ASC) OPT_MEDIAN_HOME_VALUE(ASC) OPT_MEDIAN_HOUSEHOLD_INCOME(ASC) OPT_PER_CAPITA_INCOME(ASC) OPT_RECENT_RESPONSE_PROP(ASC) OPT_RECENT_STAR_STATUS(ASC) OVERLAY_SOURCE(ASC) PEP_STAR(ASC) PUBLISHED_PHONE(ASC) RECENCY_STATUS_96NK(ASC)
RECENT_CARD_RESPONSE_COUNT(ASC) RECENT_RESPONSE_COUNT(ASC) REP_DONOR_GENDER(ASC) TARGET_B(DESC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
21341      var %DMDBVar;
MPRINT(DMDBVAR):   FILE_CARD_GIFT IMP_DONOR_AGE IMP_MONTHS_SINCE_LAST_PROM_RESP LG10_FILE_AVG_GIFT LG10_LAST_GIFT_AMT LG10_LIFETIME_AVG_GIFT_AMT LG10_LIFETIME_GIFT_AMOUNT LIFETIME_GIFT_RANGE LIFETIME_MAX_GIFT_AMT LIFETIME_MIN_GIFT_AMT LIFETIME_PROM
MONTHS_SINCE_FIRST_GIFT MONTHS_SINCE_LAST_GIFT MONTHS_SINCE_ORIGIN MOR_HIT_RATE NUMBER_PROM_12 PCT_ATTRIBUTE1 PCT_ATTRIBUTE2 PCT_ATTRIBUTE3 PCT_ATTRIBUTE4 PCT_OWNER_OCCUPIED RECENT_AVG_CARD_GIFT_AMT RECENT_AVG_GIFT_AMT RECENT_CARD_RESPONSE_PROP
MPRINT(EM_DIAGRAM):  ;
21342      target
21343      TARGET_B
21344      ;
MPRINT(EM_DIAGRAM):   target TARGET_B ;
21345      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 10654   Memory used = 511K.
NOTE: There were 10654 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 10654 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10654 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.42 seconds
      cpu time            0.42 seconds
 
NOTE: There were 10654 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10654 observations read from the data set WORK.EM_DMREG.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.43 seconds
      cpu time            0.43 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
21346      quit;
21347      *--- end code ---*;
 
21348      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21349      * Reg: Run DMREG procedure;
MPRINT(EM_DIAGRAM):   * Reg: Run DMREG procedure;
21350      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21351      proc dmreg data=EM_DMREG dmdbcat=WORK.Reg_DMDB
21352      validata = EMWS1.Trans_VALIDATE
21353      outest = EMWS1.Reg_EMESTIMATE
21354      outterms = EMWS1.Reg_OUTTERMS
21355      outmap= EMWS1.Reg_MAPDS namelen=200
21356      ;
MPRINT(EM_DIAGRAM):   proc dmreg data=EM_DMREG dmdbcat=WORK.Reg_DMDB validata = EMWS1.Trans_VALIDATE outest = EMWS1.Reg_EMESTIMATE outterms = EMWS1.Reg_OUTTERMS outmap= EMWS1.Reg_MAPDS namelen=200 ;
21357      class
21358      TARGET_B
21359      CARD_PROM_12
21360      CLUSTER_CODE
21361      FREQUENCY_STATUS_97NK
21362      HOME_OWNER
21363      IMP_INCOME_GROUP
21364      IMP_REP_SES
21365      IMP_REP_URBANICITY
21366      IMP_WEALTH_RATING
21367      IN_HOUSE
21368      OPT_LIFETIME_CARD_PROM
21369      OPT_LIFETIME_GIFT_COUNT
21370      OPT_MEDIAN_HOME_VALUE
21371      OPT_MEDIAN_HOUSEHOLD_INCOME
21372      OPT_PER_CAPITA_INCOME
21373      OPT_RECENT_RESPONSE_PROP
21374      OPT_RECENT_STAR_STATUS
21375      OVERLAY_SOURCE
21376      PEP_STAR
21377      PUBLISHED_PHONE
21378      RECENCY_STATUS_96NK
21379      RECENT_CARD_RESPONSE_COUNT
21380      RECENT_RESPONSE_COUNT
21381      REP_DONOR_GENDER
21382      ;
MPRINT(EM_DIAGRAM):   class TARGET_B CARD_PROM_12 CLUSTER_CODE FREQUENCY_STATUS_97NK HOME_OWNER IMP_INCOME_GROUP IMP_REP_SES IMP_REP_URBANICITY IMP_WEALTH_RATING IN_HOUSE OPT_LIFETIME_CARD_PROM OPT_LIFETIME_GIFT_COUNT OPT_MEDIAN_HOME_VALUE
OPT_MEDIAN_HOUSEHOLD_INCOME OPT_PER_CAPITA_INCOME OPT_RECENT_RESPONSE_PROP OPT_RECENT_STAR_STATUS OVERLAY_SOURCE PEP_STAR PUBLISHED_PHONE RECENCY_STATUS_96NK RECENT_CARD_RESPONSE_COUNT RECENT_RESPONSE_COUNT REP_DONOR_GENDER ;
21383      model TARGET_B =
21384      CARD_PROM_12
21385      CLUSTER_CODE
21386      FILE_CARD_GIFT
21387      FREQUENCY_STATUS_97NK
21388      HOME_OWNER
21389      IMP_DONOR_AGE
21390      IMP_INCOME_GROUP
21391      IMP_MONTHS_SINCE_LAST_PROM_RESP
21392      IMP_REP_SES
21393      IMP_REP_URBANICITY
21394      IMP_WEALTH_RATING
21395      IN_HOUSE
21396      LG10_FILE_AVG_GIFT
21397      LG10_LAST_GIFT_AMT
21398      LG10_LIFETIME_AVG_GIFT_AMT
21399      LG10_LIFETIME_GIFT_AMOUNT
21400      LIFETIME_GIFT_RANGE
21401      LIFETIME_MAX_GIFT_AMT
21402      LIFETIME_MIN_GIFT_AMT
21403      LIFETIME_PROM
21404      MONTHS_SINCE_FIRST_GIFT
21405      MONTHS_SINCE_LAST_GIFT
21406      MONTHS_SINCE_ORIGIN
21407      MOR_HIT_RATE
21408      NUMBER_PROM_12
21409      OPT_LIFETIME_CARD_PROM
21410      OPT_LIFETIME_GIFT_COUNT
21411      OPT_MEDIAN_HOME_VALUE
21412      OPT_MEDIAN_HOUSEHOLD_INCOME
21413      OPT_PER_CAPITA_INCOME
21414      OPT_RECENT_RESPONSE_PROP
21415      OPT_RECENT_STAR_STATUS
21416      OVERLAY_SOURCE
21417      PCT_ATTRIBUTE1
21418      PCT_ATTRIBUTE2
21419      PCT_ATTRIBUTE3
21420      PCT_ATTRIBUTE4
21421      PCT_OWNER_OCCUPIED
21422      PEP_STAR
21423      PUBLISHED_PHONE
21424      RECENCY_STATUS_96NK
21425      RECENT_AVG_CARD_GIFT_AMT
21426      RECENT_AVG_GIFT_AMT
21427      RECENT_CARD_RESPONSE_COUNT
21428      RECENT_CARD_RESPONSE_PROP
21429      RECENT_RESPONSE_COUNT
21430      REP_DONOR_GENDER
21431      /error=binomial link=LOGIT
21432      coding=DEVIATION
21433      nodesignprint
21434      selection=STEPWISE choose=VDECDATA
21435      Hierarchy=CLASS
21436      Rule=NONE
21437      ;
MPRINT(EM_DIAGRAM):   model TARGET_B = CARD_PROM_12 CLUSTER_CODE FILE_CARD_GIFT FREQUENCY_STATUS_97NK HOME_OWNER IMP_DONOR_AGE IMP_INCOME_GROUP IMP_MONTHS_SINCE_LAST_PROM_RESP IMP_REP_SES IMP_REP_URBANICITY IMP_WEALTH_RATING IN_HOUSE LG10_FILE_AVG_GIFT
LG10_LAST_GIFT_AMT LG10_LIFETIME_AVG_GIFT_AMT LG10_LIFETIME_GIFT_AMOUNT LIFETIME_GIFT_RANGE LIFETIME_MAX_GIFT_AMT LIFETIME_MIN_GIFT_AMT LIFETIME_PROM MONTHS_SINCE_FIRST_GIFT MONTHS_SINCE_LAST_GIFT MONTHS_SINCE_ORIGIN MOR_HIT_RATE NUMBER_PROM_12
OPT_LIFETIME_CARD_PROM OPT_LIFETIME_GIFT_COUNT OPT_MEDIAN_HOME_VALUE OPT_MEDIAN_HOUSEHOLD_INCOME OPT_PER_CAPITA_INCOME OPT_RECENT_RESPONSE_PROP OPT_RECENT_STAR_STATUS OVERLAY_SOURCE PCT_ATTRIBUTE1 PCT_ATTRIBUTE2 PCT_ATTRIBUTE3 PCT_ATTRIBUTE4
PCT_OWNER_OCCUPIED PEP_STAR PUBLISHED_PHONE RECENCY_STATUS_96NK RECENT_AVG_CARD_GIFT_AMT RECENT_AVG_GIFT_AMT RECENT_CARD_RESPONSE_COUNT RECENT_CARD_RESPONSE_PROP RECENT_RESPONSE_COUNT REP_DONOR_GENDER /error=binomial link=LOGIT coding=DEVIATION
nodesignprint selection=STEPWISE choose=VDECDATA Hierarchy=CLASS Rule=NONE ;
21438      ;
MPRINT(EM_DIAGRAM):   ;
21439      decision decdata=WORK.TARGET_B
21440      decvars=
21441      DECISION1
21442      DECISION2
21443      priorVar=DECPRIOR
21444      ;
MPRINT(EM_DIAGRAM):   decision decdata=WORK.TARGET_B decvars= DECISION1 DECISION2 priorVar=DECPRIOR ;
21445      code file="C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMPUBLISHSCORE.sas"
21446      group=Reg
21447      ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMPUBLISHSCORE.sas" group=Reg ;
21448      code file="C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas"
21449      group=Reg
21450      residual
21451      ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas" group=Reg residual ;
21452      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
 
NOTE: PROC DMREG is modeling the probability that TARGET_B=1.
NOTE: Convergence criterion (ABSGCONV=0.00001) satisfied.
NOTE: Variable _WARN_ is uninitialized.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: External file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMPUBLISHSCORE.sas opened.
NOTE: External file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas opened.
NOTE: There were 8718 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 8718 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: View EMWS1.TRANS_VALIDATE.VIEW used (Total process time):
      real time           8.98 seconds
      cpu time            8.29 seconds
 
NOTE: There were 8718 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 10654 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 10654 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10654 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           9.26 seconds
      cpu time            8.59 seconds
 
NOTE: There were 10654 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10654 observations read from the data set WORK.EM_DMREG.
NOTE: There were 8718 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: The data set EMWS1.REG_EMESTIMATE has 42 observations and 206 variables.
NOTE: The data set EMWS1.REG_OUTTERMS has 6 observations and 6 variables.
NOTE: The data set EMWS1.REG_MAPDS has 2 observations and 167 variables.
NOTE: The PROCEDURE DMREG printed pages 5-18.
NOTE: PROCEDURE DMREG used (Total process time):
      real time           9.34 seconds
      cpu time            8.64 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
21453      quit;
 
21454      proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
21455      delete Reg_DMDB;
MPRINT(EM_DIAGRAM):   delete Reg_DMDB;
21456      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file WORK.REG_DMDB (memtype=DATA) was not found, but appears on a DELETE statement.
21457      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21458      proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
21459      delete Reg_DMDB / memtype=catalog;
MPRINT(EM_DIAGRAM):   delete Reg_DMDB / memtype=catalog;
21460      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.REG_DMDB (memtype=CATALOG).
21461      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21462      data WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):    data WORK.ESTIMATE;
21463      length _NAME_ $32;
MPRINT(EM_DIAGRAM):   length _NAME_ $32;
21464      set EMWS1.Reg_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMESTIMATE;
21465      drop _AIC_--_VAPROF_;
MPRINT(EM_DIAGRAM):   drop _AIC_--_VAPROF_;
21466      where _CHOSEN_ ne '' and _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_ in('PARMS', 'T', 'P');
21467      drop _STEP_ _CHOSEN_;
MPRINT(EM_DIAGRAM):   drop _STEP_ _CHOSEN_;
21468      select(_TYPE_);
MPRINT(EM_DIAGRAM):   select(_TYPE_);
21469      when('PARMS') _NAME_='Coefficient';
MPRINT(EM_DIAGRAM):   when('PARMS') _NAME_='Coefficient';
21470      when('T') _NAME_='tValue';
MPRINT(EM_DIAGRAM):   when('T') _NAME_='tValue';
21471      when('P') _NAME_='PValue';
MPRINT(EM_DIAGRAM):   when('P') _NAME_='PValue';
21472      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
21473      end;
MPRINT(EM_DIAGRAM):   end;
21474      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set WORK.ESTIMATE has 3 observations and 168 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21475      proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
21476      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 166 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21477      proc transpose data=EMWS1.Reg_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable
21478      ));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Reg_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable ));
21479      var 'CARD_PROM_120'n--'REP_DONOR_GENDERU'n;
MPRINT(EM_DIAGRAM):   var 'CARD_PROM_120'n--'REP_DONOR_GENDERU'n;
21480      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.REG_MAPDS.
NOTE: The data set WORK.MAP has 165 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21481      proc sort data=WORK.MAP;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MAP;
21482      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
21483      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 165 observations read from the data set WORK.MAP.
NOTE: The data set WORK.MAP has 165 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21484      proc sort data=WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.ESTIMATE;
21485      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
21486      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 166 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 166 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21487      data EMWS1.Reg_EFFECTS(rename=(_LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EFFECTS(rename=(_LABEL_=EffectLabel));
21488      length Variable ClassLevel $32;
MPRINT(EM_DIAGRAM):   length Variable ClassLevel $32;
21489      merge WORK.ESTIMATE WORK.MAP;
MPRINT(EM_DIAGRAM):   merge WORK.ESTIMATE WORK.MAP;
21490      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
21491      label Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))" Variable = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Sign = "%sysfunc(sasmsg(sashelp.dmine, rpt_sign_vlabel, NOQUOTE))" ClassLevel =
21492         "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))" Abscoefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel, NOQUOTE))" Coefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))" _LABEL_ =
21493         "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel, NOQUOTE))" CODE = "%sysfunc(sasmsg(sashelp.dmine, rpt_scorecodevar_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Effect = "Effect" Variable = "Variable" Sign = "Sign" ClassLevel = "Level" Abscoefficient = "Absolute Coefficient" Coefficient = "Coefficient" _LABEL_ = "Effect Label" CODE = "Score Code Variable";
21494      label tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))" abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))" PValue = "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))"
21494    ! ;
MPRINT(EM_DIAGRAM):   label tvalue = "T-value" abstvalue = "Absolute T-value" PValue = "P Value";
21495      abstvalue = abs(tValue);
MPRINT(EM_DIAGRAM):   abstvalue = abs(tValue);
21496      if index(Effect, 'Intercept') then do;
MPRINT(EM_DIAGRAM):   if index(Effect, 'Intercept') then do;
21497      variable = 'Intercept';
MPRINT(EM_DIAGRAM):   variable = 'Intercept';
21498      classLevel = scan(_LABEL_, 2, '=');
MPRINT(EM_DIAGRAM):   classLevel = scan(_LABEL_, 2, '=');
21499      end;
MPRINT(EM_DIAGRAM):   end;
21500      if ^indexc(variable, '*') then do;
MPRINT(EM_DIAGRAM):   if ^indexc(variable, '*') then do;
21501      if length(effect)>length(variable) then classlevel = substr(Effect, length(variable)+1);
MPRINT(EM_DIAGRAM):   if length(effect)>length(variable) then classlevel = substr(Effect, length(variable)+1);
21502      end;
MPRINT(EM_DIAGRAM):   end;
21503      if Effect eq '' then Effect = Variable;
MPRINT(EM_DIAGRAM):   if Effect eq '' then Effect = Variable;
21504      if coefficient < 0 then sign = '-';
MPRINT(EM_DIAGRAM):   if coefficient < 0 then sign = '-';
21505      else sign = '+';
MPRINT(EM_DIAGRAM):   else sign = '+';
21506      abscoefficient = abs(coefficient);
MPRINT(EM_DIAGRAM):   abscoefficient = abs(coefficient);
21507      if _LABEL_ = '' then _LABEL_ = Effect;
MPRINT(EM_DIAGRAM):   if _LABEL_ = '' then _LABEL_ = Effect;
21508      if coefficient ne . then output;
MPRINT(EM_DIAGRAM):   if coefficient ne . then output;
21509      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      160 at 21495:13   160 at 21506:18
NOTE: There were 166 observations read from the data set WORK.ESTIMATE.
NOTE: There were 165 observations read from the data set WORK.MAP.
NOTE: The data set EMWS1.REG_EFFECTS has 6 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
 
 
21510      proc sort data =EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS1.Reg_EFFECTS;
21511      by
21512      descending abstvalue;
MPRINT(EM_DIAGRAM):   by descending abstvalue;
21513      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.REG_EFFECTS.
NOTE: The data set EMWS1.REG_EFFECTS has 6 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
21514      data EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EFFECTS;
21515      set EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EFFECTS;
21516      format TEffectNum 3.;
MPRINT(EM_DIAGRAM):   format TEffectNum 3.;
21517      label TEffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_teffectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TEffectNum = "TScore Number";
21518      retain TEffectNum;
MPRINT(EM_DIAGRAM):   retain TEffectNum;
21519      TEffectNum = _N_;
MPRINT(EM_DIAGRAM):   TEffectNum = _N_;
21520      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.REG_EFFECTS.
NOTE: The data set EMWS1.REG_EFFECTS has 6 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21521      proc sort data =EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS1.Reg_EFFECTS;
21522      by
21523      descending absCoefficient;
MPRINT(EM_DIAGRAM):   by descending absCoefficient;
21524      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.REG_EFFECTS.
NOTE: The data set EMWS1.REG_EFFECTS has 6 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
21525      data EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EFFECTS;
21526      set EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EFFECTS;
21527      format EffectNum 3.;
MPRINT(EM_DIAGRAM):   format EffectNum 3.;
21528      label EffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectNum = "Effect Number";
21529      retain EffectNum;
MPRINT(EM_DIAGRAM):   retain EffectNum;
21530      EffectNum = _N_;
MPRINT(EM_DIAGRAM):   EffectNum = _N_;
21531      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.REG_EFFECTS.
NOTE: The data set EMWS1.REG_EFFECTS has 6 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
21532      proc transpose data=EMWS1.Reg_EMESTIMATE out=EMWS1.Reg_ESTIMATEGRID(rename=(PARMS=Coefficient T=TValue _NAME_=Effect _LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Reg_EMESTIMATE out=EMWS1.Reg_ESTIMATEGRID(rename=(PARMS=Coefficient T=TValue _NAME_=Effect _LABEL_=EffectLabel));
21533      where _CHOSEN_ eq '' and _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _CHOSEN_ eq '' and _TYPE_ in('PARMS', 'T', 'P');
21534      var 'CARD_PROM_120'n--'REP_DONOR_GENDERU'n;
MPRINT(EM_DIAGRAM):   var 'CARD_PROM_120'n--'REP_DONOR_GENDERU'n;
21535      by _STEP_;
MPRINT(EM_DIAGRAM):   by _STEP_;
21536      id _TYPE_;
MPRINT(EM_DIAGRAM):   id _TYPE_;
21537      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 39 observations read from the data set EMWS1.REG_EMESTIMATE.
      WHERE (_CHOSEN_=' ') and _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set EMWS1.REG_ESTIMATEGRID has 2145 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
21538      data EMWS1.Reg_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_ESTIMATEGRID;
21539      set EMWS1.Reg_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_ESTIMATEGRID;
21540      if EffectLabel eq '' then EffectLabel = Effect;
MPRINT(EM_DIAGRAM):   if EffectLabel eq '' then EffectLabel = Effect;
21541      label EffectLabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel, NOQUOTE))" Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))" Abscoefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel, NOQUOTE))"
21542         Coefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))" tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))" abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))"
21542    ! PValue =
21543         "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectLabel = "Effect Label" Effect = "Effect" Abscoefficient = "Absolute Coefficient" Coefficient = "Coefficient" tvalue = "T-value" abstvalue = "Absolute T-value" PValue = "P Value";
21544      AbsCoefficient = abs(Coefficient);
MPRINT(EM_DIAGRAM):   AbsCoefficient = abs(Coefficient);
21545      AbsTValue = abs(TValue);
MPRINT(EM_DIAGRAM):   AbsTValue = abs(TValue);
21546      where coefficient ne .;
MPRINT(EM_DIAGRAM):   where coefficient ne .;
21547      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable PValue is uninitialized.
NOTE: There were 290 observations read from the data set EMWS1.REG_ESTIMATEGRID.
      WHERE coefficient not = .;
NOTE: The data set EMWS1.REG_ESTIMATEGRID has 290 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 11, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:47:28" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                October 11, 2015
Time:                14:47:28
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0VDA21S "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0VDA21S new;
MPRINT(EM_DIAGRAM):   run;
21649      proc transpose data=EMWS1.Reg_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Reg_EMESTIMATE out=WORK.TEMPREG;
21650      where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
21651      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 203 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21652      proc transpose data=EMWS1.Reg_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Reg_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
21653      var "CARD_PROM_120"n--"REP_DONOR_GENDERU"n;
MPRINT(EM_DIAGRAM):   var "CARD_PROM_120"n--"REP_DONOR_GENDERU"n;
21654      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 2 observations read from the data set EMWS1.REG_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 165 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21655      proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
21656      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
21657      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 203 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 203 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21658      proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
21659      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
21660      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 165 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 165 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21661      data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
21662      merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
21663      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
21664      if (ina and inb) and TARGET_B ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and TARGET_B ne . then output;
21665      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 203 observations read from the data set WORK.TEMPREG.
NOTE: There were 165 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 5 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21666      data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
21667      length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
21668      set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
21669      i=1;
MPRINT(EM_DIAGRAM):   i=1;
21670      do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
21671      term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
21672      i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
21673      output;
MPRINT(EM_DIAGRAM):   output;
21674      end;
MPRINT(EM_DIAGRAM):   end;
21675      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 5 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21676      proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
21677      by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
21678      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.TEMPREG3.
NOTE: 2 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 3 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
21679      filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21680      *------------------------------------------------------------*;
21681      * Reg: Scoring DATA data;
21682      *------------------------------------------------------------*;
21683      data EMWS1.Reg_TRAIN
21684      / view=EMWS1.Reg_TRAIN
21685      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_TRAIN / view=EMWS1.Reg_TRAIN ;
21686      set EMWS1.Trans_TRAIN
21687      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_TRAIN ;
21688      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
21689     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
21690     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
21691     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
21692     +
21693     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
21694     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
21695     +
21696     +length I_TARGET_B $ 12;
MPRINT(EM_DIAGRAM):   length I_TARGET_B $ 12;
21697     +label I_TARGET_B = 'Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label I_TARGET_B = 'Into: TARGET_B' ;
21698     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
21699     +array REGDRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REGDRF [2] $12 _temporary_ ('1' '0' );
21700     +label U_TARGET_B = 'Unnormalized Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label U_TARGET_B = 'Unnormalized Into: TARGET_B' ;
21701     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
21702     +ARRAY REGDRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REGDRU[2] _TEMPORARY_ (1 0);
21703     +
21704     +*** Generate dummy variables for TARGET_B ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for TARGET_B ;
21705     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
21706     +label F_TARGET_B = 'From: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label F_TARGET_B = 'From: TARGET_B' ;
21707     +length F_TARGET_B $ 12;
MPRINT(EM_DIAGRAM):   length F_TARGET_B $ 12;
21708     +F_TARGET_B = put( TARGET_B , BEST12. );
MPRINT(EM_DIAGRAM):   F_TARGET_B = put( TARGET_B , BEST12. );
21709     +%DMNORMIP( F_TARGET_B )
MPRINT(DMNORMIP):   call dmnorm(F_TARGET_B,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( TARGET_B ) then do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
21710     +if missing( TARGET_B ) then do;
MPRINT(EM_DIAGRAM):   if F_TARGET_B = '0' then do;
21711     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = 1;
21712     +end;
MPRINT(EM_DIAGRAM):   end;
21713     +else do;
MPRINT(EM_DIAGRAM):   else if F_TARGET_B = '1' then do;
21714     +   if F_TARGET_B = '0'  then do;
MPRINT(EM_DIAGRAM):   _Y = 0;
21715     +      _Y = 1;
MPRINT(EM_DIAGRAM):   end;
21716     +   end;
21717     +   else if F_TARGET_B = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _Y = .;
21718     +      _Y = 0;
MPRINT(EM_DIAGRAM):   end;
21719     +   end;
MPRINT(EM_DIAGRAM):   end;
21720     +   else do;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
21721     +      _Y = .;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
21722     +   end;
21723     +end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for FREQUENCY_STATUS_97NK ;
21724     +
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 ;
21725     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   if missing( FREQUENCY_STATUS_97NK ) then do;
21726     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _3_0 = .;
21727     +
MPRINT(EM_DIAGRAM):   _3_1 = .;
21728     +*** Generate dummy variables for FREQUENCY_STATUS_97NK ;
MPRINT(EM_DIAGRAM):   _3_2 = .;
21729     +drop _3_0 _3_1 _3_2 ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21730     +if missing( FREQUENCY_STATUS_97NK ) then do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21731     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   end;
21732     +   _3_1 = .;
21733     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   else do;
21734     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
21735     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
21736     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( FREQUENCY_STATUS_97NK , BEST12. );
21737     +else do;
21738     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
21739     +   _dm12 = put( FREQUENCY_STATUS_97NK , BEST12. );
21740     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
MPRINT(EM_DIAGRAM):   end;
21741     +   if _dm12 = '1'  then do;
21742     +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
21743     +      _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
21744     +      _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
21745     +   end;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
21746     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
21747     +      _3_0 = 0;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
21748     +      _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
21749     +      _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
21750     +   end;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
21751     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   end;
21752     +      _3_0 = 0;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
21753     +      _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
21754     +      _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
21755     +   end;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
21756     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   end;
21757     +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   else do;
21758     +      _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = .;
21759     +      _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = .;
21760     +   end;
MPRINT(EM_DIAGRAM):   _3_2 = .;
21761     +   else do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21762     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   end;
21763     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   end;
21764     +      _3_2 = .;
21765     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for OPT_MEDIAN_HOME_VALUE ;
21766     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _12_0 ;
21767     +   end;
MPRINT(EM_DIAGRAM):   if missing( OPT_MEDIAN_HOME_VALUE ) then do;
21768     +end;
MPRINT(EM_DIAGRAM):   _12_0 = .;
21769     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21770     +*** Generate dummy variables for OPT_MEDIAN_HOME_VALUE ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21771     +drop _12_0 ;
MPRINT(EM_DIAGRAM):   end;
21772     +if missing( OPT_MEDIAN_HOME_VALUE ) then do;
21773     +   _12_0 = .;
MPRINT(EM_DIAGRAM):   else do;
21774     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
21775     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
21776     +end;
21777     +else do;
21778     +   length _dm32 $ 32; drop _dm32 ;
21779     +   %DMNORMCP( OPT_MEDIAN_HOME_VALUE , _dm32 )
MPRINT(DMNORMCP):   _dm32=dmnorm(OPT_MEDIAN_HOME_VALUE,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm32 = '02:676.5-HIGH, MISSING' then do;
MPRINT(EM_DIAGRAM):   _12_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm32 = '01:LOW-676.5' then do;
21780     +   if _dm32 = '02:676.5-HIGH, MISSING'  then do;
MPRINT(EM_DIAGRAM):   _12_0 = 1;
21781     +      _12_0 = -1;
MPRINT(EM_DIAGRAM):   end;
21782     +   end;
21783     +   else if _dm32 = '01:LOW-676.5'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _12_0 = .;
21784     +      _12_0 = 1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
21785     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21786     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
21787     +      _12_0 = .;
21788     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for PEP_STAR ;
21789     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _18_0 ;
21790     +   end;
MPRINT(EM_DIAGRAM):   if missing( PEP_STAR ) then do;
21791     +end;
MPRINT(EM_DIAGRAM):   _18_0 = .;
21792     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
21793     +*** Generate dummy variables for PEP_STAR ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21794     +drop _18_0 ;
MPRINT(EM_DIAGRAM):   end;
21795     +if missing( PEP_STAR ) then do;
21796     +   _18_0 = .;
MPRINT(EM_DIAGRAM):   else do;
21797     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
21798     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
21799     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( PEP_STAR , BEST12. );
21800     +else do;
21801     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
21802     +   _dm12 = put( PEP_STAR , BEST12. );
21803     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _18_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
21804     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   _18_0 = 1;
21805     +      _18_0 = -1;
MPRINT(EM_DIAGRAM):   end;
21806     +   end;
21807     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _18_0 = .;
21808     +      _18_0 = 1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
21809     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
21810     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
21811     +      _18_0 = .;
21812     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
21813     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
21814     +   end;
MPRINT(EM_DIAGRAM):   _P0 = 0.2500469307;
21815     +end;
MPRINT(EM_DIAGRAM):   _P1 = 0.7499530693;
21816     +
MPRINT(EM_DIAGRAM):   goto REGDR1;
21817     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   end;
21818     +if _DM_BAD > 0 then do;
21819     +   _P0 = 0.2500469307;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
21820     +   _P1 = 0.7499530693;
MPRINT(EM_DIAGRAM):   drop _TEMP;
21821     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   drop _LP0;
21822     +end;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
21823     +
21824     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Effect: FREQUENCY_STATUS_97NK ;
21825     +drop _TEMP;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
21826     +drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.3556861257867) * _TEMP * _3_0;
21827     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.13171370881188) * _TEMP * _3_1;
21828     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16318592168351) * _TEMP * _3_2;
21829     +***  Effect: FREQUENCY_STATUS_97NK ;
21830     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   *** Effect: OPT_MEDIAN_HOME_VALUE ;
21831     +_LP0 = _LP0 + (    -0.3556861257867) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
21832     +_LP0 = _LP0 + (   -0.13171370881188) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14135126079011) * _TEMP * _12_0;
21833     +_LP0 = _LP0 + (    0.16318592168351) * _TEMP * _3_2;
21834     +
MPRINT(EM_DIAGRAM):   *** Effect: PEP_STAR ;
21835     +***  Effect: OPT_MEDIAN_HOME_VALUE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
21836     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.17905481873096) * _TEMP * _18_0;
21837     +_LP0 = _LP0 + (   -0.14135126079011) * _TEMP * _12_0;
21838     +
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
21839     +***  Effect: PEP_STAR ;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
21840     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = -1.03523114674562 + _LP0;
21841     +_LP0 = _LP0 + (   -0.17905481873096) * _TEMP * _18_0;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
21842     +
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
21843     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
21844     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   end;
21845     +_TEMP =    -1.03523114674562 + _LP0;
21846     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
21847     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
21848     +   _P0 = _TEMP / (1 + _TEMP);
21849     +end;
21850     +else _P0 = 1 / (1 + exp(-_TEMP));
21851     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
21852     +
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
21853     +REGDR1:
MPRINT(EM_DIAGRAM):   R_TARGET_B1 = .;
MPRINT(EM_DIAGRAM):   R_TARGET_B0 = .;
21854     +
MPRINT(EM_DIAGRAM):   end;
21855     +*** Residuals;
21856     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   else do;
21857     +   R_TARGET_B1 = .;
MPRINT(EM_DIAGRAM):   label R_TARGET_B1 = 'Residual: TARGET_B=1' ;
21858     +   R_TARGET_B0 = .;
21859     +end;
MPRINT(EM_DIAGRAM):   label R_TARGET_B0 = 'Residual: TARGET_B=0' ;
21860     +else do;
MPRINT(EM_DIAGRAM):   R_TARGET_B1 = - _P0;
21861     +    label R_TARGET_B1 = 'Residual: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   R_TARGET_B0 = - _P1;
MPRINT(EM_DIAGRAM):   select( _Y );
21862     +    label R_TARGET_B0 = 'Residual: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   when (0) R_TARGET_B1 = R_TARGET_B1 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_TARGET_B0 = R_TARGET_B0 + 1;
21863     +   R_TARGET_B1 = - _P0;
MPRINT(EM_DIAGRAM):   end;
21864     +   R_TARGET_B0 = - _P1;
MPRINT(EM_DIAGRAM):   end;
21865     +   select( _Y );
21866     +      when (0)  R_TARGET_B1 = R_TARGET_B1 + 1;
21867     +      when (1)  R_TARGET_B0 = R_TARGET_B0 + 1;
MPRINT(EM_DIAGRAM):   *** Update Posterior Probabilities;
21868     +   end;
MPRINT(EM_DIAGRAM):   _P0 = _P0 * 0.05 / 0.25004693073024;
21869     +end;
MPRINT(EM_DIAGRAM):   _P1 = _P1 * 0.95 / 0.74995306926975;
21870     +
MPRINT(EM_DIAGRAM):   drop _sum;
MPRINT(EM_DIAGRAM):   _sum = _P0 + _P1 ;
21871     +
MPRINT(EM_DIAGRAM):   if _sum > 4.135903E-25 then do;
21872     +*** Update Posterior Probabilities;
MPRINT(EM_DIAGRAM):   _P0 = _P0 / _sum;
21873     +_P0 = _P0 * 0.05 / 0.25004693073024;
MPRINT(EM_DIAGRAM):   _P1 = _P1 / _sum;
21874     +_P1 = _P1 * 0.95 / 0.74995306926975;
MPRINT(EM_DIAGRAM):   end;
21875     +drop _sum; _sum = _P0 + _P1 ;
21876     +if _sum > 4.135903E-25 then do;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
21877     +   _P0 = _P0 / _sum;
MPRINT(EM_DIAGRAM):   label D_TARGET_B = 'Decision: TARGET_B' ;
21878     +   _P1 = _P1 / _sum;
21879     +end;
MPRINT(EM_DIAGRAM):   label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
21880     +
21881     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   label BP_TARGET_B = 'Best Profit: TARGET_B' ;
21882     +label D_TARGET_B = 'Decision: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
21883     +label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
21884     +label BP_TARGET_B = 'Best Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   length D_TARGET_B $ 9;
21885     +label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   D_TARGET_B = ' ';
21886     +
MPRINT(EM_DIAGRAM):   EP_TARGET_B = .;
21887     +length D_TARGET_B $ 9;
MPRINT(EM_DIAGRAM):   BP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   CP_TARGET_B = .;
21888     +
21889     +D_TARGET_B = ' ';
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
21890     +EP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
21891     +BP_TARGET_B = .;
21892     +CP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '1' ;
21893     +
MPRINT(EM_DIAGRAM):   EP_TARGET_B = _P0 * 14.5 + _P1 * -0.5;
21894     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   drop _sum;
21895     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _sum = _P0 * 0 + _P1 * 0;
21896     +
MPRINT(EM_DIAGRAM):   if _sum > EP_TARGET_B + 6.593837E-12 then do;
21897     +D_TARGET_B = '1' ;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
21898     +EP_TARGET_B = _P0 * 14.5 + _P1 * -0.5;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '0' ;
21899     +drop _sum;
MPRINT(EM_DIAGRAM):   end;
21900     +_sum = _P0 * 0 + _P1 * 0;
21901     +if _sum > EP_TARGET_B + 6.593837E-12 then do;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
21902     +   EP_TARGET_B = _sum; _decnum = 2;
21903     +   D_TARGET_B = '0' ;
21904     +end;
21905     +
MPRINT(EM_DIAGRAM):   array REGdema [2,2] _temporary_ ( 14.5 0 -0.5 0 );
21906     +*** Decision Matrix;
21907     +array REGdema [2,2] _temporary_ (
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
21908     +/* row 1 */  14.5 0
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_TARGET_B );
21909     +/* row 2 */  -0.5 0
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
21910     +);
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
21911     +
21912     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
21913     +drop _tarnum; select( F_TARGET_B );
MPRINT(EM_DIAGRAM):   end;
21914     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto REGdeex;
21915     +   when('0' ) _tarnum = 2;
21916     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   CP_TARGET_B = REGdema [_tarnum,_decnum];
21917     +end;
21918     +if _tarnum <= 0 then goto REGdeex;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
21919     +
MPRINT(EM_DIAGRAM):   array REGdebe [2] _temporary_ ( 14.5 0);
21920     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   BP_TARGET_B = REGdebe [_tarnum];
21921     +CP_TARGET_B = REGdema [_tarnum,_decnum];
21922     +
21923     +*** Best Possible Consequence of Any Decision without Cost;
21924     +array REGdebe [2] _temporary_ ( 14.5 0);
MPRINT(EM_DIAGRAM):   REGdeex:;
21925     +BP_TARGET_B = REGdebe [_tarnum];
21926     +
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
21927     +
21928     +REGdeex:;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   label P_TARGET_B1 = 'Predicted: TARGET_B=1' ;
21929     +
21930     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   label P_TARGET_B0 = 'Predicted: TARGET_B=0' ;
21931     +
21932     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = _P0;
21933     +label P_TARGET_B1 = 'Predicted: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
21934     +label P_TARGET_B0 = 'Predicted: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
21935     +P_TARGET_B1 = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
21936     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 2;
21937     +_IY = 1;
MPRINT(EM_DIAGRAM):   end;
21938     +P_TARGET_B0 = _P1;
MPRINT(EM_DIAGRAM):   I_TARGET_B = REGDRF[_IY];
21939     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   U_TARGET_B = REGDRU[_IY];
21940     +   _MAXP = _P1;
21941     +   _IY = 2;
MPRINT(EM_DIAGRAM):   *************************************;
21942     +end;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
21943     +I_TARGET_B = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
21944     +U_TARGET_B = REGDRU[_IY];
21945     +
21946     +*************************************;
21947     +***** end scoring code for regression;
21948     +*************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
21949      run;
 
NOTE: DATA STEP view saved on file EMWS1.REG_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.29 seconds
      cpu time            0.28 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.32 seconds
      cpu time            0.31 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
21950      quit;
21951      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
21952      filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21953      *------------------------------------------------------------*;
21954      * Reg: Scoring VALIDATE data;
21955      *------------------------------------------------------------*;
21956      data EMWS1.Reg_VALIDATE
21957      / view=EMWS1.Reg_VALIDATE
21958      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_VALIDATE / view=EMWS1.Reg_VALIDATE ;
21959      set EMWS1.Trans_VALIDATE
21960      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_VALIDATE ;
21961      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
21962     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
21963     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
21964     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
21965     +
21966     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
21967     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
21968     +
21969     +length I_TARGET_B $ 12;
MPRINT(EM_DIAGRAM):   length I_TARGET_B $ 12;
21970     +label I_TARGET_B = 'Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label I_TARGET_B = 'Into: TARGET_B' ;
21971     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
21972     +array REGDRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REGDRF [2] $12 _temporary_ ('1' '0' );
21973     +label U_TARGET_B = 'Unnormalized Into: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label U_TARGET_B = 'Unnormalized Into: TARGET_B' ;
21974     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
21975     +ARRAY REGDRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REGDRU[2] _TEMPORARY_ (1 0);
21976     +
21977     +*** Generate dummy variables for TARGET_B ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for TARGET_B ;
21978     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
21979     +label F_TARGET_B = 'From: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label F_TARGET_B = 'From: TARGET_B' ;
21980     +length F_TARGET_B $ 12;
MPRINT(EM_DIAGRAM):   length F_TARGET_B $ 12;
21981     +F_TARGET_B = put( TARGET_B , BEST12. );
MPRINT(EM_DIAGRAM):   F_TARGET_B = put( TARGET_B , BEST12. );
21982     +%DMNORMIP( F_TARGET_B )
MPRINT(DMNORMIP):   call dmnorm(F_TARGET_B,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
21983     +if missing( TARGET_B ) then do;
MPRINT(EM_DIAGRAM):   if missing( TARGET_B ) then do;
21984     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
21985     +end;
MPRINT(EM_DIAGRAM):   end;
21986     +else do;
MPRINT(EM_DIAGRAM):   else do;
21987     +   if F_TARGET_B = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_TARGET_B = '0' then do;
21988     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
21989     +   end;
MPRINT(EM_DIAGRAM):   end;
21990     +   else if F_TARGET_B = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_TARGET_B = '1' then do;
21991     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
21992     +   end;
MPRINT(EM_DIAGRAM):   end;
21993     +   else do;
MPRINT(EM_DIAGRAM):   else do;
21994     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
21995     +   end;
MPRINT(EM_DIAGRAM):   end;
21996     +end;
MPRINT(EM_DIAGRAM):   end;
21997     +
21998     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
21999     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
22000     +
22001     +*** Generate dummy variables for FREQUENCY_STATUS_97NK ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for FREQUENCY_STATUS_97NK ;
22002     +drop _3_0 _3_1 _3_2 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 ;
22003     +if missing( FREQUENCY_STATUS_97NK ) then do;
MPRINT(EM_DIAGRAM):   if missing( FREQUENCY_STATUS_97NK ) then do;
22004     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
22005     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
22006     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
22007     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22008     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22009     +end;
MPRINT(EM_DIAGRAM):   end;
22010     +else do;
MPRINT(EM_DIAGRAM):   else do;
22011     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22012     +   _dm12 = put( FREQUENCY_STATUS_97NK , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( FREQUENCY_STATUS_97NK , BEST12. );
22013     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22014     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22015     +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
22016     +      _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
22017     +      _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
22018     +   end;
MPRINT(EM_DIAGRAM):   end;
22019     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
22020     +      _3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
22021     +      _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
22022     +      _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
22023     +   end;
MPRINT(EM_DIAGRAM):   end;
22024     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22025     +      _3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
22026     +      _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
22027     +      _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
22028     +   end;
MPRINT(EM_DIAGRAM):   end;
22029     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
22030     +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
22031     +      _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
22032     +      _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
22033     +   end;
MPRINT(EM_DIAGRAM):   end;
22034     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22035     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
22036     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
22037     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
22038     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22039     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22040     +   end;
MPRINT(EM_DIAGRAM):   end;
22041     +end;
MPRINT(EM_DIAGRAM):   end;
22042     +
22043     +*** Generate dummy variables for OPT_MEDIAN_HOME_VALUE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for OPT_MEDIAN_HOME_VALUE ;
22044     +drop _12_0 ;
MPRINT(EM_DIAGRAM):   drop _12_0 ;
22045     +if missing( OPT_MEDIAN_HOME_VALUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( OPT_MEDIAN_HOME_VALUE ) then do;
22046     +   _12_0 = .;
MPRINT(EM_DIAGRAM):   _12_0 = .;
22047     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22048     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22049     +end;
MPRINT(EM_DIAGRAM):   end;
22050     +else do;
MPRINT(EM_DIAGRAM):   else do;
22051     +   length _dm32 $ 32; drop _dm32 ;
MPRINT(EM_DIAGRAM):   length _dm32 $ 32;
MPRINT(EM_DIAGRAM):   drop _dm32 ;
22052     +   %DMNORMCP( OPT_MEDIAN_HOME_VALUE , _dm32 )
MPRINT(DMNORMCP):   _dm32=dmnorm(OPT_MEDIAN_HOME_VALUE,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
22053     +   if _dm32 = '02:676.5-HIGH, MISSING'  then do;
MPRINT(EM_DIAGRAM):   if _dm32 = '02:676.5-HIGH, MISSING' then do;
22054     +      _12_0 = -1;
MPRINT(EM_DIAGRAM):   _12_0 = -1;
22055     +   end;
MPRINT(EM_DIAGRAM):   end;
22056     +   else if _dm32 = '01:LOW-676.5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm32 = '01:LOW-676.5' then do;
22057     +      _12_0 = 1;
MPRINT(EM_DIAGRAM):   _12_0 = 1;
22058     +   end;
MPRINT(EM_DIAGRAM):   end;
22059     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22060     +      _12_0 = .;
MPRINT(EM_DIAGRAM):   _12_0 = .;
22061     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22062     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22063     +   end;
MPRINT(EM_DIAGRAM):   end;
22064     +end;
MPRINT(EM_DIAGRAM):   end;
22065     +
22066     +*** Generate dummy variables for PEP_STAR ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for PEP_STAR ;
22067     +drop _18_0 ;
MPRINT(EM_DIAGRAM):   drop _18_0 ;
22068     +if missing( PEP_STAR ) then do;
MPRINT(EM_DIAGRAM):   if missing( PEP_STAR ) then do;
22069     +   _18_0 = .;
MPRINT(EM_DIAGRAM):   _18_0 = .;
22070     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22071     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22072     +end;
MPRINT(EM_DIAGRAM):   end;
22073     +else do;
MPRINT(EM_DIAGRAM):   else do;
22074     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22075     +   _dm12 = put( PEP_STAR , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( PEP_STAR , BEST12. );
22076     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
22077     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
22078     +      _18_0 = -1;
MPRINT(EM_DIAGRAM):   _18_0 = -1;
22079     +   end;
MPRINT(EM_DIAGRAM):   end;
22080     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
22081     +      _18_0 = 1;
MPRINT(EM_DIAGRAM):   _18_0 = 1;
22082     +   end;
MPRINT(EM_DIAGRAM):   end;
22083     +   else do;
MPRINT(EM_DIAGRAM):   else do;
22084     +      _18_0 = .;
MPRINT(EM_DIAGRAM):   _18_0 = .;
22085     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22086     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22087     +   end;
MPRINT(EM_DIAGRAM):   end;
22088     +end;
MPRINT(EM_DIAGRAM):   end;
22089     +
22090     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
22091     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
22092     +   _P0 = 0.2500469307;
MPRINT(EM_DIAGRAM):   _P0 = 0.2500469307;
22093     +   _P1 = 0.7499530693;
MPRINT(EM_DIAGRAM):   _P1 = 0.7499530693;
22094     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   goto REGDR1;
22095     +end;
MPRINT(EM_DIAGRAM):   end;
22096     +
22097     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
22098     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
22099     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
22100     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
22101     +
22102     +***  Effect: FREQUENCY_STATUS_97NK ;
MPRINT(EM_DIAGRAM):   *** Effect: FREQUENCY_STATUS_97NK ;
22103     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
22104     +_LP0 = _LP0 + (    -0.3556861257867) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.3556861257867) * _TEMP * _3_0;
22105     +_LP0 = _LP0 + (   -0.13171370881188) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.13171370881188) * _TEMP * _3_1;
22106     +_LP0 = _LP0 + (    0.16318592168351) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16318592168351) * _TEMP * _3_2;
22107     +
22108     +***  Effect: OPT_MEDIAN_HOME_VALUE ;
MPRINT(EM_DIAGRAM):   *** Effect: OPT_MEDIAN_HOME_VALUE ;
22109     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
22110     +_LP0 = _LP0 + (   -0.14135126079011) * _TEMP * _12_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.14135126079011) * _TEMP * _12_0;
22111     +
22112     +***  Effect: PEP_STAR ;
MPRINT(EM_DIAGRAM):   *** Effect: PEP_STAR ;
22113     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
22114     +_LP0 = _LP0 + (   -0.17905481873096) * _TEMP * _18_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.17905481873096) * _TEMP * _18_0;
22115     +
22116     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
22117     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
22118     +_TEMP =    -1.03523114674562 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -1.03523114674562 + _LP0;
22119     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
22120     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
22121     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
22122     +end;
MPRINT(EM_DIAGRAM):   end;
22123     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
22124     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
22125     +
22126     +REGDR1:
22127     +
22128     +*** Residuals;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
22129     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
22130     +   R_TARGET_B1 = .;
MPRINT(EM_DIAGRAM):   R_TARGET_B1 = .;
22131     +   R_TARGET_B0 = .;
MPRINT(EM_DIAGRAM):   R_TARGET_B0 = .;
22132     +end;
MPRINT(EM_DIAGRAM):   end;
22133     +else do;
MPRINT(EM_DIAGRAM):   else do;
22134     +    label R_TARGET_B1 = 'Residual: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   label R_TARGET_B1 = 'Residual: TARGET_B=1' ;
22135     +    label R_TARGET_B0 = 'Residual: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   label R_TARGET_B0 = 'Residual: TARGET_B=0' ;
22136     +   R_TARGET_B1 = - _P0;
MPRINT(EM_DIAGRAM):   R_TARGET_B1 = - _P0;
22137     +   R_TARGET_B0 = - _P1;
MPRINT(EM_DIAGRAM):   R_TARGET_B0 = - _P1;
22138     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
22139     +      when (0)  R_TARGET_B1 = R_TARGET_B1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_TARGET_B1 = R_TARGET_B1 + 1;
22140     +      when (1)  R_TARGET_B0 = R_TARGET_B0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_TARGET_B0 = R_TARGET_B0 + 1;
22141     +   end;
MPRINT(EM_DIAGRAM):   end;
22142     +end;
MPRINT(EM_DIAGRAM):   end;
22143     +
22144     +
22145     +*** Update Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Update Posterior Probabilities;
22146     +_P0 = _P0 * 0.05 / 0.25004693073024;
MPRINT(EM_DIAGRAM):   _P0 = _P0 * 0.05 / 0.25004693073024;
22147     +_P1 = _P1 * 0.95 / 0.74995306926975;
MPRINT(EM_DIAGRAM):   _P1 = _P1 * 0.95 / 0.74995306926975;
22148     +drop _sum; _sum = _P0 + _P1 ;
MPRINT(EM_DIAGRAM):   drop _sum;
MPRINT(EM_DIAGRAM):   _sum = _P0 + _P1 ;
22149     +if _sum > 4.135903E-25 then do;
MPRINT(EM_DIAGRAM):   if _sum > 4.135903E-25 then do;
22150     +   _P0 = _P0 / _sum;
MPRINT(EM_DIAGRAM):   _P0 = _P0 / _sum;
22151     +   _P1 = _P1 / _sum;
MPRINT(EM_DIAGRAM):   _P1 = _P1 / _sum;
22152     +end;
MPRINT(EM_DIAGRAM):   end;
22153     +
22154     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
22155     +label D_TARGET_B = 'Decision: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label D_TARGET_B = 'Decision: TARGET_B' ;
22156     +label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label EP_TARGET_B = 'Expected Profit: TARGET_B' ;
22157     +label BP_TARGET_B = 'Best Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label BP_TARGET_B = 'Best Profit: TARGET_B' ;
22158     +label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
MPRINT(EM_DIAGRAM):   label CP_TARGET_B = 'Computed Profit: TARGET_B' ;
22159     +
22160     +length D_TARGET_B $ 9;
MPRINT(EM_DIAGRAM):   length D_TARGET_B $ 9;
22161     +
22162     +D_TARGET_B = ' ';
MPRINT(EM_DIAGRAM):   D_TARGET_B = ' ';
22163     +EP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = .;
22164     +BP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   BP_TARGET_B = .;
22165     +CP_TARGET_B = .;
MPRINT(EM_DIAGRAM):   CP_TARGET_B = .;
22166     +
22167     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
22168     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
22169     +
22170     +D_TARGET_B = '1' ;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '1' ;
22171     +EP_TARGET_B = _P0 * 14.5 + _P1 * -0.5;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = _P0 * 14.5 + _P1 * -0.5;
22172     +drop _sum;
MPRINT(EM_DIAGRAM):   drop _sum;
22173     +_sum = _P0 * 0 + _P1 * 0;
MPRINT(EM_DIAGRAM):   _sum = _P0 * 0 + _P1 * 0;
22174     +if _sum > EP_TARGET_B + 6.593837E-12 then do;
MPRINT(EM_DIAGRAM):   if _sum > EP_TARGET_B + 6.593837E-12 then do;
22175     +   EP_TARGET_B = _sum; _decnum = 2;
MPRINT(EM_DIAGRAM):   EP_TARGET_B = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
22176     +   D_TARGET_B = '0' ;
MPRINT(EM_DIAGRAM):   D_TARGET_B = '0' ;
22177     +end;
MPRINT(EM_DIAGRAM):   end;
22178     +
22179     +*** Decision Matrix;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
22180     +array REGdema [2,2] _temporary_ (
22181     +/* row 1 */  14.5 0
22182     +/* row 2 */  -0.5 0
22183     +);
MPRINT(EM_DIAGRAM):   array REGdema [2,2] _temporary_ ( 14.5 0 -0.5 0 );
22184     +
22185     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
22186     +drop _tarnum; select( F_TARGET_B );
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_TARGET_B );
22187     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
22188     +   when('0' ) _tarnum = 2;
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
22189     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
22190     +end;
MPRINT(EM_DIAGRAM):   end;
22191     +if _tarnum <= 0 then goto REGdeex;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto REGdeex;
22192     +
22193     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
22194     +CP_TARGET_B = REGdema [_tarnum,_decnum];
MPRINT(EM_DIAGRAM):   CP_TARGET_B = REGdema [_tarnum,_decnum];
22195     +
22196     +*** Best Possible Consequence of Any Decision without Cost;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
22197     +array REGdebe [2] _temporary_ ( 14.5 0);
MPRINT(EM_DIAGRAM):   array REGdebe [2] _temporary_ ( 14.5 0);
22198     +BP_TARGET_B = REGdebe [_tarnum];
MPRINT(EM_DIAGRAM):   BP_TARGET_B = REGdebe [_tarnum];
22199     +
22200     +
22201     +REGdeex:;
MPRINT(EM_DIAGRAM):   REGdeex:;
22202     +
22203     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
22204     +
22205     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
22206     +label P_TARGET_B1 = 'Predicted: TARGET_B=1' ;
MPRINT(EM_DIAGRAM):   label P_TARGET_B1 = 'Predicted: TARGET_B=1' ;
22207     +label P_TARGET_B0 = 'Predicted: TARGET_B=0' ;
MPRINT(EM_DIAGRAM):   label P_TARGET_B0 = 'Predicted: TARGET_B=0' ;
22208     +P_TARGET_B1 = _P0;
MPRINT(EM_DIAGRAM):   P_TARGET_B1 = _P0;
22209     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
22210     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
22211     +P_TARGET_B0 = _P1;
MPRINT(EM_DIAGRAM):   P_TARGET_B0 = _P1;
22212     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
22213     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
22214     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
22215     +end;
MPRINT(EM_DIAGRAM):   end;
22216     +I_TARGET_B = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   I_TARGET_B = REGDRF[_IY];
22217     +U_TARGET_B = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   U_TARGET_B = REGDRU[_IY];
22218     +
22219     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
22220     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
22221     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
22222      run;
 
NOTE: DATA STEP view saved on file EMWS1.REG_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_VALIDATE.VIEW used (Total process time):
      real time           0.28 seconds
      cpu time            0.25 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.29 seconds
      cpu time            0.26 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
22223      quit;
22224      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22225      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22226      * Reg: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg: Computing metadata for TRAIN data;
22227      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.25 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Reg_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Reg_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Reg_TRAIN out=WORK.M3D3GVNZ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3D3GVNZ;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3D3GVNZ(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3D3GVNZ;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3D3GVNZ;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1B9SURH NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1B9SURH;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1B9SURH;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1FWRXM7(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1B9SURH;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1B9SURH;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1B9SURH;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1B9SURH;
MPRINT(EMADVISECOLUMNS):   set WORK.M1B9SURH;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_TARGET_B1") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("R_TARGET_B1") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("P_TARGET_B0") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("R_TARGET_B0") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("F_TARGET_B") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("I_TARGET_B") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("U_TARGET_B") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("D_TARGET_B") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("EP_TARGET_B") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("CP_TARGET_B") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("BP_TARGET_B") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("TARGET_B") model = "Reg";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'FREQUENCY_STATUS_97NK' 'OPT_MEDIAN_HOME_VALUE' 'PEP_STAR' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg: Rejected using stepwise selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
22554      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
22555      set EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMINFO;
22556      where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
22557      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.REG_EMINFO.
      WHERE (DATA='Reg') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22558      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMINFO;
22559      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
22560      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
22561      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
22565      run;
22566      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMINFO;
22567      set EMWS1.Reg_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMINFO WORK.MODELTEMP_INFO;
22568      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
22569      proc sort data = EMWS1.Reg_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Reg_EMINFO NOTHREADS;
22570      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22571      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22572      proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
22573      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22574      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22575      proc sort data = EMWS1.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
22576      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22577      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22578      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMINFO;
22579      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
22580      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
22581      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.REG_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
22582      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
22583      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
22584      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
22585      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.26 seconds
 
NOTE: View EMWS1.REG_VALIDATE.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.25 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 11, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:47:31" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                October 11, 2015
Time:                14:47:31
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3FLGD67 "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Getting Started Charitable Giving Example\Workspaces\EMWS1\Reg\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3FLGD67 new;
MPRINT(EM_DIAGRAM):   run;
22609      data EMWS1.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMOUTFIT;
22610      length TARGET $32;
MPRINT(EM_DIAGRAM):   length TARGET $32;
22611      set EMWS1.Reg_EMESTIMATE end=eof;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMESTIMATE end=eof;
22612      where (_TYPE_='PARMS');
MPRINT(EM_DIAGRAM):   where (_TYPE_='PARMS');
22613      drop _STEP_--REP_DONOR_GENDERU;
MPRINT(EM_DIAGRAM):   drop _STEP_--REP_DONOR_GENDERU;
22614      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
22615      TARGET = "TARGET_B";
MPRINT(EM_DIAGRAM):   TARGET = "TARGET_B";
22616      output;
MPRINT(EM_DIAGRAM):   output;
22617      end;
MPRINT(EM_DIAGRAM):   end;
22618      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.REG_EMESTIMATE.
      WHERE _TYPE_='PARMS';
NOTE: The data set EMWS1.REG_EMOUTFIT has 1 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
22619      data EMWS1.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMOUTFIT;
22620      set EMWS1.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMOUTFIT;
22621      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
22622      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
22623      if upcase(TARGET) eq "TARGET_B" then TargetLabel = 'Target Variable Indicates for Response to 97NK Mailing';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "TARGET_B" then TargetLabel = 'Target Variable Indicates for Response to 97NK Mailing';
22624      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG_EMOUTFIT.
NOTE: The data set EMWS1.REG_EMOUTFIT has 1 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
22625      proc sort data=EMWS1.Reg_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Reg_EMREPORTFIT nothreads;
22626      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
22627      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set EMWS1.REG_EMREPORTFIT.
NOTE: The data set EMWS1.REG_EMREPORTFIT has 22 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
22628      %let _EMwarndup = 0;
22629      %let _EMtargetdup =;
22630      %let _EMASEtargetdup =;
22631      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
22632      set EMWS1.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMOUTFIT;
22633      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
22634      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
22635      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
22636      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
22637      end;
MPRINT(EM_DIAGRAM):   end;
22638      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22639      proc sort data=EMWS1.Trans_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Trans_CMeta_TRAIN out=WORK.SUBSETINMETA;
22640      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22641      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 54 observations read from the data set EMWS1.TRANS_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 54 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22642      proc sort data=EMWS1.Reg_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Reg_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
22643      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22644      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 51 observations read from the data set EMWS1.REG_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 51 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22645      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
22646      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
22647      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
22648      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 54 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 51 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 54 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22649      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
22650      set EMWS1.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_CMeta_TRAIN;
22651      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
22652      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.REG_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22653      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
22654      set EMWS1.Reg_TRAIN(keep=
22655      BP_TARGET_B
22656      CP_TARGET_B
22657      D_TARGET_B
22658      EP_TARGET_B
22659      F_TARGET_B
22660      I_TARGET_B
22661      P_TARGET_B0
22662      P_TARGET_B1
22663      R_TARGET_B0
22664      R_TARGET_B1
22665      U_TARGET_B
22666      _WARN_
22667      TARGET_B
22668      );
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_TRAIN(keep= BP_TARGET_B CP_TARGET_B D_TARGET_B EP_TARGET_B F_TARGET_B I_TARGET_B P_TARGET_B0 P_TARGET_B1 R_TARGET_B0 R_TARGET_B1 U_TARGET_B _WARN_ TARGET_B );
22669      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 10654 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 10654 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 10654 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.37 seconds
      cpu time            0.35 seconds
 
NOTE: There were 10654 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 10654 observations read from the data set EMWS1.REG_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 10654 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.40 seconds
      cpu time            0.39 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_TARGET_B*F_TARGET_B / out = WORK.Reg_1A8KNN9 nocol norow outpct;
MPRINT(EM_DIAGRAM):   table D_TARGET_B*F_TARGET_B / out = WORK.Reg_26D1M29 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_1A8KNN9;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg_1A8KNN9(rename=(F_TARGET_B=FROM I_TARGET_B=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "TARGET_B";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "TARGET_B" then TARGETLABEL = 'Target Variable Indicates for Response to 97NK Mailing';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc freq data=WORK.Reg_1A8KNN9;
MPRINT(EM_DIAGRAM):   table FROM/out=_prioradjust1(KEEP=FROM PERCENT RENAME=(PERCENT=DATAPERCENT));
MPRINT(EM_DIAGRAM):   weight PERCENT;
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_prioradjust1;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   DATA _prioradjust1;
MPRINT(EM_DIAGRAM):   set _prioradjust1;
MPRINT(EM_DIAGRAM):   DATAPERCENT=0.01*DATAPERCENT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids_TARGET_B_DD out=_prior(keep=decprior);
MPRINT(EM_DIAGRAM):   by TARGET_B;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   DATA _prioradjust1;
MPRINT(EM_DIAGRAM):   merge _prioradjust1 _prior;
MPRINT(EM_DIAGRAM):   ADJUSTMENT = DECPRIOR/DATAPERCENT;
MPRINT(EM_DIAGRAM):   keep FROM ADJUSTMENT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.Reg_1A8KNN9;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Reg_1A8KNN9;
MPRINT(EM_DIAGRAM):   merge WORK.Reg_1A8KNN9 _prioradjust1;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   ADJUSTEDPERCENT = PERCENT*ADJUSTMENT;
MPRINT(EM_DIAGRAM):   label ADJUSTEDPERCENT = "Adjusted Percent of Predict/Decision Variable";
MPRINT(EM_DIAGRAM):   drop ADJUSTMENT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Reg_1A8KNN9;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg_1A8KNN9;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_26D1M29;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 dataRole target $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $9;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg_26D1M29(rename=(F_TARGET_B=FROM D_TARGET_B=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'DECISION' DATAROLE "TRAIN" TARGET "TARGET_B";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "TARGET_B" then TARGETLABEL = 'Target Variable Indicates for Response to 97NK Mailing';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.Reg_26D1M29;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Reg_26D1M29;
MPRINT(EM_DIAGRAM):   merge WORK.Reg_26D1M29 _prioradjust1;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   AdjustedPercent = Percent*Adjustment;
MPRINT(EM_DIAGRAM):   label ADJUSTEDPERCENT = "Adjusted Percent of Predict/Decision Variable";
MPRINT(EM_DIAGRAM):   drop Adjustment;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMCLASSIFICATION WORK.Reg_26D1M29;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "TARGET_B" then TARGETLABEL = 'Target Variable Indicates for Response to 97NK Mailing';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_TARGET_B_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_TARGET_B_DD;
MPRINT(EM_DIAGRAM):   where strip(TARGET_B)=strip(symget('ASSMT_EVENT'));
MPRINT(EM_DIAGRAM):   call symput('DECPRIOR', strip(put(DECPRIOR, best.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_TARGET_B") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_TARGET_B") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_TARGET_B D_TARGET_B ;
 
MPRINT(EM_ASSESS):   VAR P_TARGET_B1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_TARGET_B") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "D_TARGET_B" > " " AND UPCASE(NAME) = UPCASE("D_TARGET_B") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_TARGET_B1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_TARGET_B P_TARGET_B1 EP_TARGET_B CP_TARGET_B BP_TARGET_B _tmpfreqvar_ D_TARGET_B );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_TARGET_B ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_TARGET_B1 D_TARGET_B NTARGET _tmpfreqvar_ EP_TARGET_B CP_TARGET_B BP_TARGET_B WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_TARGET_B1 D_TARGET_B ;
MPRINT(EM_ASSESS):   VAR NTARGET EP_TARGET_B CP_TARGET_B BP_TARGET_B ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANEPTARGET _MEANCPTARGET _MEANBPTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP MNEP_TARGET MINEP_TARGET MAXEP_TARGET TOTALEP_TARGET CUMULATIVEEP CUMULATIVETOTALEP MNCP_TARGET MINCP_TARGET MAXCP_TARGET CP_TARGET TOTALCP_TARGET CUMULATIVECP
CUMULATIVETOTALCP BASECP BASECUMTOTALCP BASECUMULATIVECP BASETOTALCP BESTTOTALBP BESTCUMULATIVEBP BESTCUMTOTALBP BESTBP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP
PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS NUMDECISION1 NUMDECISION2 SCR_MNPROB SCR_MINPROB SCR_MAXPROB SCR_EPMEAN SCR_EPMIN SCR_EPMAX SCR_CPMEAN SCR_CPMIN SCR_CPMAX ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 CUMPROFIT1 - CUMPROFIT20 0 CUMBPROFIT1 - CUMBPROFIT20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 FALSEPOS1 -
FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.05 _NEVENTS 532.7 _NNONEVENTS 10121.3 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   RETAIN EPTARGET1 - EPTARGET20 0 MINEPTARGET1 - MINEPTARGET20 0 MAXEPTARGET1 - MAXEPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY EPTARGET (20) EPTARGET1 - EPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINEPTARGET (20) MINEPTARGET1 - MINEPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXEPTARGET (20) MAXEPTARGET1 - MAXEPTARGET20;
MPRINT(EM_ASSESS):   DROP EPTARGET1 - EPTARGET20 _MEANEPTARGET MINEPTARGET1 - MINEPTARGET20 MAXEPTARGET1 - MAXEPTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN CPTARGET1 - CPTARGET20 0 MINCPTARGET1 - MINCPTARGET20 0 MAXCPTARGET1 - MAXCPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY CPTARGET (20) CPTARGET1 - CPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINCPTARGET (20) MINCPTARGET1 - MINCPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXCPTARGET (20) MAXCPTARGET1 - MAXCPTARGET20;
MPRINT(EM_ASSESS):   DROP CPTARGET1 - CPTARGET20 _MEANCPTARGET MINCPTARGET1 - MINCPTARGET20 MAXCPTARGET1 - MAXCPTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN BPTARGET1 - BPTARGET20 0 MINBPTARGET1 - MINBPTARGET20 0 MAXBPTARGET1 - MAXBPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY BPTARGET (20) BPTARGET1 - BPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINBPTARGET (20) MINBPTARGET1 - MINBPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXBPTARGET (20) MAXBPTARGET1 - MAXBPTARGET20;
MPRINT(EM_ASSESS):   DROP BPTARGET1 - BPTARGET20 _MEANBPTARGET MINBPTARGET1 - MINBPTARGET20 MAXBPTARGET1 - MAXBPTARGET20 ;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1 SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100 SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   RETAIN D_TARGET1_1 - D_TARGET1_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET1 (100) D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   DROP D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   RETAIN D_TARGET2_1 - D_TARGET2_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET2 (100) D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   DROP D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN SCR_EPMEAN1- SCR_EPMEAN100 0 SCR_EPMIN1 - SCR_EPMIN100 1 SCR_EPMAX1 - SCR_EPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMEANS (100) SCR_EPMEAN1 - SCR_EPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMINS (100) SCR_EPMIN1 - SCR_EPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMAXS (100) SCR_EPMAX1 - SCR_EPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_EPMEAN1 - SCR_EPMEAN100 SCR_EPMIN1 - SCR_EPMIN100 SCR_EPMAX1 - SCR_EPMAX100;
MPRINT(EM_ASSESS):   RETAIN SCR_CPMEAN1- SCR_CPMEAN100 0 SCR_CPMIN1 - SCR_CPMIN100 1 SCR_CPMAX1 - SCR_CPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMEANS (100) SCR_CPMEAN1 - SCR_CPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMINS (100) SCR_CPMIN1 - SCR_CPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMAXS (100) SCR_CPMAX1 - SCR_CPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_CPMEAN1 - SCR_CPMEAN100 SCR_CPMIN1 - SCR_CPMIN100 SCR_CPMAX1 - SCR_CPMAX100;
MPRINT(EM_ASSESS):   RETAIN SCR_BPMEAN1- SCR_BPMEAN100 0 SCR_BPMIN1 - SCR_BPMIN100 1 SCR_BPMAX1 - SCR_BPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMEANS (100) SCR_BPMEAN1 - SCR_BPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMINS (100) SCR_BPMIN1 - SCR_BPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMAXS (100) SCR_BPMAX1 - SCR_BPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_BPMEAN1 - SCR_BPMEAN100 SCR_BPMIN1 - SCR_BPMIN100 SCR_BPMAX1 - SCR_BPMAX100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
 
MPRINT(EM_ASSESS):   DROP WEIGHTEDORIG1 WEIGHTEDORIG0 ORIG0 ORIG1;
MPRINT(EM_ASSESS):   ORIG1 = _MEANTARGET * _FREQ_;
MPRINT(EM_ASSESS):   ORIG0 = (1 - _MEANTARGET) * _FREQ_;
MPRINT(EM_ASSESS):   WEIGHTEDORIG1 = ORIG1 * 0.05 / 0.2500469307 ;
MPRINT(EM_ASSESS):   WEIGHTEDORIG0 = ORIG0 * (1 - 0.05) / 0.7499530693 ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = SUM (WEIGHTEDORIG0 , WEIGHTEDORIG1);
MPRINT(EM_ASSESS):   IF SUMWEIGHTS > . THEN _MEANTARGET = WEIGHTEDORIG1 / SUMWEIGHTS;
MPRINT(EM_ASSESS):   ELSE _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   _FREQ_ = SUMWEIGHTS;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 10654));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_TARGET_B1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_TARGET_B1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_TARGET_B1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   EPTARGET (DECILE) = SUM ( EPTARGET (DECILE) , _MEANEPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINEPTARGET (DECILE) = MIN (MINEPTARGET (DECILE), _MEANEPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXEPTARGET (DECILE) = MAX (MAXEPTARGET (DECILE), _MEANEPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   CPTARGET (DECILE) = SUM ( CPTARGET (DECILE) , _MEANCPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINCPTARGET (DECILE) = MIN (MINCPTARGET (DECILE), _MEANCPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXCPTARGET (DECILE) = MAX (MAXCPTARGET (DECILE), _MEANCPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   BPTARGET (DECILE) = SUM ( BPTARGET (DECILE) , _MEANBPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINBPTARGET (DECILE) = MIN (MINBPTARGET (DECILE), _MEANBPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXBPTARGET (DECILE) = MAX (MAXBPTARGET (DECILE), _MEANBPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_TARGET_B1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_TARGET_B1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_TARGET_B1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_TARGET_B1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   D_TARGET_B = TRANSLATE (D_TARGET_B, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   IF D_TARGET_B = "0" THEN D_TARGET1 ( SLOT ) = SUM (D_TARGET1 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   IF D_TARGET_B = "1" THEN D_TARGET2 ( SLOT ) = SUM (D_TARGET2 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_TARGET_B1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_TARGET_B1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_TARGET_B1 );
MPRINT(EM_ASSESS):   SCR_EPMEANS ( SLOT ) = MEAN (SCR_EPMEANS (SLOT), _MEANEPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_EPMINS ( SLOT ) = MIN (SCR_EPMINS (SLOT), _MEANEPTARGET );
MPRINT(EM_ASSESS):   SCR_EPMAXS ( SLOT ) = MAX (SCR_EPMAXS (SLOT), _MEANEPTARGET );
MPRINT(EM_ASSESS):   SCR_CPMEANS ( SLOT ) = MEAN (SCR_CPMEANS (SLOT), _MEANCPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_CPMINS ( SLOT ) = MIN (SCR_CPMINS (SLOT), _MEANCPTARGET );
MPRINT(EM_ASSESS):   SCR_CPMAXS ( SLOT ) = MAX (SCR_CPMAXS (SLOT), _MEANCPTARGET );
MPRINT(EM_ASSESS):   SCR_BPMEANS ( SLOT ) = MEAN (SCR_BPMEANS (SLOT), _MEANBPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_BPMINS ( SLOT ) = MIN (SCR_BPMINS (SLOT), _MEANBPTARGET );
MPRINT(EM_ASSESS):   SCR_BPMAXS ( SLOT ) = MAX (SCR_BPMAXS (SLOT), _MEANBPTARGET );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0277224077 OVLMAX 0.0965039214 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   SUMEP = SUM (OF EPTARGET1 - EPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMEP ;
MPRINT(EM_ASSESS):   SUMCP = SUM (OF CPTARGET1 - CPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMCP ;
MPRINT(EM_ASSESS):   SUMBP = SUM (OF BPTARGET1 - BPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMBP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 10654 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 10654)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 10654 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 10654 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   TOTALEP_TARGET = EPTARGET (GROUP);
MPRINT(EM_ASSESS):   EP_TARGET = TOTALEP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALEP + EPTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVEEP = CUMULATIVETOTALEP / C_NUMOBS;
MPRINT(EM_ASSESS):   MINEP_TARGET = MINEPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXEP_TARGET = MAXEPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNEP_TARGET = EP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXEP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXEP_TARGET + MAXEP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMEP >= C_MAXEP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTEP = MAXEP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALEP = BESTEP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTEP = MIN (MAXEP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTEP < 0 THEN BESTEP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALEP = BESTEP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALEP + BESTTOTALEP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMEP - C_MAXEP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEEP = BESTCUMTOTALEP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEEP = SUMEP / 10654;
MPRINT(EM_ASSESS):   BASECUMULATIVEEP + BASEEP;
MPRINT(EM_ASSESS):   BASETOTALEP = SUMEP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALEP + BASETOTALEP;
MPRINT(EM_ASSESS):   TOTALCP_TARGET = CPTARGET (GROUP);
MPRINT(EM_ASSESS):   CP_TARGET = TOTALCP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALCP + CPTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVECP = CUMULATIVETOTALCP / C_NUMOBS;
MPRINT(EM_ASSESS):   MINCP_TARGET = MINCPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXCP_TARGET = MAXCPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNCP_TARGET = CP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXCP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXCP_TARGET + MAXCP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMCP >= C_MAXCP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTCP = MAXCP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALCP = BESTCP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTCP = MIN (MAXCP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTCP < 0 THEN BESTCP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALCP = BESTCP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALCP + BESTTOTALCP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMCP - C_MAXCP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVECP = BESTCUMTOTALCP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASECP = SUMCP / 10654;
MPRINT(EM_ASSESS):   BASECUMULATIVECP + BASECP;
MPRINT(EM_ASSESS):   BASETOTALCP = SUMCP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALCP + BASETOTALCP;
MPRINT(EM_ASSESS):   TOTALBP_TARGET = BPTARGET (GROUP);
MPRINT(EM_ASSESS):   BP_TARGET = TOTALBP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   MINBP_TARGET = MINBPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXBP_TARGET = MAXBPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNBP_TARGET = BP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXBP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXBP_TARGET + MAXBP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMBP >= C_MAXBP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTBP = MAXBP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALBP = BESTBP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTBP = MIN (MAXBP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTBP < 0 THEN BESTBP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALBP = BESTBP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALBP + BESTTOTALBP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMBP - C_MAXBP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEBP = BESTCUMTOTALBP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEBP = SUMBP / 10654;
MPRINT(EM_ASSESS):   BASECUMULATIVEBP + BASEBP;
MPRINT(EM_ASSESS):   BASETOTALBP = SUMBP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALBP + BASETOTALBP;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_96 - D_TARGET1_100);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_96 - D_TARGET2_100);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN96 - SCR_EPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN96 - SCR_EPMIN100);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX96 - SCR_EPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN96 - SCR_CPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN96 - SCR_CPMIN100);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX96 - SCR_CPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN96 - SCR_BPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN96 - SCR_BPMIN100);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX96 - SCR_BPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_91 - D_TARGET1_95);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_91 - D_TARGET2_95);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN91 - SCR_EPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN91 - SCR_EPMIN95);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX91 - SCR_EPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN91 - SCR_CPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN91 - SCR_CPMIN95);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX91 - SCR_CPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN91 - SCR_BPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN91 - SCR_BPMIN95);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX91 - SCR_BPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_86 - D_TARGET1_90);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_86 - D_TARGET2_90);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN86 - SCR_EPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN86 - SCR_EPMIN90);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX86 - SCR_EPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN86 - SCR_CPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN86 - SCR_CPMIN90);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX86 - SCR_CPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN86 - SCR_BPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN86 - SCR_BPMIN90);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX86 - SCR_BPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_81 - D_TARGET1_85);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_81 - D_TARGET2_85);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN81 - SCR_EPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN81 - SCR_EPMIN85);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX81 - SCR_EPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN81 - SCR_CPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN81 - SCR_CPMIN85);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX81 - SCR_CPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN81 - SCR_BPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN81 - SCR_BPMIN85);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX81 - SCR_BPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_76 - D_TARGET1_80);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_76 - D_TARGET2_80);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN76 - SCR_EPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN76 - SCR_EPMIN80);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX76 - SCR_EPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN76 - SCR_CPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN76 - SCR_CPMIN80);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX76 - SCR_CPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN76 - SCR_BPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN76 - SCR_BPMIN80);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX76 - SCR_BPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_71 - D_TARGET1_75);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_71 - D_TARGET2_75);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN71 - SCR_EPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN71 - SCR_EPMIN75);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX71 - SCR_EPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN71 - SCR_CPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN71 - SCR_CPMIN75);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX71 - SCR_CPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN71 - SCR_BPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN71 - SCR_BPMIN75);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX71 - SCR_BPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_66 - D_TARGET1_70);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_66 - D_TARGET2_70);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN66 - SCR_EPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN66 - SCR_EPMIN70);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX66 - SCR_EPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN66 - SCR_CPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN66 - SCR_CPMIN70);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX66 - SCR_CPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN66 - SCR_BPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN66 - SCR_BPMIN70);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX66 - SCR_BPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_61 - D_TARGET1_65);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_61 - D_TARGET2_65);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN61 - SCR_EPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN61 - SCR_EPMIN65);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX61 - SCR_EPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN61 - SCR_CPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN61 - SCR_CPMIN65);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX61 - SCR_CPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN61 - SCR_BPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN61 - SCR_BPMIN65);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX61 - SCR_BPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_56 - D_TARGET1_60);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_56 - D_TARGET2_60);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN56 - SCR_EPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN56 - SCR_EPMIN60);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX56 - SCR_EPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN56 - SCR_CPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN56 - SCR_CPMIN60);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX56 - SCR_CPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN56 - SCR_BPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN56 - SCR_BPMIN60);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX56 - SCR_BPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_51 - D_TARGET1_55);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_51 - D_TARGET2_55);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN51 - SCR_EPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN51 - SCR_EPMIN55);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX51 - SCR_EPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN51 - SCR_CPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN51 - SCR_CPMIN55);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX51 - SCR_CPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN51 - SCR_BPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN51 - SCR_BPMIN55);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX51 - SCR_BPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_46 - D_TARGET1_50);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_46 - D_TARGET2_50);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN46 - SCR_EPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN46 - SCR_EPMIN50);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX46 - SCR_EPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN46 - SCR_CPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN46 - SCR_CPMIN50);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX46 - SCR_CPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN46 - SCR_BPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN46 - SCR_BPMIN50);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX46 - SCR_BPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_41 - D_TARGET1_45);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_41 - D_TARGET2_45);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN41 - SCR_EPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN41 - SCR_EPMIN45);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX41 - SCR_EPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN41 - SCR_CPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN41 - SCR_CPMIN45);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX41 - SCR_CPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN41 - SCR_BPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN41 - SCR_BPMIN45);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX41 - SCR_BPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_36 - D_TARGET1_40);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_36 - D_TARGET2_40);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN36 - SCR_EPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN36 - SCR_EPMIN40);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX36 - SCR_EPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN36 - SCR_CPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN36 - SCR_CPMIN40);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX36 - SCR_CPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN36 - SCR_BPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN36 - SCR_BPMIN40);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX36 - SCR_BPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_31 - D_TARGET1_35);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_31 - D_TARGET2_35);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN31 - SCR_EPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN31 - SCR_EPMIN35);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX31 - SCR_EPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN31 - SCR_CPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN31 - SCR_CPMIN35);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX31 - SCR_CPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN31 - SCR_BPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN31 - SCR_BPMIN35);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX31 - SCR_BPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_26 - D_TARGET1_30);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_26 - D_TARGET2_30);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN26 - SCR_EPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN26 - SCR_EPMIN30);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX26 - SCR_EPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN26 - SCR_CPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN26 - SCR_CPMIN30);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX26 - SCR_CPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN26 - SCR_BPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN26 - SCR_BPMIN30);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX26 - SCR_BPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_21 - D_TARGET1_25);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_21 - D_TARGET2_25);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN21 - SCR_EPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN21 - SCR_EPMIN25);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX21 - SCR_EPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN21 - SCR_CPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN21 - SCR_CPMIN25);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX21 - SCR_CPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN21 - SCR_BPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN21 - SCR_BPMIN25);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX21 - SCR_BPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_16 - D_TARGET1_20);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_16 - D_TARGET2_20);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN16 - SCR_EPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN16 - SCR_EPMIN20);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX16 - SCR_EPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN16 - SCR_CPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN16 - SCR_CPMIN20);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX16 - SCR_CPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN16 - SCR_BPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN16 - SCR_BPMIN20);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX16 - SCR_BPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_11 - D_TARGET1_15);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_11 - D_TARGET2_15);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN11 - SCR_EPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN11 - SCR_EPMIN15);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX11 - SCR_EPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN11 - SCR_CPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN11 - SCR_CPMIN15);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX11 - SCR_CPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN11 - SCR_BPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN11 - SCR_BPMIN15);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX11 - SCR_BPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_6 - D_TARGET1_10);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_6 - D_TARGET2_10);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN6 - SCR_EPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN6 - SCR_EPMIN10);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX6 - SCR_EPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN6 - SCR_CPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN6 - SCR_CPMIN10);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX6 - SCR_CPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN6 - SCR_BPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN6 - SCR_BPMIN10);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX6 - SCR_BPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_1 - D_TARGET1_5);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_1 - D_TARGET2_5);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN1 - SCR_EPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN1 - SCR_EPMIN5);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX1 - SCR_EPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN1 - SCR_CPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN1 - SCR_CPMIN5);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX1 - SCR_CPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN1 - SCR_BPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN1 - SCR_BPMIN5);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX1 - SCR_BPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 10654;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS SCR_EPMEAN =
_MEANEP_ SCR_EPMAX = _MAXEP_ SCR_EPMIN = _MINEP_ SCR_CPMEAN = _MEANCP_ SCR_CPMAX = _MAXCP_
SCR_CPMIN = _MINCP_ NUMDECISION1 = D_TARGET_B_1 NUMDECISION2 = D_TARGET_B_2 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" _MEANCP_ =
"Mean Computed Profit" _MAXCP_ = "Max Computed Profit" _MINCP_ = "Min Computed Profit" _MAXEP_
= "Expected profit: upper bound" _MINEP_ = "Expected profit: lower bound" _MEANEP_ = "Mean
Expected Profit" D_TARGET_B_1 = "Report: Number of Decisions = 1" D_TARGET_B_2 = "Report:
Number of Decisions = 2" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC
BASECP = BASEPROFIT BASECUMTOTALCP = BASECUMULATIVETOTALPROFIT BASECUMULATIVECP =
BASECUMULATIVEPROFIT MAXCP_TARGET = _MAXCP_ MNCP_TARGET = _MEANCP_ MINCP_TARGET = _MINCP_
BASETOTALCP = BASETOTALPROFIT CUMULATIVECP = AVGCUMULATIVEPROFIT CUMULATIVETOTALCP=
CUMULATIVETOTALPROFIT CP_TARGET = PROFIT TOTALCP_TARGET = TOTALPROFIT MAXEP_TARGET = _MAXEP_
MINEP_TARGET = _MINEP_ MNEP_TARGET = _MEANEP_ CUMULATIVEEP = CUMULATIVEEXPECTEDPROFIT
CUMULATIVETOTALEP= CUMULATIVETOTALEXPPROFIT TOTALEP_TARGET = TOTALEXPPROFIT BESTBP =
BESTPROFIT BESTCUMTOTALBP = BESTCUMULATIVETOTALPROFIT BESTCUMULATIVEBP = BESTCUMULATIVEPROFIT
BESTTOTALBP = BESTTOTALPROFIT ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MEANCP_ = "Mean Computed Profit" _MAXCP_ = "Max Computed Profit"
_MINCP_ = "Min Computed Profit" AVGCUMULATIVEPROFIT = "Average Cumulative Computed Profit"
CUMULATIVETOTALPROFIT = "Cumulative Total Computed Profit" BESTTOTALPROFIT = "Best Total
Profit" BESTPROFIT = "Best Profit" BASEPROFIT = "Baseline Profit" BASECUMULATIVEPROFIT =
"Baseline Cumulative Profit" BASECUMULATIVETOTALPROFIT = "Baseline Cumulative Total Profit"
BASEPROFIT = "Baseline Profit" BASETOTALPROFIT = "Baseline Total Profit" BESTCUMULATIVEPROFIT
= "Best Cumulative Profit" BESTCUMULATIVETOTALPROFIT = "Best Cumulative Total Profit" PROFIT =
"Average Computed Profit" TOTALPROFIT = "Total Computed Profit" _MEANEP_ = "Mean Expected
Profit" _MINEP_ = "Min Expected Profit" _MAXEP_ = "Max Expected Profit"
CUMULATIVETOTALEXPPROFIT = "Cumulative Total Expected Profit" CUMULATIVEEXPECTEDPROFIT =
"Cumulative Expected Profit" TOTALEXPPROFIT = "Total Expected Profit" _MAXP_ = "Max Posterior
Probability" _MINP_ = "Min Posterior Probability" _MEANP_ = "Mean Posterior Probability"
BASECAP = "Baseline % Captured Response" BASECAPC = "Baseline Cumulative % Captured Response"
BASENUMBEROFEVENTS = "Baseline Number of Events" BASEGAIN = "Baseline Gain" BASELIFT =
"Baseline Lift" BASELIFTC = "Baseline Cumulative Lift" BASERESP = "Baseline % Response"
BASERESPC = "Baseline Cumulative % Response" BASELIFTC = "Baseline Cumulative Lift" BESTCAP =
"Best % Captured Response" BESTCAPC = "Best Cumulative % Captured Response" BESTGAIN = "Best
Gain" BESTRESP = "Best % Response" BESTRESPC = "Best Cumulative % Response" BESTLIFT = "Best
Lift" BESTLIFTC = "Best Cumulative Lift" BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "%
Captured Response" CAPC = "Cumulative % Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT
= "Lift" LIFTC = "Cumulative Lift" NUMNEVENT = "Number of Nonevents" N = "Number of
Observations" EVENT = "Event" RESPC = "Cumulative % Response" NUMBEROFEVENTS = "Number of
Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "TARGET_B";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'Target Variable Indicates for Response to 97NK
Mailing';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "TARGET_B";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'Target Variable Indicates for Response to 97NK
Mailing';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
27012      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
27013      set EMWS1.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_CMeta_TRAIN;
27014      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
27014    ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
27015      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.REG_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27016      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
27017      set EMWS1.Reg_VALIDATE(keep=
27018      BP_TARGET_B
27019      CP_TARGET_B
27020      D_TARGET_B
27021      EP_TARGET_B
27022      F_TARGET_B
27023      I_TARGET_B
27024      P_TARGET_B0
27025      P_TARGET_B1
27026      R_TARGET_B0
27027      R_TARGET_B1
27028      U_TARGET_B
27029      _WARN_
27030      TARGET_B
27031      );
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_VALIDATE(keep= BP_TARGET_B CP_TARGET_B D_TARGET_B
EP_TARGET_B F_TARGET_B I_TARGET_B P_TARGET_B0 P_TARGET_B1 R_TARGET_B0 R_TARGET_B1 U_TARGET_B
_WARN_ TARGET_B );
27032      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 8718 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 8718 observations read from the data set EMWS1.REPL_VALIDATE.
NOTE: There were 8718 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: View EMWS1.REG_VALIDATE.VIEW used (Total process time):
      real time           0.37 seconds
      cpu time            0.36 seconds
 
NOTE: There were 8718 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: There were 8718 observations read from the data set EMWS1.REG_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 8718 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.38 seconds
      cpu time            0.37 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_TARGET_B*F_TARGET_B / out = WORK.Reg_3SSW__0 nocol norow outpct;
MPRINT(EM_DIAGRAM):   table D_TARGET_B*F_TARGET_B / out = WORK.Reg_33LP2A5 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_3SSW__0;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg_3SSW__0(rename=(F_TARGET_B=FROM I_TARGET_B=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "TARGET_B";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "TARGET_B" then TARGETLABEL = 'Target Variable
Indicates for Response to 97NK Mailing';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.Reg_3SSW__0;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Reg_3SSW__0;
MPRINT(EM_DIAGRAM):   merge WORK.Reg_3SSW__0 _prioradjust1;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   ADJUSTEDPERCENT = PERCENT*ADJUSTMENT;
MPRINT(EM_DIAGRAM):   label ADJUSTEDPERCENT = "Adjusted Percent of Predict/Decision Variable";
MPRINT(EM_DIAGRAM):   drop ADJUSTMENT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMCLASSIFICATION WORK.Reg_3SSW__0;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg_3SSW__0;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_33LP2A5;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 dataRole target $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $9;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg_33LP2A5(rename=(F_TARGET_B=FROM D_TARGET_B=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'DECISION' DATAROLE "VALIDATE" TARGET "TARGET_B";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "TARGET_B" then TARGETLABEL = 'Target Variable
Indicates for Response to 97NK Mailing';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.Reg_33LP2A5;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Reg_33LP2A5;
MPRINT(EM_DIAGRAM):   merge WORK.Reg_33LP2A5 _prioradjust1;
MPRINT(EM_DIAGRAM):   by FROM;
MPRINT(EM_DIAGRAM):   AdjustedPercent = Percent*Adjustment;
MPRINT(EM_DIAGRAM):   label ADJUSTEDPERCENT = "Adjusted Percent of Predict/Decision Variable";
MPRINT(EM_DIAGRAM):   drop Adjustment;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMCLASSIFICATION WORK.Reg_33LP2A5;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "TARGET_B" then TARGETLABEL = 'Target Variable
Indicates for Response to 97NK Mailing';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_TARGET_B_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_TARGET_B_DD;
MPRINT(EM_DIAGRAM):   where strip(TARGET_B)=strip(symget('ASSMT_EVENT'));
MPRINT(EM_DIAGRAM):   call symput('DECPRIOR', strip(put(DECPRIOR, best.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_TARGET_B") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_TARGET_B") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_TARGET_B D_TARGET_B ;
 
MPRINT(EM_ASSESS):   VAR P_TARGET_B1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_TARGET_B") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "D_TARGET_B" > " " AND UPCASE(NAME) = UPCASE("D_TARGET_B") THEN
DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_TARGET_B1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_TARGET_B P_TARGET_B1 EP_TARGET_B CP_TARGET_B
BP_TARGET_B _tmpfreqvar_ D_TARGET_B );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_TARGET_B ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_TARGET_B1 D_TARGET_B NTARGET
_tmpfreqvar_ EP_TARGET_B CP_TARGET_B BP_TARGET_B WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_TARGET_B1 D_TARGET_B ;
MPRINT(EM_ASSESS):   VAR NTARGET EP_TARGET_B CP_TARGET_B BP_TARGET_B ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANEPTARGET
_MEANCPTARGET _MEANBPTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP MNEP_TARGET
MINEP_TARGET MAXEP_TARGET TOTALEP_TARGET CUMULATIVEEP CUMULATIVETOTALEP MNCP_TARGET
MINCP_TARGET MAXCP_TARGET CP_TARGET TOTALCP_TARGET CUMULATIVECP CUMULATIVETOTALCP BASECP
BASECUMTOTALCP BASECUMULATIVECP BASETOTALCP BESTTOTALBP BESTCUMULATIVEBP BESTCUMTOTALBP BESTBP
) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE
SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS NUMDECISION1 NUMDECISION2 SCR_MNPROB
SCR_MINPROB SCR_MAXPROB SCR_EPMEAN SCR_EPMIN SCR_EPMAX SCR_CPMEAN SCR_CPMIN SCR_CPMAX ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 CUMPROFIT1 - CUMPROFIT20 0 CUMBPROFIT1 -
CUMBPROFIT20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 FALSEPOS1 - FALSEPOS100 0
FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - NONEVENTS100 0 FIRSTIN1 -
FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.05 _NEVENTS 435.9 _NNONEVENTS 8282.1 TARGET
"NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   RETAIN EPTARGET1 - EPTARGET20 0 MINEPTARGET1 - MINEPTARGET20 0
MAXEPTARGET1 - MAXEPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY EPTARGET (20) EPTARGET1 - EPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINEPTARGET (20) MINEPTARGET1 - MINEPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXEPTARGET (20) MAXEPTARGET1 - MAXEPTARGET20;
MPRINT(EM_ASSESS):   DROP EPTARGET1 - EPTARGET20 _MEANEPTARGET MINEPTARGET1 - MINEPTARGET20
MAXEPTARGET1 - MAXEPTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN CPTARGET1 - CPTARGET20 0 MINCPTARGET1 - MINCPTARGET20 0
MAXCPTARGET1 - MAXCPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY CPTARGET (20) CPTARGET1 - CPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINCPTARGET (20) MINCPTARGET1 - MINCPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXCPTARGET (20) MAXCPTARGET1 - MAXCPTARGET20;
MPRINT(EM_ASSESS):   DROP CPTARGET1 - CPTARGET20 _MEANCPTARGET MINCPTARGET1 - MINCPTARGET20
MAXCPTARGET1 - MAXCPTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN BPTARGET1 - BPTARGET20 0 MINBPTARGET1 - MINBPTARGET20 0
MAXBPTARGET1 - MAXBPTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY BPTARGET (20) BPTARGET1 - BPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINBPTARGET (20) MINBPTARGET1 - MINBPTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXBPTARGET (20) MAXBPTARGET1 - MAXBPTARGET20;
MPRINT(EM_ASSESS):   DROP BPTARGET1 - BPTARGET20 _MEANBPTARGET MINBPTARGET1 - MINBPTARGET20
MAXBPTARGET1 - MAXBPTARGET20 ;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   RETAIN D_TARGET1_1 - D_TARGET1_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET1 (100) D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   DROP D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   RETAIN D_TARGET2_1 - D_TARGET2_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET2 (100) D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   DROP D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN SCR_EPMEAN1- SCR_EPMEAN100 0 SCR_EPMIN1 - SCR_EPMIN100 1
SCR_EPMAX1 - SCR_EPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMEANS (100) SCR_EPMEAN1 - SCR_EPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMINS (100) SCR_EPMIN1 - SCR_EPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_EPMAXS (100) SCR_EPMAX1 - SCR_EPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_EPMEAN1 - SCR_EPMEAN100 SCR_EPMIN1 - SCR_EPMIN100 SCR_EPMAX1 -
SCR_EPMAX100;
MPRINT(EM_ASSESS):   RETAIN SCR_CPMEAN1- SCR_CPMEAN100 0 SCR_CPMIN1 - SCR_CPMIN100 1
SCR_CPMAX1 - SCR_CPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMEANS (100) SCR_CPMEAN1 - SCR_CPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMINS (100) SCR_CPMIN1 - SCR_CPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_CPMAXS (100) SCR_CPMAX1 - SCR_CPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_CPMEAN1 - SCR_CPMEAN100 SCR_CPMIN1 - SCR_CPMIN100 SCR_CPMAX1 -
SCR_CPMAX100;
MPRINT(EM_ASSESS):   RETAIN SCR_BPMEAN1- SCR_BPMEAN100 0 SCR_BPMIN1 - SCR_BPMIN100 1
SCR_BPMAX1 - SCR_BPMAX100 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMEANS (100) SCR_BPMEAN1 - SCR_BPMEAN100;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMINS (100) SCR_BPMIN1 - SCR_BPMIN100;
MPRINT(EM_ASSESS):   ARRAY SCR_BPMAXS (100) SCR_BPMAX1 - SCR_BPMAX100;
MPRINT(EM_ASSESS):   DROP SCR_BPMEAN1 - SCR_BPMEAN100 SCR_BPMIN1 - SCR_BPMIN100 SCR_BPMAX1 -
SCR_BPMAX100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
 
MPRINT(EM_ASSESS):   DROP WEIGHTEDORIG1 WEIGHTEDORIG0 ORIG0 ORIG1;
MPRINT(EM_ASSESS):   ORIG1 = _MEANTARGET * _FREQ_;
MPRINT(EM_ASSESS):   ORIG0 = (1 - _MEANTARGET) * _FREQ_;
MPRINT(EM_ASSESS):   WEIGHTEDORIG1 = ORIG1 * 0.05 / 0.2499426474 ;
MPRINT(EM_ASSESS):   WEIGHTEDORIG0 = ORIG0 * (1 - 0.05) / 0.7500573526 ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = SUM (WEIGHTEDORIG0 , WEIGHTEDORIG1);
MPRINT(EM_ASSESS):   IF SUMWEIGHTS > . THEN _MEANTARGET = WEIGHTEDORIG1 / SUMWEIGHTS;
MPRINT(EM_ASSESS):   ELSE _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   _FREQ_ = SUMWEIGHTS;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 8718));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_TARGET_B1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_TARGET_B1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_TARGET_B1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   EPTARGET (DECILE) = SUM ( EPTARGET (DECILE) , _MEANEPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINEPTARGET (DECILE) = MIN (MINEPTARGET (DECILE), _MEANEPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   MAXEPTARGET (DECILE) = MAX (MAXEPTARGET (DECILE), _MEANEPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   CPTARGET (DECILE) = SUM ( CPTARGET (DECILE) , _MEANCPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINCPTARGET (DECILE) = MIN (MINCPTARGET (DECILE), _MEANCPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   MAXCPTARGET (DECILE) = MAX (MAXCPTARGET (DECILE), _MEANCPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   BPTARGET (DECILE) = SUM ( BPTARGET (DECILE) , _MEANBPTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINBPTARGET (DECILE) = MIN (MINBPTARGET (DECILE), _MEANBPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   MAXBPTARGET (DECILE) = MAX (MAXBPTARGET (DECILE), _MEANBPTARGET *
_WEIGHT);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_TARGET_B1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_TARGET_B1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_TARGET_B1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_TARGET_B1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   D_TARGET_B = TRANSLATE (D_TARGET_B, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   IF D_TARGET_B = "0" THEN D_TARGET1 ( SLOT ) = SUM (D_TARGET1 (SLOT) ,
_FREQ_ );
MPRINT(EM_ASSESS):   IF D_TARGET_B = "1" THEN D_TARGET2 ( SLOT ) = SUM (D_TARGET2 (SLOT) ,
_FREQ_ );
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_TARGET_B1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_TARGET_B1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_TARGET_B1 );
MPRINT(EM_ASSESS):   SCR_EPMEANS ( SLOT ) = MEAN (SCR_EPMEANS (SLOT), _MEANEPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_EPMINS ( SLOT ) = MIN (SCR_EPMINS (SLOT), _MEANEPTARGET );
MPRINT(EM_ASSESS):   SCR_EPMAXS ( SLOT ) = MAX (SCR_EPMAXS (SLOT), _MEANEPTARGET );
MPRINT(EM_ASSESS):   SCR_CPMEANS ( SLOT ) = MEAN (SCR_CPMEANS (SLOT), _MEANCPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_CPMINS ( SLOT ) = MIN (SCR_CPMINS (SLOT), _MEANCPTARGET );
MPRINT(EM_ASSESS):   SCR_CPMAXS ( SLOT ) = MAX (SCR_CPMAXS (SLOT), _MEANCPTARGET );
MPRINT(EM_ASSESS):   SCR_BPMEANS ( SLOT ) = MEAN (SCR_BPMEANS (SLOT), _MEANBPTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_BPMINS ( SLOT ) = MIN (SCR_BPMINS (SLOT), _MEANBPTARGET );
MPRINT(EM_ASSESS):   SCR_BPMAXS ( SLOT ) = MAX (SCR_BPMAXS (SLOT), _MEANBPTARGET );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0277224077 OVLMAX 0.0965039214 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   SUMEP = SUM (OF EPTARGET1 - EPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMEP ;
MPRINT(EM_ASSESS):   SUMCP = SUM (OF CPTARGET1 - CPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMCP ;
MPRINT(EM_ASSESS):   SUMBP = SUM (OF BPTARGET1 - BPTARGET20);
MPRINT(EM_ASSESS):   DROP SUMBP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 8718 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 8718)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 8718 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 8718 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   TOTALEP_TARGET = EPTARGET (GROUP);
MPRINT(EM_ASSESS):   EP_TARGET = TOTALEP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALEP + EPTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVEEP = CUMULATIVETOTALEP / C_NUMOBS;
MPRINT(EM_ASSESS):   MINEP_TARGET = MINEPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXEP_TARGET = MAXEPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNEP_TARGET = EP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXEP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXEP_TARGET + MAXEP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMEP >= C_MAXEP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTEP = MAXEP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALEP = BESTEP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTEP = MIN (MAXEP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTEP < 0 THEN BESTEP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALEP = BESTEP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALEP + BESTTOTALEP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMEP - C_MAXEP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEEP = BESTCUMTOTALEP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEEP = SUMEP / 8718;
MPRINT(EM_ASSESS):   BASECUMULATIVEEP + BASEEP;
MPRINT(EM_ASSESS):   BASETOTALEP = SUMEP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALEP + BASETOTALEP;
MPRINT(EM_ASSESS):   TOTALCP_TARGET = CPTARGET (GROUP);
MPRINT(EM_ASSESS):   CP_TARGET = TOTALCP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALCP + CPTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVECP = CUMULATIVETOTALCP / C_NUMOBS;
MPRINT(EM_ASSESS):   MINCP_TARGET = MINCPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXCP_TARGET = MAXCPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNCP_TARGET = CP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXCP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXCP_TARGET + MAXCP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMCP >= C_MAXCP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTCP = MAXCP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALCP = BESTCP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTCP = MIN (MAXCP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTCP < 0 THEN BESTCP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALCP = BESTCP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALCP + BESTTOTALCP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMCP - C_MAXCP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVECP = BESTCUMTOTALCP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASECP = SUMCP / 8718;
MPRINT(EM_ASSESS):   BASECUMULATIVECP + BASECP;
MPRINT(EM_ASSESS):   BASETOTALCP = SUMCP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALCP + BASETOTALCP;
MPRINT(EM_ASSESS):   TOTALBP_TARGET = BPTARGET (GROUP);
MPRINT(EM_ASSESS):   BP_TARGET = TOTALBP_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   MINBP_TARGET = MINBPTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXBP_TARGET = MAXBPTARGET (GROUP);
MPRINT(EM_ASSESS):   MNBP_TARGET = BP_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXBP_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXBP_TARGET + MAXBP_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMBP >= C_MAXBP_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTBP = MAXBP_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALBP = BESTBP * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTBP = MIN (MAXBP_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTBP < 0 THEN BESTBP = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALBP = BESTBP * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALBP + BESTTOTALBP;
MPRINT(EM_ASSESS):   LEFTOVER = SUMBP - C_MAXBP_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEBP = BESTCUMTOTALBP / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEBP = SUMBP / 8718;
MPRINT(EM_ASSESS):   BASECUMULATIVEBP + BASEBP;
MPRINT(EM_ASSESS):   BASETOTALBP = SUMBP / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALBP + BASETOTALBP;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_96 - D_TARGET1_100);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_96 - D_TARGET2_100);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN96 - SCR_EPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN96 - SCR_EPMIN100);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX96 - SCR_EPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN96 - SCR_CPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN96 - SCR_CPMIN100);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX96 - SCR_CPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN96 - SCR_BPMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN96 - SCR_BPMIN100);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX96 - SCR_BPMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_91 - D_TARGET1_95);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_91 - D_TARGET2_95);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN91 - SCR_EPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN91 - SCR_EPMIN95);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX91 - SCR_EPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN91 - SCR_CPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN91 - SCR_CPMIN95);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX91 - SCR_CPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN91 - SCR_BPMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN91 - SCR_BPMIN95);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX91 - SCR_BPMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_86 - D_TARGET1_90);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_86 - D_TARGET2_90);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN86 - SCR_EPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN86 - SCR_EPMIN90);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX86 - SCR_EPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN86 - SCR_CPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN86 - SCR_CPMIN90);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX86 - SCR_CPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN86 - SCR_BPMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN86 - SCR_BPMIN90);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX86 - SCR_BPMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_81 - D_TARGET1_85);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_81 - D_TARGET2_85);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN81 - SCR_EPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN81 - SCR_EPMIN85);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX81 - SCR_EPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN81 - SCR_CPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN81 - SCR_CPMIN85);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX81 - SCR_CPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN81 - SCR_BPMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN81 - SCR_BPMIN85);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX81 - SCR_BPMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_76 - D_TARGET1_80);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_76 - D_TARGET2_80);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN76 - SCR_EPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN76 - SCR_EPMIN80);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX76 - SCR_EPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN76 - SCR_CPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN76 - SCR_CPMIN80);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX76 - SCR_CPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN76 - SCR_BPMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN76 - SCR_BPMIN80);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX76 - SCR_BPMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_71 - D_TARGET1_75);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_71 - D_TARGET2_75);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN71 - SCR_EPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN71 - SCR_EPMIN75);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX71 - SCR_EPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN71 - SCR_CPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN71 - SCR_CPMIN75);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX71 - SCR_CPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN71 - SCR_BPMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN71 - SCR_BPMIN75);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX71 - SCR_BPMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_66 - D_TARGET1_70);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_66 - D_TARGET2_70);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN66 - SCR_EPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN66 - SCR_EPMIN70);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX66 - SCR_EPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN66 - SCR_CPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN66 - SCR_CPMIN70);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX66 - SCR_CPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN66 - SCR_BPMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN66 - SCR_BPMIN70);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX66 - SCR_BPMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_61 - D_TARGET1_65);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_61 - D_TARGET2_65);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN61 - SCR_EPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN61 - SCR_EPMIN65);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX61 - SCR_EPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN61 - SCR_CPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN61 - SCR_CPMIN65);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX61 - SCR_CPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN61 - SCR_BPMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN61 - SCR_BPMIN65);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX61 - SCR_BPMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_56 - D_TARGET1_60);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_56 - D_TARGET2_60);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN56 - SCR_EPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN56 - SCR_EPMIN60);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX56 - SCR_EPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN56 - SCR_CPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN56 - SCR_CPMIN60);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX56 - SCR_CPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN56 - SCR_BPMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN56 - SCR_BPMIN60);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX56 - SCR_BPMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_51 - D_TARGET1_55);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_51 - D_TARGET2_55);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN51 - SCR_EPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN51 - SCR_EPMIN55);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX51 - SCR_EPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN51 - SCR_CPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN51 - SCR_CPMIN55);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX51 - SCR_CPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN51 - SCR_BPMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN51 - SCR_BPMIN55);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX51 - SCR_BPMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_46 - D_TARGET1_50);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_46 - D_TARGET2_50);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN46 - SCR_EPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN46 - SCR_EPMIN50);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX46 - SCR_EPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN46 - SCR_CPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN46 - SCR_CPMIN50);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX46 - SCR_CPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN46 - SCR_BPMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN46 - SCR_BPMIN50);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX46 - SCR_BPMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_41 - D_TARGET1_45);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_41 - D_TARGET2_45);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN41 - SCR_EPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN41 - SCR_EPMIN45);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX41 - SCR_EPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN41 - SCR_CPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN41 - SCR_CPMIN45);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX41 - SCR_CPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN41 - SCR_BPMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN41 - SCR_BPMIN45);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX41 - SCR_BPMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_36 - D_TARGET1_40);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_36 - D_TARGET2_40);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN36 - SCR_EPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN36 - SCR_EPMIN40);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX36 - SCR_EPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN36 - SCR_CPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN36 - SCR_CPMIN40);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX36 - SCR_CPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN36 - SCR_BPMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN36 - SCR_BPMIN40);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX36 - SCR_BPMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_31 - D_TARGET1_35);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_31 - D_TARGET2_35);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN31 - SCR_EPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN31 - SCR_EPMIN35);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX31 - SCR_EPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN31 - SCR_CPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN31 - SCR_CPMIN35);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX31 - SCR_CPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN31 - SCR_BPMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN31 - SCR_BPMIN35);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX31 - SCR_BPMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_26 - D_TARGET1_30);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_26 - D_TARGET2_30);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN26 - SCR_EPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN26 - SCR_EPMIN30);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX26 - SCR_EPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN26 - SCR_CPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN26 - SCR_CPMIN30);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX26 - SCR_CPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN26 - SCR_BPMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN26 - SCR_BPMIN30);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX26 - SCR_BPMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_21 - D_TARGET1_25);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_21 - D_TARGET2_25);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN21 - SCR_EPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN21 - SCR_EPMIN25);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX21 - SCR_EPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN21 - SCR_CPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN21 - SCR_CPMIN25);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX21 - SCR_CPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN21 - SCR_BPMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN21 - SCR_BPMIN25);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX21 - SCR_BPMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_16 - D_TARGET1_20);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_16 - D_TARGET2_20);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN16 - SCR_EPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN16 - SCR_EPMIN20);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX16 - SCR_EPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN16 - SCR_CPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN16 - SCR_CPMIN20);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX16 - SCR_CPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN16 - SCR_BPMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN16 - SCR_BPMIN20);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX16 - SCR_BPMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_11 - D_TARGET1_15);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_11 - D_TARGET2_15);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN11 - SCR_EPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN11 - SCR_EPMIN15);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX11 - SCR_EPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN11 - SCR_CPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN11 - SCR_CPMIN15);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX11 - SCR_CPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN11 - SCR_BPMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN11 - SCR_BPMIN15);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX11 - SCR_BPMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_6 - D_TARGET1_10);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_6 - D_TARGET2_10);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN6 - SCR_EPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN6 - SCR_EPMIN10);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX6 - SCR_EPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN6 - SCR_CPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN6 - SCR_CPMIN10);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX6 - SCR_CPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN6 - SCR_BPMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN6 - SCR_BPMIN10);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX6 - SCR_BPMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_1 - D_TARGET1_5);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_1 - D_TARGET2_5);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = SUM (OF SCR_EPMEAN1 - SCR_EPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_EPMIN = MIN (OF SCR_EPMIN1 - SCR_EPMIN5);
MPRINT(EM_ASSESS):   SCR_EPMAX = MAX (OF SCR_EPMAX1 - SCR_EPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_EPMEAN = .;
MPRINT(EM_ASSESS):   SCR_EPMIN = .;
MPRINT(EM_ASSESS):   SCR_EPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = SUM (OF SCR_CPMEAN1 - SCR_CPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CPMIN = MIN (OF SCR_CPMIN1 - SCR_CPMIN5);
MPRINT(EM_ASSESS):   SCR_CPMAX = MAX (OF SCR_CPMAX1 - SCR_CPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CPMEAN = .;
MPRINT(EM_ASSESS):   SCR_CPMIN = .;
MPRINT(EM_ASSESS):   SCR_CPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = SUM (OF SCR_BPMEAN1 - SCR_BPMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BPMIN = MIN (OF SCR_BPMIN1 - SCR_BPMIN5);
MPRINT(EM_ASSESS):   SCR_BPMAX = MAX (OF SCR_BPMAX1 - SCR_BPMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BPMEAN = .;
MPRINT(EM_ASSESS):   SCR_BPMIN = .;
MPRINT(EM_ASSESS):   SCR_BPMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 8718;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS SCR_EPMEAN =
_MEANEP_ SCR_EPMAX = _MAXEP_ SCR_EPMIN = _MINEP_ SCR_CPMEAN = _MEANCP_ SCR_CPMAX = _MAXCP_
SCR_CPMIN = _MINCP_ NUMDECISION1 = D_TARGET_B_1 NUMDECISION2 = D_TARGET_B_2 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" _MEANCP_ =
"Mean Computed Profit" _MAXCP_ = "Max Computed Profit" _MINCP_ = "Min Computed Profit" _MAXEP_
= "Expected profit: upper bound" _MINEP_ = "Expected profit: lower bound" _MEANEP_ = "Mean
Expected Profit" D_TARGET_B_1 = "Report: Number of Decisions = 1" D_TARGET_B_2 = "Report:
Number of Decisions = 2" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC
BASECP = BASEPROFIT BASECUMTOTALCP = BASECUMULATIVETOTALPROFIT BASECUMULATIVECP =
BASECUMULATIVEPROFIT MAXCP_TARGET = _MAXCP_ MNCP_TARGET = _MEANCP_ MINCP_TARGET = _MINCP_
BASETOTALCP = BASETOTALPROFIT CUMULATIVECP = AVGCUMULATIVEPROFIT CUMULATIVETOTALCP=
CUMULATIVETOTALPROFIT CP_TARGET = PROFIT TOTALCP_TARGET = TOTALPROFIT MAXEP_TARGET = _MAXEP_
MINEP_TARGET = _MINEP_ MNEP_TARGET = _MEANEP_ CUMULATIVEEP = CUMULATIVEEXPECTEDPROFIT
CUMULATIVETOTALEP= CUMULATIVETOTALEXPPROFIT TOTALEP_TARGET = TOTALEXPPROFIT BESTBP =
BESTPROFIT BESTCUMTOTALBP = BESTCUMULATIVETOTALPROFIT BESTCUMULATIVEBP = BESTCUMULATIVEPROFIT
BESTTOTALBP = BESTTOTALPROFIT ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MEANCP_ = "Mean Computed Profit" _MAXCP_ = "Max Computed Profit"
_MINCP_ = "Min Computed Profit" AVGCUMULATIVEPROFIT = "Average Cumulative Computed Profit"
CUMULATIVETOTALPROFIT = "Cumulative Total Computed Profit" BESTTOTALPROFIT = "Best Total
Profit" BESTPROFIT = "Best Profit" BASEPROFIT = "Baseline Profit" BASECUMULATIVEPROFIT =
"Baseline Cumulative Profit" BASECUMULATIVETOTALPROFIT = "Baseline Cumulative Total Profit"
BASEPROFIT = "Baseline Profit" BASETOTALPROFIT = "Baseline Total Profit" BESTCUMULATIVEPROFIT
= "Best Cumulative Profit" BESTCUMULATIVETOTALPROFIT = "Best Cumulative Total Profit" PROFIT =
"Average Computed Profit" TOTALPROFIT = "Total Computed Profit" _MEANEP_ = "Mean Expected
Profit" _MINEP_ = "Min Expected Profit" _MAXEP_ = "Max Expected Profit"
CUMULATIVETOTALEXPPROFIT = "Cumulative Total Expected Profit" CUMULATIVEEXPECTEDPROFIT =
"Cumulative Expected Profit" TOTALEXPPROFIT = "Total Expected Profit" _MAXP_ = "Max Posterior
Probability" _MINP_ = "Min Posterior Probability" _MEANP_ = "Mean Posterior Probability"
BASECAP = "Baseline % Captured Response" BASECAPC = "Baseline Cumulative % Captured Response"
BASENUMBEROFEVENTS = "Baseline Number of Events" BASEGAIN = "Baseline Gain" BASELIFT =
"Baseline Lift" BASELIFTC = "Baseline Cumulative Lift" BASERESP = "Baseline % Response"
BASERESPC = "Baseline Cumulative % Response" BASELIFTC = "Baseline Cumulative Lift" BESTCAP =
"Best % Captured Response" BESTCAPC = "Best Cumulative % Captured Response" BESTGAIN = "Best
Gain" BESTRESP = "Best % Response" BESTRESPC = "Best Cumulative % Response" BESTLIFT = "Best
Lift" BESTLIFTC = "Best Cumulative Lift" BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "%
Captured Response" CAPC = "Cumulative % Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT
= "Lift" LIFTC = "Cumulative Lift" NUMNEVENT = "Number of Nonevents" N = "Number of
Observations" EVENT = "Event" RESPC = "Cumulative % Response" NUMBEROFEVENTS = "Number of
Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "TARGET_B";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'Target Variable Indicates for Response to 97NK
Mailing';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "TARGET_B";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'Target Variable Indicates for Response to 97NK
Mailing';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
31364      %let _cn = %sysfunc(getoption(CENTER));
31365      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
31366      proc print data=EMWS1.Reg_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMREPORTFIT noobs label;
31367      var STAT LABEL TRAIN
31368      VALIDATE
31369      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
31370      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
31371      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
31372      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
31373      run;
 
NOTE: There were 22 observations read from the data set EMWS1.REG_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 20.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
31374      title10;
MPRINT(EM_DIAGRAM):   title10;
31375      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
31376      proc sort data=EMWS1.Reg_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Reg_EMCLASSIFICATION nothreads;
31377      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
31378      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.REG_EMCLASSIFICATION.
NOTE: The data set EMWS1.REG_EMCLASSIFICATION has 12 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
31379      %let _cn = %sysfunc(getoption(CENTER));
31380      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
31381      proc print data=EMWS1.Reg_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMCLASSIFICATION noobs label;
31382      var from into pct_row pct_col count percent
31383      Adjustedpercent
31384      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent Adjustedpercent ;
31385      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
31386      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
31387      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
31388      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
31389      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
31390      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
31391      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
31392      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
31393      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
31394      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
31395      run;
 
NOTE: BY line has been truncated at least once.
NOTE: The above message was for the following BY group:
      Data Role=TRAIN Target Variable=TARGET_B Target Label=Target Variable Indicates for
      Response to
NOTE: There were 4 observations read from the data set EMWS1.REG_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 21.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
31396      proc print data=EMWS1.Reg_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMCLASSIFICATION noobs label;
31397      var from into pct_row pct_col count percent
31398      Adjustedpercent
31399      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent Adjustedpercent ;
31400      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
31401      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
31402      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
31403      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
31404      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
31405      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
31406      where _TYPE_='DECISION';
MPRINT(EM_DIAGRAM):   where _TYPE_='DECISION';
31407      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
31408      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
31409      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_decisiontable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Decision Table";
MPRINT(EM_DIAGRAM):   run;
31410      run;
 
NOTE: BY line has been truncated at least once.
NOTE: The above message was for the following BY group:
      Data Role=TRAIN Target Variable=TARGET_B Target Label=Target Variable Indicates for
      Response to
NOTE: There were 8 observations read from the data set EMWS1.REG_EMCLASSIFICATION.
      WHERE _TYPE_='DECISION';
NOTE: The PROCEDURE PRINT printed page 22.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
31411      title9;
MPRINT(EM_DIAGRAM):   title9;
31412      title10;
MPRINT(EM_DIAGRAM):   title10;
31413      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
31414      %let _cn = %sysfunc(getoption(CENTER));
31415      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
31416      data EMWS1.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMEVENTREPORT;
31417      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
31417    ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
31418      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
31418    !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
31418    ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
31418    ! FALSEEVENT
31419      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
31419    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
31419    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
31420         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
31421      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
31422      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
31423      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
31424      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
31425      set EMWS1.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMEVENTREPORT;
31426      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.REG_EMEVENTREPORT.
NOTE: The data set EMWS1.REG_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
31427      proc print data=EMWS1.Reg_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMEVENTREPORT noobs label;
31428      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
31429      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
31430      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
31431      run;
 
NOTE: BY line has been truncated at least once.
NOTE: The above message was for the following BY group:
      Data Role=TRAIN Target=TARGET_B Target Label=Target Variable Indicates for Response to
      97NK Mai
NOTE: There were 2 observations read from the data set EMWS1.REG_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 23.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
31432      title10;
MPRINT(EM_DIAGRAM):   title10;
31433      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
31434      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
31435      modify Reg_EMRANK;
MPRINT(EM_DIAGRAM):   modify Reg_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
31436      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
31437      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
31437    ! ;
MPRINT(EM_DIAGRAM):   run;
31438      run;
 
NOTE: MODIFY was successful for EMWS1.REG_EMRANK.DATA.
31439      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
 
 
31440      %let _cn = %sysfunc(getoption(CENTER));
31441      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
31442      proc print data=EMWS1.Reg_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMRANK label noobs;
31443      var
31444      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
31445      by
31446      notsorted DATAROLE
31447      notsorted TARGET
31448      notsorted TARGETLABEL
31449      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
31450      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
31451      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
31452      run;
 
NOTE: BY line has been truncated at least once.
NOTE: The above message was for the following BY group:
      Data Role=TRAIN Target Variable=TARGET_B Target Label=Target Variable Indicates for
      Response to
NOTE: There were 40 observations read from the data set EMWS1.REG_EMRANK.
NOTE: The PROCEDURE PRINT printed page 24.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
31453      title10;
MPRINT(EM_DIAGRAM):   title10;
31454      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
31455      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
31456      modify Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
31457      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
31457    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
31458      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
31458    ! ;
MPRINT(EM_DIAGRAM):   run;
31459      run;
 
NOTE: MODIFY was successful for EMWS1.REG_EMSCOREDIST.DATA.
31460      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.26 seconds
      cpu time            0.26 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "TARGET_B" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
